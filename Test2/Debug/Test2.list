
Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006910  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c0c  08006c0c  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08006c0c  08006c0c  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c0c  08006c0c  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08006c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000178  08006d8c  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08006d8c  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017466  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003202  00000000  00000000  00037606  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0003a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  0003b410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b43  00000000  00000000  0003beb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7b7  00000000  00000000  000559f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c91b  00000000  00000000  000641aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b74  00000000  00000000  000e0b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069b8 	.word	0x080069b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	080069b8 	.word	0x080069b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <HAL_Init+0x24>)
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f809 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f005 f909 	bl	800545c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000260:	f003 f982 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8000264:	0002      	movs	r2, r0
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	0099      	lsls	r1, r3, #2
 800026a:	0010      	movs	r0, r2
 800026c:	f7ff ff54 	bl	8000118 <__udivsi3>
 8000270:	0003      	movs	r3, r0
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f9ed 	bl	8000652 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	425b      	negs	r3, r3
 800027e:	2200      	movs	r2, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f9c1 	bl	8000608 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  uwTick++;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_IncTick+0x14>)
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200001b8 	.word	0x200001b8

080002a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  return uwTick;
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_GetTick+0x10>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200001b8 	.word	0x200001b8

080002bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d101      	bne.n	80002ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002ca:	2301      	movs	r3, #1
 80002cc:	e0f0      	b.n	80004b0 <HAL_CAN_Init+0x1f4>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2220      	movs	r2, #32
 80002d2:	5c9b      	ldrb	r3, [r3, r2]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d103      	bne.n	80002e2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	0018      	movs	r0, r3
 80002de:	f005 f8e1 	bl	80054a4 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2102      	movs	r1, #2
 80002ee:	438a      	bics	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002f2:	f7ff ffd9 	bl	80002a8 <HAL_GetTick>
 80002f6:	0003      	movs	r3, r0
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002fa:	e013      	b.n	8000324 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002fc:	f7ff ffd4 	bl	80002a8 <HAL_GetTick>
 8000300:	0002      	movs	r2, r0
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	2b0a      	cmp	r3, #10
 8000308:	d90c      	bls.n	8000324 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	0292      	lsls	r2, r2, #10
 8000312:	431a      	orrs	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2220      	movs	r2, #32
 800031c:	2105      	movs	r1, #5
 800031e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000320:	2301      	movs	r3, #1
 8000322:	e0c5      	b.n	80004b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	2202      	movs	r2, #2
 800032c:	4013      	ands	r3, r2
 800032e:	d1e5      	bne.n	80002fc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2101      	movs	r1, #1
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000340:	f7ff ffb2 	bl	80002a8 <HAL_GetTick>
 8000344:	0003      	movs	r3, r0
 8000346:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000348:	e013      	b.n	8000372 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800034a:	f7ff ffad 	bl	80002a8 <HAL_GetTick>
 800034e:	0002      	movs	r2, r0
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d90c      	bls.n	8000372 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	0292      	lsls	r2, r2, #10
 8000360:	431a      	orrs	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2220      	movs	r2, #32
 800036a:	2105      	movs	r1, #5
 800036c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800036e:	2301      	movs	r3, #1
 8000370:	e09e      	b.n	80004b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	d0e5      	beq.n	800034a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	7e1b      	ldrb	r3, [r3, #24]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d108      	bne.n	8000398 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	430a      	orrs	r2, r1
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	e007      	b.n	80003a8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	438a      	bics	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7e5b      	ldrb	r3, [r3, #25]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d108      	bne.n	80003c2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	430a      	orrs	r2, r1
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	e007      	b.n	80003d2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	438a      	bics	r2, r1
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7e9b      	ldrb	r3, [r3, #26]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d108      	bne.n	80003ec <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2120      	movs	r1, #32
 80003e6:	430a      	orrs	r2, r1
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e007      	b.n	80003fc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2120      	movs	r1, #32
 80003f8:	438a      	bics	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7edb      	ldrb	r3, [r3, #27]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d108      	bne.n	8000416 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2110      	movs	r1, #16
 8000410:	438a      	bics	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	e007      	b.n	8000426 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2110      	movs	r1, #16
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7f1b      	ldrb	r3, [r3, #28]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d108      	bne.n	8000440 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2108      	movs	r1, #8
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	e007      	b.n	8000450 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2108      	movs	r1, #8
 800044c:	438a      	bics	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7f5b      	ldrb	r3, [r3, #29]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d108      	bne.n	800046a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2104      	movs	r1, #4
 8000464:	430a      	orrs	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e007      	b.n	800047a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2104      	movs	r1, #4
 8000476:	438a      	bics	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	431a      	orrs	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	431a      	orrs	r2, r3
 8000490:	0011      	movs	r1, r2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	430a      	orrs	r2, r1
 800049e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2220      	movs	r2, #32
 80004aa:	2101      	movs	r1, #1
 80004ac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	001a      	movs	r2, r3
 80004ca:	231f      	movs	r3, #31
 80004cc:	401a      	ands	r2, r3
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <NVIC_EnableIRQ+0x28>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	4091      	lsls	r1, r2
 80004d4:	000a      	movs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	0002      	movs	r2, r0
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b7f      	cmp	r3, #127	; 0x7f
 80004f8:	d932      	bls.n	8000560 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fa:	4a2f      	ldr	r2, [pc, #188]	; (80005b8 <NVIC_SetPriority+0xd4>)
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	0019      	movs	r1, r3
 8000502:	230f      	movs	r3, #15
 8000504:	400b      	ands	r3, r1
 8000506:	3b08      	subs	r3, #8
 8000508:	089b      	lsrs	r3, r3, #2
 800050a:	3306      	adds	r3, #6
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	3304      	adds	r3, #4
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	1dfa      	adds	r2, r7, #7
 8000516:	7812      	ldrb	r2, [r2, #0]
 8000518:	0011      	movs	r1, r2
 800051a:	2203      	movs	r2, #3
 800051c:	400a      	ands	r2, r1
 800051e:	00d2      	lsls	r2, r2, #3
 8000520:	21ff      	movs	r1, #255	; 0xff
 8000522:	4091      	lsls	r1, r2
 8000524:	000a      	movs	r2, r1
 8000526:	43d2      	mvns	r2, r2
 8000528:	401a      	ands	r2, r3
 800052a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	019b      	lsls	r3, r3, #6
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	401a      	ands	r2, r3
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	0018      	movs	r0, r3
 800053a:	2303      	movs	r3, #3
 800053c:	4003      	ands	r3, r0
 800053e:	00db      	lsls	r3, r3, #3
 8000540:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <NVIC_SetPriority+0xd4>)
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	001c      	movs	r4, r3
 800054a:	230f      	movs	r3, #15
 800054c:	4023      	ands	r3, r4
 800054e:	3b08      	subs	r3, #8
 8000550:	089b      	lsrs	r3, r3, #2
 8000552:	430a      	orrs	r2, r1
 8000554:	3306      	adds	r3, #6
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	18c3      	adds	r3, r0, r3
 800055a:	3304      	adds	r3, #4
 800055c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800055e:	e027      	b.n	80005b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <NVIC_SetPriority+0xd8>)
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b25b      	sxtb	r3, r3
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	33c0      	adds	r3, #192	; 0xc0
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	589b      	ldr	r3, [r3, r2]
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	0011      	movs	r1, r2
 8000576:	2203      	movs	r2, #3
 8000578:	400a      	ands	r2, r1
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	21ff      	movs	r1, #255	; 0xff
 800057e:	4091      	lsls	r1, r2
 8000580:	000a      	movs	r2, r1
 8000582:	43d2      	mvns	r2, r2
 8000584:	401a      	ands	r2, r3
 8000586:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	401a      	ands	r2, r3
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	0018      	movs	r0, r3
 8000596:	2303      	movs	r3, #3
 8000598:	4003      	ands	r3, r0
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059e:	4807      	ldr	r0, [pc, #28]	; (80005bc <NVIC_SetPriority+0xd8>)
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	089b      	lsrs	r3, r3, #2
 80005a8:	430a      	orrs	r2, r1
 80005aa:	33c0      	adds	r3, #192	; 0xc0
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	501a      	str	r2, [r3, r0]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b003      	add	sp, #12
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	e000ed00 	.word	0xe000ed00
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <SysTick_Config+0x40>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d901      	bls.n	80005d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d2:	2301      	movs	r3, #1
 80005d4:	e010      	b.n	80005f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <SysTick_Config+0x44>)
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	3a01      	subs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	2103      	movs	r1, #3
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff7d 	bl	80004e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <SysTick_Config+0x44>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <SysTick_Config+0x44>)
 80005f2:	2207      	movs	r2, #7
 80005f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	00ffffff 	.word	0x00ffffff
 8000604:	e000e010 	.word	0xe000e010

08000608 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	210f      	movs	r1, #15
 8000614:	187b      	adds	r3, r7, r1
 8000616:	1c02      	adds	r2, r0, #0
 8000618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	187b      	adds	r3, r7, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f7ff ff5d 	bl	80004e4 <NVIC_SetPriority>
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}

08000632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	0002      	movs	r2, r0
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff37 	bl	80004b8 <NVIC_EnableIRQ>
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff ffaf 	bl	80005c0 <SysTick_Config>
 8000662:	0003      	movs	r3, r0
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000682:	e155      	b.n	8000930 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	4091      	lsls	r1, r2
 800068e:	000a      	movs	r2, r1
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <HAL_GPIO_Init+0x30>
 800069a:	e146      	b.n	800092a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d003      	beq.n	80006ac <HAL_GPIO_Init+0x40>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b12      	cmp	r3, #18
 80006aa:	d123      	bne.n	80006f4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	08da      	lsrs	r2, r3, #3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3208      	adds	r2, #8
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	58d3      	ldr	r3, [r2, r3]
 80006b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2207      	movs	r2, #7
 80006be:	4013      	ands	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	220f      	movs	r2, #15
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	43da      	mvns	r2, r3
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	691a      	ldr	r2, [r3, #16]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2107      	movs	r1, #7
 80006d8:	400b      	ands	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	409a      	lsls	r2, r3
 80006de:	0013      	movs	r3, r2
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	08da      	lsrs	r2, r3, #3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3208      	adds	r2, #8
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	6939      	ldr	r1, [r7, #16]
 80006f2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2203      	movs	r2, #3
 8000700:	409a      	lsls	r2, r3
 8000702:	0013      	movs	r3, r2
 8000704:	43da      	mvns	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	2203      	movs	r2, #3
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	409a      	lsls	r2, r3
 800071a:	0013      	movs	r3, r2
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d00b      	beq.n	8000748 <HAL_GPIO_Init+0xdc>
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d007      	beq.n	8000748 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073c:	2b11      	cmp	r3, #17
 800073e:	d003      	beq.n	8000748 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b12      	cmp	r3, #18
 8000746:	d130      	bne.n	80007aa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	2203      	movs	r2, #3
 8000754:	409a      	lsls	r2, r3
 8000756:	0013      	movs	r3, r2
 8000758:	43da      	mvns	r2, r3
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	409a      	lsls	r2, r3
 800076a:	0013      	movs	r3, r2
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	4313      	orrs	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800077e:	2201      	movs	r2, #1
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	43da      	mvns	r2, r3
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	2201      	movs	r2, #1
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	2203      	movs	r2, #3
 80007b6:	409a      	lsls	r2, r3
 80007b8:	0013      	movs	r3, r2
 80007ba:	43da      	mvns	r2, r3
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4013      	ands	r3, r2
 80007c0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	409a      	lsls	r2, r3
 80007cc:	0013      	movs	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	055b      	lsls	r3, r3, #21
 80007e2:	4013      	ands	r3, r2
 80007e4:	d100      	bne.n	80007e8 <HAL_GPIO_Init+0x17c>
 80007e6:	e0a0      	b.n	800092a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	4b57      	ldr	r3, [pc, #348]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80007ea:	699a      	ldr	r2, [r3, #24]
 80007ec:	4b56      	ldr	r3, [pc, #344]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80007ee:	2101      	movs	r1, #1
 80007f0:	430a      	orrs	r2, r1
 80007f2:	619a      	str	r2, [r3, #24]
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_GPIO_Init+0x2dc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000800:	4a52      	ldr	r2, [pc, #328]	; (800094c <HAL_GPIO_Init+0x2e0>)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	089b      	lsrs	r3, r3, #2
 8000806:	3302      	adds	r3, #2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	589b      	ldr	r3, [r3, r2]
 800080c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2203      	movs	r2, #3
 8000812:	4013      	ands	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	220f      	movs	r2, #15
 8000818:	409a      	lsls	r2, r3
 800081a:	0013      	movs	r3, r2
 800081c:	43da      	mvns	r2, r3
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	2390      	movs	r3, #144	; 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	429a      	cmp	r2, r3
 800082c:	d019      	beq.n	8000862 <HAL_GPIO_Init+0x1f6>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a47      	ldr	r2, [pc, #284]	; (8000950 <HAL_GPIO_Init+0x2e4>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d013      	beq.n	800085e <HAL_GPIO_Init+0x1f2>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a46      	ldr	r2, [pc, #280]	; (8000954 <HAL_GPIO_Init+0x2e8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d00d      	beq.n	800085a <HAL_GPIO_Init+0x1ee>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a45      	ldr	r2, [pc, #276]	; (8000958 <HAL_GPIO_Init+0x2ec>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d007      	beq.n	8000856 <HAL_GPIO_Init+0x1ea>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a44      	ldr	r2, [pc, #272]	; (800095c <HAL_GPIO_Init+0x2f0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d101      	bne.n	8000852 <HAL_GPIO_Init+0x1e6>
 800084e:	2304      	movs	r3, #4
 8000850:	e008      	b.n	8000864 <HAL_GPIO_Init+0x1f8>
 8000852:	2305      	movs	r3, #5
 8000854:	e006      	b.n	8000864 <HAL_GPIO_Init+0x1f8>
 8000856:	2303      	movs	r3, #3
 8000858:	e004      	b.n	8000864 <HAL_GPIO_Init+0x1f8>
 800085a:	2302      	movs	r3, #2
 800085c:	e002      	b.n	8000864 <HAL_GPIO_Init+0x1f8>
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <HAL_GPIO_Init+0x1f8>
 8000862:	2300      	movs	r3, #0
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	2103      	movs	r1, #3
 8000868:	400a      	ands	r2, r1
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	4093      	lsls	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000874:	4935      	ldr	r1, [pc, #212]	; (800094c <HAL_GPIO_Init+0x2e0>)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	3302      	adds	r3, #2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	43da      	mvns	r2, r3
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	2380      	movs	r3, #128	; 0x80
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	4013      	ands	r3, r2
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43da      	mvns	r2, r3
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	029b      	lsls	r3, r3, #10
 80008c4:	4013      	ands	r3, r2
 80008c6:	d003      	beq.n	80008d0 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	43da      	mvns	r2, r3
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	035b      	lsls	r3, r3, #13
 80008ee:	4013      	ands	r3, r2
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	039b      	lsls	r3, r3, #14
 8000918:	4013      	ands	r3, r2
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_GPIO_Init+0x2f4>)
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	40da      	lsrs	r2, r3
 8000938:	1e13      	subs	r3, r2, #0
 800093a:	d000      	beq.n	800093e <HAL_GPIO_Init+0x2d2>
 800093c:	e6a2      	b.n	8000684 <HAL_GPIO_Init+0x18>
  } 
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b006      	add	sp, #24
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021000 	.word	0x40021000
 800094c:	40010000 	.word	0x40010000
 8000950:	48000400 	.word	0x48000400
 8000954:	48000800 	.word	0x48000800
 8000958:	48000c00 	.word	0x48000c00
 800095c:	48001000 	.word	0x48001000
 8000960:	40010400 	.word	0x40010400

08000964 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e0de      	b.n	8000b3c <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	23ea      	movs	r3, #234	; 0xea
 8000982:	33ff      	adds	r3, #255	; 0xff
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d108      	bne.n	800099e <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	23f4      	movs	r3, #244	; 0xf4
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2100      	movs	r1, #0
 8000994:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f004 fee3 	bl	8005764 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	23ea      	movs	r3, #234	; 0xea
 80009a2:	33ff      	adds	r3, #255	; 0xff
 80009a4:	2103      	movs	r1, #3
 80009a6:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e043      	b.n	8000a36 <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	2029      	movs	r0, #41	; 0x29
 80009b4:	0013      	movs	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	18cb      	adds	r3, r1, r3
 80009be:	181b      	adds	r3, r3, r0
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	b2dc      	uxtb	r4, r3
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	0013      	movs	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	18cb      	adds	r3, r1, r3
 80009d8:	181b      	adds	r3, r3, r0
 80009da:	1c22      	adds	r2, r4, #0
 80009dc:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	202b      	movs	r0, #43	; 0x2b
 80009e4:	0013      	movs	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	18cb      	adds	r3, r1, r3
 80009ee:	181b      	adds	r3, r3, r0
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	0013      	movs	r3, r2
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	18cb      	adds	r3, r1, r3
 8000a02:	3334      	adds	r3, #52	; 0x34
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	18cb      	adds	r3, r1, r3
 8000a16:	3338      	adds	r3, #56	; 0x38
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	0013      	movs	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	18cb      	adds	r3, r1, r3
 8000a2a:	333c      	adds	r3, #60	; 0x3c
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3b6      	bcc.n	80009ae <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e04e      	b.n	8000ae4 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	33ff      	adds	r3, #255	; 0xff
 8000a4e:	0019      	movs	r1, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	1a9b      	subs	r3, r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	18c3      	adds	r3, r0, r3
 8000a5a:	185b      	adds	r3, r3, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2dc      	uxtb	r4, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	2384      	movs	r3, #132	; 0x84
 8000a6a:	0059      	lsls	r1, r3, #1
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	18c3      	adds	r3, r0, r3
 8000a76:	185b      	adds	r3, r3, r1
 8000a78:	1c22      	adds	r2, r4, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	230c      	movs	r3, #12
 8000a82:	33ff      	adds	r3, #255	; 0xff
 8000a84:	0019      	movs	r1, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	1a9b      	subs	r3, r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	18c3      	adds	r3, r0, r3
 8000a90:	185b      	adds	r3, r3, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	238a      	movs	r3, #138	; 0x8a
 8000a9c:	0059      	lsls	r1, r3, #1
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	18c3      	adds	r3, r0, r3
 8000aa8:	185b      	adds	r3, r3, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	238c      	movs	r3, #140	; 0x8c
 8000ab4:	0059      	lsls	r1, r3, #1
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	18c3      	adds	r3, r0, r3
 8000ac0:	185b      	adds	r3, r3, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	238e      	movs	r3, #142	; 0x8e
 8000acc:	0059      	lsls	r1, r3, #1
 8000ace:	0013      	movs	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	1a9b      	subs	r3, r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	18c3      	adds	r3, r0, r3
 8000ad8:	185b      	adds	r3, r3, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3ab      	bcc.n	8000a46 <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2240      	movs	r2, #64	; 0x40
 8000af4:	2101      	movs	r1, #1
 8000af6:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	2100      	movs	r1, #0
 8000b00:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2244      	movs	r2, #68	; 0x44
 8000b08:	2100      	movs	r1, #0
 8000b0a:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2250      	movs	r2, #80	; 0x50
 8000b12:	2100      	movs	r1, #0
 8000b14:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000b16:	23bf      	movs	r3, #191	; 0xbf
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	b291      	uxth	r1, r2
 8000b24:	2240      	movs	r2, #64	; 0x40
 8000b26:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2224      	movs	r2, #36	; 0x24
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	23ea      	movs	r3, #234	; 0xea
 8000b34:	33ff      	adds	r3, #255	; 0xff
 8000b36:	2101      	movs	r1, #1
 8000b38:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b005      	add	sp, #20
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2258      	movs	r2, #88	; 0x58
 8000b52:	5a9b      	ldrh	r3, [r3, r2]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4905      	ldr	r1, [pc, #20]	; (8000b70 <HAL_PCD_Start+0x2c>)
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	b291      	uxth	r1, r2
 8000b60:	2258      	movs	r2, #88	; 0x58
 8000b62:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	ffff8000 	.word	0xffff8000

08000b74 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2244      	movs	r2, #68	; 0x44
 8000b86:	5a9b      	ldrh	r3, [r3, r2]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	401a      	ands	r2, r3
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d103      	bne.n	8000ba2 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f001 fc37 	bl	8002410 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2244      	movs	r2, #68	; 0x44
 8000ba8:	5a9b      	ldrh	r3, [r3, r2]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	001a      	movs	r2, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d114      	bne.n	8000be6 <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2244      	movs	r2, #68	; 0x44
 8000bc2:	5a9b      	ldrh	r3, [r3, r2]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4977      	ldr	r1, [pc, #476]	; (8000da8 <HAL_PCD_IRQHandler+0x234>)
 8000bcc:	400a      	ands	r2, r1
 8000bce:	b291      	uxth	r1, r2
 8000bd0:	2244      	movs	r2, #68	; 0x44
 8000bd2:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f004 fe53 	bl	8005882 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 f8ef 	bl	8000dc4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2244      	movs	r2, #68	; 0x44
 8000bec:	5a9b      	ldrh	r3, [r3, r2]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	01db      	lsls	r3, r3, #7
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d10b      	bne.n	8000c18 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2244      	movs	r2, #68	; 0x44
 8000c06:	5a9b      	ldrh	r3, [r3, r2]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4967      	ldr	r1, [pc, #412]	; (8000dac <HAL_PCD_IRQHandler+0x238>)
 8000c10:	400a      	ands	r2, r1
 8000c12:	b291      	uxth	r1, r2
 8000c14:	2244      	movs	r2, #68	; 0x44
 8000c16:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2244      	movs	r2, #68	; 0x44
 8000c1e:	5a9b      	ldrh	r3, [r3, r2]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	001a      	movs	r2, r3
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	019b      	lsls	r3, r3, #6
 8000c28:	401a      	ands	r2, r3
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d10b      	bne.n	8000c4a <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2244      	movs	r2, #68	; 0x44
 8000c38:	5a9b      	ldrh	r3, [r3, r2]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	495b      	ldr	r1, [pc, #364]	; (8000db0 <HAL_PCD_IRQHandler+0x23c>)
 8000c42:	400a      	ands	r2, r1
 8000c44:	b291      	uxth	r1, r2
 8000c46:	2244      	movs	r2, #68	; 0x44
 8000c48:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	5a9b      	ldrh	r3, [r3, r2]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	001a      	movs	r2, r3
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d124      	bne.n	8000cae <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	5a9b      	ldrh	r3, [r3, r2]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2104      	movs	r1, #4
 8000c74:	438a      	bics	r2, r1
 8000c76:	b291      	uxth	r1, r2
 8000c78:	2240      	movs	r2, #64	; 0x40
 8000c7a:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000c7c:	23bd      	movs	r3, #189	; 0xbd
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	b291      	uxth	r1, r2
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	0018      	movs	r0, r3
 8000c92:	f004 fe37 	bl	8005904 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2244      	movs	r2, #68	; 0x44
 8000c9c:	5a9b      	ldrh	r3, [r3, r2]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4943      	ldr	r1, [pc, #268]	; (8000db4 <HAL_PCD_IRQHandler+0x240>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	b291      	uxth	r1, r2
 8000caa:	2244      	movs	r2, #68	; 0x44
 8000cac:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2244      	movs	r2, #68	; 0x44
 8000cb4:	5a9b      	ldrh	r3, [r3, r2]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d134      	bne.n	8000d32 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2244      	movs	r2, #68	; 0x44
 8000cce:	5a9b      	ldrh	r3, [r3, r2]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4938      	ldr	r1, [pc, #224]	; (8000db8 <HAL_PCD_IRQHandler+0x244>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	b291      	uxth	r1, r2
 8000cdc:	2244      	movs	r2, #68	; 0x44
 8000cde:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2240      	movs	r2, #64	; 0x40
 8000ce6:	5a9b      	ldrh	r3, [r3, r2]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2108      	movs	r1, #8
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	b291      	uxth	r1, r2
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	5a9b      	ldrh	r3, [r3, r2]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2104      	movs	r1, #4
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	b291      	uxth	r1, r2
 8000d0c:	2240      	movs	r2, #64	; 0x40
 8000d0e:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2244      	movs	r2, #68	; 0x44
 8000d16:	5a9b      	ldrh	r3, [r3, r2]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	015b      	lsls	r3, r3, #5
 8000d20:	401a      	ands	r2, r3
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	015b      	lsls	r3, r3, #5
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d003      	beq.n	8000d32 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f004 fdcd 	bl	80058cc <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2244      	movs	r2, #68	; 0x44
 8000d38:	5a9b      	ldrh	r3, [r3, r2]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	401a      	ands	r2, r3
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d10f      	bne.n	8000d6c <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2244      	movs	r2, #68	; 0x44
 8000d52:	5a9b      	ldrh	r3, [r3, r2]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4918      	ldr	r1, [pc, #96]	; (8000dbc <HAL_PCD_IRQHandler+0x248>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	b291      	uxth	r1, r2
 8000d60:	2244      	movs	r2, #68	; 0x44
 8000d62:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	0018      	movs	r0, r3
 8000d68:	f004 fd7c 	bl	8005864 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2244      	movs	r2, #68	; 0x44
 8000d72:	5a9b      	ldrh	r3, [r3, r2]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	001a      	movs	r2, r3
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d10b      	bne.n	8000d9e <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2244      	movs	r2, #68	; 0x44
 8000d8c:	5a9b      	ldrh	r3, [r3, r2]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <HAL_PCD_IRQHandler+0x24c>)
 8000d96:	400a      	ands	r2, r1
 8000d98:	b291      	uxth	r1, r2
 8000d9a:	2244      	movs	r2, #68	; 0x44
 8000d9c:	5299      	strh	r1, [r3, r2]
  }
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	fffffbff 	.word	0xfffffbff
 8000dac:	ffffbfff 	.word	0xffffbfff
 8000db0:	ffffdfff 	.word	0xffffdfff
 8000db4:	ffffefff 	.word	0xffffefff
 8000db8:	fffff7ff 	.word	0xfffff7ff
 8000dbc:	fffffdff 	.word	0xfffffdff
 8000dc0:	fffffeff 	.word	0xfffffeff

08000dc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	000a      	movs	r2, r1
 8000dce:	1cfb      	adds	r3, r7, #3
 8000dd0:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	23f4      	movs	r3, #244	; 0xf4
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d101      	bne.n	8000de2 <HAL_PCD_SetAddress+0x1e>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e019      	b.n	8000e16 <HAL_PCD_SetAddress+0x52>
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	23f4      	movs	r3, #244	; 0xf4
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2101      	movs	r1, #1
 8000dea:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8000dec:	1cfb      	adds	r3, r7, #3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d105      	bne.n	8000e00 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	224c      	movs	r2, #76	; 0x4c
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	5299      	strh	r1, [r3, r2]
 8000dfe:	e004      	b.n	8000e0a <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1cfa      	adds	r2, r7, #3
 8000e04:	2124      	movs	r1, #36	; 0x24
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	23f4      	movs	r3, #244	; 0xf4
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2100      	movs	r1, #0
 8000e12:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	000c      	movs	r4, r1
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	1cfb      	adds	r3, r7, #3
 8000e30:	1c22      	adds	r2, r4, #0
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	003b      	movs	r3, r7
 8000e36:	1c02      	adds	r2, r0, #0
 8000e38:	801a      	strh	r2, [r3, #0]
 8000e3a:	1cbb      	adds	r3, r7, #2
 8000e3c:	1c0a      	adds	r2, r1, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e40:	2311      	movs	r3, #17
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000e48:	1cfb      	adds	r3, r7, #3
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da0c      	bge.n	8000e6c <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e52:	1cfb      	adds	r3, r7, #3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	227f      	movs	r2, #127	; 0x7f
 8000e58:	401a      	ands	r2, r3
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3328      	adds	r3, #40	; 0x28
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e00c      	b.n	8000e86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	227f      	movs	r2, #127	; 0x7f
 8000e72:	401a      	ands	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	3309      	adds	r3, #9
 8000e7e:	33ff      	adds	r3, #255	; 0xff
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8000e86:	1cfb      	adds	r3, r7, #3
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	227f      	movs	r2, #127	; 0x7f
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000e94:	1cfb      	adds	r3, r7, #3
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	09db      	lsrs	r3, r3, #7
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	1cba      	adds	r2, r7, #2
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	23f4      	movs	r3, #244	; 0xf4
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_PCD_EP_Open+0xa6>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e332      	b.n	800152c <HAL_PCD_EP_Open+0x70c>
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	23f4      	movs	r3, #244	; 0xf4
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2101      	movs	r1, #1
 8000ece:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	78db      	ldrb	r3, [r3, #3]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d050      	beq.n	8000f7a <HAL_PCD_EP_Open+0x15a>
 8000ed8:	dc02      	bgt.n	8000ee0 <HAL_PCD_EP_Open+0xc0>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 8000ede:	e064      	b.n	8000faa <HAL_PCD_EP_Open+0x18a>
  switch (ep->type)
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d01a      	beq.n	8000f1a <HAL_PCD_EP_Open+0xfa>
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d030      	beq.n	8000f4a <HAL_PCD_EP_Open+0x12a>
    break;
 8000ee8:	e05f      	b.n	8000faa <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	001a      	movs	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4abf      	ldr	r2, [pc, #764]	; (80011fc <HAL_PCD_EP_Open+0x3dc>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0019      	movs	r1, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	18cb      	adds	r3, r1, r3
 8000f10:	49bb      	ldr	r1, [pc, #748]	; (8001200 <HAL_PCD_EP_Open+0x3e0>)
 8000f12:	430a      	orrs	r2, r1
 8000f14:	b292      	uxth	r2, r2
 8000f16:	801a      	strh	r2, [r3, #0]
    break;
 8000f18:	e047      	b.n	8000faa <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	001a      	movs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4ab3      	ldr	r2, [pc, #716]	; (80011fc <HAL_PCD_EP_Open+0x3dc>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0019      	movs	r1, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	18cb      	adds	r3, r1, r3
 8000f40:	49b0      	ldr	r1, [pc, #704]	; (8001204 <HAL_PCD_EP_Open+0x3e4>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	b292      	uxth	r2, r2
 8000f46:	801a      	strh	r2, [r3, #0]
    break;
 8000f48:	e02f      	b.n	8000faa <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	001a      	movs	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	18d3      	adds	r3, r2, r3
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4aa7      	ldr	r2, [pc, #668]	; (80011fc <HAL_PCD_EP_Open+0x3dc>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	0019      	movs	r1, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	18cb      	adds	r3, r1, r3
 8000f70:	49a5      	ldr	r1, [pc, #660]	; (8001208 <HAL_PCD_EP_Open+0x3e8>)
 8000f72:	430a      	orrs	r2, r1
 8000f74:	b292      	uxth	r2, r2
 8000f76:	801a      	strh	r2, [r3, #0]
    break;
 8000f78:	e017      	b.n	8000faa <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	001a      	movs	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4a9b      	ldr	r2, [pc, #620]	; (80011fc <HAL_PCD_EP_Open+0x3dc>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0019      	movs	r1, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	18cb      	adds	r3, r1, r3
 8000fa0:	499a      	ldr	r1, [pc, #616]	; (800120c <HAL_PCD_EP_Open+0x3ec>)
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	801a      	strh	r2, [r3, #0]
    break;
 8000fa8:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	001a      	movs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	18d3      	adds	r3, r2, r3
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_PCD_EP_Open+0x3f0>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	18cb      	adds	r3, r1, r3
 8000fda:	498a      	ldr	r1, [pc, #552]	; (8001204 <HAL_PCD_EP_Open+0x3e4>)
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	7a9b      	ldrb	r3, [r3, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d000      	beq.n	8000fec <HAL_PCD_EP_Open+0x1cc>
 8000fea:	e121      	b.n	8001230 <HAL_PCD_EP_Open+0x410>
  {
    if (ep->is_in)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d059      	beq.n	80010a8 <HAL_PCD_EP_Open+0x288>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2250      	movs	r2, #80	; 0x50
 8001002:	5a9b      	ldrh	r3, [r3, r2]
 8001004:	b29b      	uxth	r3, r3
 8001006:	001a      	movs	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	18d3      	adds	r3, r2, r3
 8001010:	001a      	movs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d3      	adds	r3, r2, r3
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	00d2      	lsls	r2, r2, #3
 800101c:	4694      	mov	ip, r2
 800101e:	4463      	add	r3, ip
 8001020:	001a      	movs	r2, r3
 8001022:	1c0b      	adds	r3, r1, #0
 8001024:	18db      	adds	r3, r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	18d3      	adds	r3, r2, r3
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	001a      	movs	r2, r3
 800103e:	2340      	movs	r3, #64	; 0x40
 8001040:	4013      	ands	r3, r2
 8001042:	d016      	beq.n	8001072 <HAL_PCD_EP_Open+0x252>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_PCD_EP_Open+0x3f0>)
 8001058:	4013      	ands	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0019      	movs	r1, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	18cb      	adds	r3, r1, r3
 800106a:	496a      	ldr	r1, [pc, #424]	; (8001214 <HAL_PCD_EP_Open+0x3f4>)
 800106c:	430a      	orrs	r2, r1
 800106e:	b292      	uxth	r2, r2
 8001070:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	001a      	movs	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4a64      	ldr	r2, [pc, #400]	; (8001218 <HAL_PCD_EP_Open+0x3f8>)
 8001086:	4013      	ands	r3, r2
 8001088:	b29c      	uxth	r4, r3
 800108a:	2320      	movs	r3, #32
 800108c:	4063      	eors	r3, r4
 800108e:	b29c      	uxth	r4, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	4a59      	ldr	r2, [pc, #356]	; (8001204 <HAL_PCD_EP_Open+0x3e4>)
 80010a0:	4322      	orrs	r2, r4
 80010a2:	b292      	uxth	r2, r2
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	e239      	b.n	800151c <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	889b      	ldrh	r3, [r3, #4]
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	b299      	uxth	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2250      	movs	r2, #80	; 0x50
 80010b6:	5a9b      	ldrh	r3, [r3, r2]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	001a      	movs	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	18d3      	adds	r3, r2, r3
 80010c4:	001a      	movs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	4a53      	ldr	r2, [pc, #332]	; (800121c <HAL_PCD_EP_Open+0x3fc>)
 80010ce:	4694      	mov	ip, r2
 80010d0:	4463      	add	r3, ip
 80010d2:	001a      	movs	r2, r3
 80010d4:	1c0b      	adds	r3, r1, #0
 80010d6:	18db      	adds	r3, r3, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2250      	movs	r2, #80	; 0x50
 80010e2:	5a9b      	ldrh	r3, [r3, r2]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	001a      	movs	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	001a      	movs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	4a49      	ldr	r2, [pc, #292]	; (8001220 <HAL_PCD_EP_Open+0x400>)
 80010fa:	4694      	mov	ip, r2
 80010fc:	4463      	add	r3, ip
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b3e      	cmp	r3, #62	; 0x3e
 8001106:	d91b      	bls.n	8001140 <HAL_PCD_EP_Open+0x320>
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	095a      	lsrs	r2, r3, #5
 800110e:	2312      	movs	r3, #18
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	221f      	movs	r2, #31
 800111a:	4013      	ands	r3, r2
 800111c:	d105      	bne.n	800112a <HAL_PCD_EP_Open+0x30a>
 800111e:	2112      	movs	r1, #18
 8001120:	187b      	adds	r3, r7, r1
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	187b      	adds	r3, r7, r1
 8001126:	3a01      	subs	r2, #1
 8001128:	801a      	strh	r2, [r3, #0]
 800112a:	2312      	movs	r3, #18
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	029b      	lsls	r3, r3, #10
 8001132:	b29b      	uxth	r3, r3
 8001134:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <HAL_PCD_EP_Open+0x404>)
 8001136:	4313      	orrs	r3, r2
 8001138:	b29a      	uxth	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	801a      	strh	r2, [r3, #0]
 800113e:	e017      	b.n	8001170 <HAL_PCD_EP_Open+0x350>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	085a      	lsrs	r2, r3, #1
 8001146:	2312      	movs	r3, #18
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	801a      	strh	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	d005      	beq.n	8001162 <HAL_PCD_EP_Open+0x342>
 8001156:	2112      	movs	r1, #18
 8001158:	187b      	adds	r3, r7, r1
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	187b      	adds	r3, r7, r1
 800115e:	3201      	adds	r2, #1
 8001160:	801a      	strh	r2, [r3, #0]
 8001162:	2312      	movs	r3, #18
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	b29a      	uxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	001a      	movs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	18d3      	adds	r3, r2, r3
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	001a      	movs	r2, r3
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	4013      	ands	r3, r2
 800118a:	d016      	beq.n	80011ba <HAL_PCD_EP_Open+0x39a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	001a      	movs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_PCD_EP_Open+0x3f0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0019      	movs	r1, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	18cb      	adds	r3, r1, r3
 80011b2:	491d      	ldr	r1, [pc, #116]	; (8001228 <HAL_PCD_EP_Open+0x408>)
 80011b4:	430a      	orrs	r2, r1
 80011b6:	b292      	uxth	r2, r2
 80011b8:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	18d3      	adds	r3, r2, r3
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_PCD_EP_Open+0x40c>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	b29c      	uxth	r4, r3
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	4063      	eors	r3, r4
 80011d8:	b29c      	uxth	r4, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	019b      	lsls	r3, r3, #6
 80011de:	4063      	eors	r3, r4
 80011e0:	b29c      	uxth	r4, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	001a      	movs	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_PCD_EP_Open+0x3e4>)
 80011f2:	4322      	orrs	r2, r4
 80011f4:	b292      	uxth	r2, r2
 80011f6:	801a      	strh	r2, [r3, #0]
 80011f8:	e190      	b.n	800151c <HAL_PCD_EP_Open+0x6fc>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	0000090f 	.word	0x0000090f
 8001200:	ffff8280 	.word	0xffff8280
 8001204:	ffff8080 	.word	0xffff8080
 8001208:	ffff8680 	.word	0xffff8680
 800120c:	ffff8480 	.word	0xffff8480
 8001210:	00000f0f 	.word	0x00000f0f
 8001214:	ffff80c0 	.word	0xffff80c0
 8001218:	ffff8fbf 	.word	0xffff8fbf
 800121c:	00000404 	.word	0x00000404
 8001220:	00000406 	.word	0x00000406
 8001224:	ffff8000 	.word	0xffff8000
 8001228:	ffffc080 	.word	0xffffc080
 800122c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4abc      	ldr	r2, [pc, #752]	; (8001534 <HAL_PCD_EP_Open+0x714>)
 8001244:	4013      	ands	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0019      	movs	r1, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	18cb      	adds	r3, r1, r3
 8001256:	49b8      	ldr	r1, [pc, #736]	; (8001538 <HAL_PCD_EP_Open+0x718>)
 8001258:	430a      	orrs	r2, r1
 800125a:	b292      	uxth	r2, r2
 800125c:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	88db      	ldrh	r3, [r3, #6]
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	b299      	uxth	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2250      	movs	r2, #80	; 0x50
 800126c:	5a9b      	ldrh	r3, [r3, r2]
 800126e:	b29b      	uxth	r3, r3
 8001270:	001a      	movs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	001a      	movs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	4694      	mov	ip, r2
 8001288:	4463      	add	r3, ip
 800128a:	001a      	movs	r2, r3
 800128c:	1c0b      	adds	r3, r1, #0
 800128e:	18db      	adds	r3, r3, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	8013      	strh	r3, [r2, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	891b      	ldrh	r3, [r3, #8]
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	b299      	uxth	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2250      	movs	r2, #80	; 0x50
 80012a2:	5a9b      	ldrh	r3, [r3, r2]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	001a      	movs	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	18d3      	adds	r3, r2, r3
 80012b0:	001a      	movs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	4aa0      	ldr	r2, [pc, #640]	; (800153c <HAL_PCD_EP_Open+0x71c>)
 80012ba:	4694      	mov	ip, r2
 80012bc:	4463      	add	r3, ip
 80012be:	001a      	movs	r2, r3
 80012c0:	1c0b      	adds	r3, r1, #0
 80012c2:	18db      	adds	r3, r3, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <HAL_PCD_EP_Open+0x4b2>
 80012d0:	e096      	b.n	8001400 <HAL_PCD_EP_Open+0x5e0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	001a      	movs	r2, r3
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	01db      	lsls	r3, r3, #7
 80012ea:	4013      	ands	r3, r2
 80012ec:	d016      	beq.n	800131c <HAL_PCD_EP_Open+0x4fc>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	001a      	movs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4a8f      	ldr	r2, [pc, #572]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 8001302:	4013      	ands	r3, r2
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0019      	movs	r1, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	18cb      	adds	r3, r1, r3
 8001314:	498b      	ldr	r1, [pc, #556]	; (8001544 <HAL_PCD_EP_Open+0x724>)
 8001316:	430a      	orrs	r2, r1
 8001318:	b292      	uxth	r2, r2
 800131a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	001a      	movs	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	001a      	movs	r2, r3
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	4013      	ands	r3, r2
 8001334:	d016      	beq.n	8001364 <HAL_PCD_EP_Open+0x544>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	001a      	movs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4a7d      	ldr	r2, [pc, #500]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 800134a:	4013      	ands	r3, r2
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	18cb      	adds	r3, r1, r3
 800135c:	497a      	ldr	r1, [pc, #488]	; (8001548 <HAL_PCD_EP_Open+0x728>)
 800135e:	430a      	orrs	r2, r1
 8001360:	b292      	uxth	r2, r2
 8001362:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 8001378:	4013      	ands	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0019      	movs	r1, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	18cb      	adds	r3, r1, r3
 800138a:	496f      	ldr	r1, [pc, #444]	; (8001548 <HAL_PCD_EP_Open+0x728>)
 800138c:	430a      	orrs	r2, r1
 800138e:	b292      	uxth	r2, r2
 8001390:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	001a      	movs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	18d3      	adds	r3, r2, r3
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_PCD_EP_Open+0x72c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	b29c      	uxth	r4, r3
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	4063      	eors	r3, r4
 80013b0:	b29c      	uxth	r4, r3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	4063      	eors	r3, r4
 80013b8:	b29c      	uxth	r4, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	001a      	movs	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	4a61      	ldr	r2, [pc, #388]	; (8001550 <HAL_PCD_EP_Open+0x730>)
 80013ca:	4322      	orrs	r2, r4
 80013cc:	b292      	uxth	r2, r2
 80013ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	001a      	movs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	18d3      	adds	r3, r2, r3
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4a5c      	ldr	r2, [pc, #368]	; (8001554 <HAL_PCD_EP_Open+0x734>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	b29c      	uxth	r4, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	001a      	movs	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	18d3      	adds	r3, r2, r3
 80013f6:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_PCD_EP_Open+0x730>)
 80013f8:	4322      	orrs	r2, r4
 80013fa:	b292      	uxth	r2, r2
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	e08d      	b.n	800151c <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	001a      	movs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	001a      	movs	r2, r3
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	4013      	ands	r3, r2
 800141a:	d016      	beq.n	800144a <HAL_PCD_EP_Open+0x62a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	001a      	movs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 8001430:	4013      	ands	r3, r2
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0019      	movs	r1, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	18cb      	adds	r3, r1, r3
 8001442:	4940      	ldr	r1, [pc, #256]	; (8001544 <HAL_PCD_EP_Open+0x724>)
 8001444:	430a      	orrs	r2, r1
 8001446:	b292      	uxth	r2, r2
 8001448:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	001a      	movs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	001a      	movs	r2, r3
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	4013      	ands	r3, r2
 8001462:	d016      	beq.n	8001492 <HAL_PCD_EP_Open+0x672>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	001a      	movs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4a32      	ldr	r2, [pc, #200]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 8001478:	4013      	ands	r3, r2
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0019      	movs	r1, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	18cb      	adds	r3, r1, r3
 800148a:	492f      	ldr	r1, [pc, #188]	; (8001548 <HAL_PCD_EP_Open+0x728>)
 800148c:	430a      	orrs	r2, r1
 800148e:	b292      	uxth	r2, r2
 8001490:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	001a      	movs	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_PCD_EP_Open+0x720>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0019      	movs	r1, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	18cb      	adds	r3, r1, r3
 80014b8:	4922      	ldr	r1, [pc, #136]	; (8001544 <HAL_PCD_EP_Open+0x724>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	b292      	uxth	r2, r2
 80014be:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	18d3      	adds	r3, r2, r3
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_PCD_EP_Open+0x734>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	b29c      	uxth	r4, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	001a      	movs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	18d3      	adds	r3, r2, r3
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_PCD_EP_Open+0x730>)
 80014e8:	4322      	orrs	r2, r4
 80014ea:	b292      	uxth	r2, r2
 80014ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	001a      	movs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	18d3      	adds	r3, r2, r3
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_PCD_EP_Open+0x72c>)
 8001502:	4013      	ands	r3, r2
 8001504:	b29c      	uxth	r4, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	001a      	movs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	18d3      	adds	r3, r2, r3
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_PCD_EP_Open+0x730>)
 8001516:	4322      	orrs	r2, r4
 8001518:	b292      	uxth	r2, r2
 800151a:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	23f4      	movs	r3, #244	; 0xf4
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2100      	movs	r1, #0
 8001524:	54d1      	strb	r1, [r2, r3]
  return ret;
 8001526:	2311      	movs	r3, #17
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b007      	add	sp, #28
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	00000e0f 	.word	0x00000e0f
 8001538:	ffff8180 	.word	0xffff8180
 800153c:	00000404 	.word	0x00000404
 8001540:	00000f0f 	.word	0x00000f0f
 8001544:	ffffc080 	.word	0xffffc080
 8001548:	ffff80c0 	.word	0xffff80c0
 800154c:	ffffbf8f 	.word	0xffffbf8f
 8001550:	ffff8080 	.word	0xffff8080
 8001554:	ffff8fbf 	.word	0xffff8fbf

08001558 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	000a      	movs	r2, r1
 8001562:	1cfb      	adds	r3, r7, #3
 8001564:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001566:	1cfb      	adds	r3, r7, #3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	da0c      	bge.n	800158a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001570:	1cfb      	adds	r3, r7, #3
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	227f      	movs	r2, #127	; 0x7f
 8001576:	401a      	ands	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	3328      	adds	r3, #40	; 0x28
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e00c      	b.n	80015a4 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800158a:	1cfb      	adds	r3, r7, #3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	227f      	movs	r2, #127	; 0x7f
 8001590:	401a      	ands	r2, r3
 8001592:	0013      	movs	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	3309      	adds	r3, #9
 800159c:	33ff      	adds	r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 80015a4:	1cfb      	adds	r3, r7, #3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	227f      	movs	r2, #127	; 0x7f
 80015aa:	4013      	ands	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	09db      	lsrs	r3, r3, #7
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	001a      	movs	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	23f4      	movs	r3, #244	; 0xf4
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_PCD_EP_Close+0x7c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e1ae      	b.n	8001932 <HAL_PCD_EP_Close+0x3da>
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	23f4      	movs	r3, #244	; 0xf4
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2101      	movs	r1, #1
 80015dc:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	7a9b      	ldrb	r3, [r3, #10]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d000      	beq.n	80015e8 <HAL_PCD_EP_Close+0x90>
 80015e6:	e07c      	b.n	80016e2 <HAL_PCD_EP_Close+0x18a>
  {
    if (ep->is_in)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03b      	beq.n	8001668 <HAL_PCD_EP_Close+0x110>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	001a      	movs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	18d3      	adds	r3, r2, r3
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	001a      	movs	r2, r3
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	4013      	ands	r3, r2
 8001608:	d016      	beq.n	8001638 <HAL_PCD_EP_Close+0xe0>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	001a      	movs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4ac7      	ldr	r2, [pc, #796]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 800161e:	4013      	ands	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0019      	movs	r1, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	18cb      	adds	r3, r1, r3
 8001630:	49c3      	ldr	r1, [pc, #780]	; (8001940 <HAL_PCD_EP_Close+0x3e8>)
 8001632:	430a      	orrs	r2, r1
 8001634:	b292      	uxth	r2, r2
 8001636:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4abe      	ldr	r2, [pc, #760]	; (8001944 <HAL_PCD_EP_Close+0x3ec>)
 800164c:	4013      	ands	r3, r2
 800164e:	b29c      	uxth	r4, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	18d3      	adds	r3, r2, r3
 800165e:	4aba      	ldr	r2, [pc, #744]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 8001660:	4322      	orrs	r2, r4
 8001662:	b292      	uxth	r2, r2
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	e15e      	b.n	8001926 <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	001a      	movs	r2, r3
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	01db      	lsls	r3, r3, #7
 8001680:	4013      	ands	r3, r2
 8001682:	d016      	beq.n	80016b2 <HAL_PCD_EP_Close+0x15a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	001a      	movs	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4aa9      	ldr	r2, [pc, #676]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 8001698:	4013      	ands	r3, r2
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0019      	movs	r1, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	18cb      	adds	r3, r1, r3
 80016aa:	49a8      	ldr	r1, [pc, #672]	; (800194c <HAL_PCD_EP_Close+0x3f4>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	b292      	uxth	r2, r2
 80016b0:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	001a      	movs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4aa2      	ldr	r2, [pc, #648]	; (8001950 <HAL_PCD_EP_Close+0x3f8>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	b29c      	uxth	r4, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	001a      	movs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	18d3      	adds	r3, r2, r3
 80016d8:	4a9b      	ldr	r2, [pc, #620]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 80016da:	4322      	orrs	r2, r4
 80016dc:	b292      	uxth	r2, r2
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	e121      	b.n	8001926 <HAL_PCD_EP_Close+0x3ce>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d000      	beq.n	80016ec <HAL_PCD_EP_Close+0x194>
 80016ea:	e08e      	b.n	800180a <HAL_PCD_EP_Close+0x2b2>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	18d3      	adds	r3, r2, r3
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	001a      	movs	r2, r3
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	01db      	lsls	r3, r3, #7
 8001704:	4013      	ands	r3, r2
 8001706:	d016      	beq.n	8001736 <HAL_PCD_EP_Close+0x1de>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	001a      	movs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	4a88      	ldr	r2, [pc, #544]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 800171c:	4013      	ands	r3, r2
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	18cb      	adds	r3, r1, r3
 800172e:	4987      	ldr	r1, [pc, #540]	; (800194c <HAL_PCD_EP_Close+0x3f4>)
 8001730:	430a      	orrs	r2, r1
 8001732:	b292      	uxth	r2, r2
 8001734:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	001a      	movs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	001a      	movs	r2, r3
 800174a:	2340      	movs	r3, #64	; 0x40
 800174c:	4013      	ands	r3, r2
 800174e:	d016      	beq.n	800177e <HAL_PCD_EP_Close+0x226>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	001a      	movs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4a76      	ldr	r2, [pc, #472]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 8001764:	4013      	ands	r3, r2
 8001766:	b29a      	uxth	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0019      	movs	r1, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	18cb      	adds	r3, r1, r3
 8001776:	4972      	ldr	r1, [pc, #456]	; (8001940 <HAL_PCD_EP_Close+0x3e8>)
 8001778:	430a      	orrs	r2, r1
 800177a:	b292      	uxth	r2, r2
 800177c:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	001a      	movs	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	18d3      	adds	r3, r2, r3
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 8001792:	4013      	ands	r3, r2
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	0019      	movs	r1, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	18cb      	adds	r3, r1, r3
 80017a4:	4966      	ldr	r1, [pc, #408]	; (8001940 <HAL_PCD_EP_Close+0x3e8>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b292      	uxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	001a      	movs	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4a64      	ldr	r2, [pc, #400]	; (8001950 <HAL_PCD_EP_Close+0x3f8>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	b29c      	uxth	r4, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	4a5d      	ldr	r2, [pc, #372]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 80017d4:	4322      	orrs	r2, r4
 80017d6:	b292      	uxth	r2, r2
 80017d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	001a      	movs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18d3      	adds	r3, r2, r3
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4a55      	ldr	r2, [pc, #340]	; (8001944 <HAL_PCD_EP_Close+0x3ec>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	b29c      	uxth	r4, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	001a      	movs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	18d3      	adds	r3, r2, r3
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 8001802:	4322      	orrs	r2, r4
 8001804:	b292      	uxth	r2, r2
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	e08d      	b.n	8001926 <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	001a      	movs	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	18d3      	adds	r3, r2, r3
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	001a      	movs	r2, r3
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	01db      	lsls	r3, r3, #7
 8001822:	4013      	ands	r3, r2
 8001824:	d016      	beq.n	8001854 <HAL_PCD_EP_Close+0x2fc>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	001a      	movs	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 800183a:	4013      	ands	r3, r2
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0019      	movs	r1, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	18cb      	adds	r3, r1, r3
 800184c:	493f      	ldr	r1, [pc, #252]	; (800194c <HAL_PCD_EP_Close+0x3f4>)
 800184e:	430a      	orrs	r2, r1
 8001850:	b292      	uxth	r2, r2
 8001852:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	001a      	movs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	001a      	movs	r2, r3
 8001868:	2340      	movs	r3, #64	; 0x40
 800186a:	4013      	ands	r3, r2
 800186c:	d016      	beq.n	800189c <HAL_PCD_EP_Close+0x344>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	001a      	movs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	18d3      	adds	r3, r2, r3
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 8001882:	4013      	ands	r3, r2
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0019      	movs	r1, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	18cb      	adds	r3, r1, r3
 8001894:	492a      	ldr	r1, [pc, #168]	; (8001940 <HAL_PCD_EP_Close+0x3e8>)
 8001896:	430a      	orrs	r2, r1
 8001898:	b292      	uxth	r2, r2
 800189a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	001a      	movs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_PCD_EP_Close+0x3e4>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0019      	movs	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	18cb      	adds	r3, r1, r3
 80018c2:	4922      	ldr	r1, [pc, #136]	; (800194c <HAL_PCD_EP_Close+0x3f4>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	b292      	uxth	r2, r2
 80018c8:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	001a      	movs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	18d3      	adds	r3, r2, r3
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_PCD_EP_Close+0x3ec>)
 80018de:	4013      	ands	r3, r2
 80018e0:	b29c      	uxth	r4, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	001a      	movs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	18d3      	adds	r3, r2, r3
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 80018f2:	4322      	orrs	r2, r4
 80018f4:	b292      	uxth	r2, r2
 80018f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_PCD_EP_Close+0x3f8>)
 800190c:	4013      	ands	r3, r2
 800190e:	b29c      	uxth	r4, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	001a      	movs	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_PCD_EP_Close+0x3f0>)
 8001920:	4322      	orrs	r2, r4
 8001922:	b292      	uxth	r2, r2
 8001924:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	23f4      	movs	r3, #244	; 0xf4
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2100      	movs	r1, #0
 800192e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b005      	add	sp, #20
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	00000f0f 	.word	0x00000f0f
 8001940:	ffff80c0 	.word	0xffff80c0
 8001944:	ffff8fbf 	.word	0xffff8fbf
 8001948:	ffff8080 	.word	0xffff8080
 800194c:	ffffc080 	.word	0xffffc080
 8001950:	ffffbf8f 	.word	0xffffbf8f

08001954 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	200b      	movs	r0, #11
 8001962:	183b      	adds	r3, r7, r0
 8001964:	1c0a      	adds	r2, r1, #0
 8001966:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001968:	0001      	movs	r1, r0
 800196a:	187b      	adds	r3, r7, r1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	227f      	movs	r2, #127	; 0x7f
 8001970:	401a      	ands	r2, r3
 8001972:	0013      	movs	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3309      	adds	r3, #9
 800197c:	33ff      	adds	r3, #255	; 0xff
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	18d3      	adds	r3, r2, r3
 8001982:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	227f      	movs	r2, #127	; 0x7f
 80019a2:	4013      	ands	r3, r2
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d909      	bls.n	80019ca <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	e005      	b.n	80019d6 <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	7a9b      	ldrb	r3, [r3, #10]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d145      	bne.n	8001a6a <HAL_PCD_EP_Receive+0x116>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2250      	movs	r2, #80	; 0x50
 80019e4:	5a9b      	ldrh	r3, [r3, r2]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	001a      	movs	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	001a      	movs	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <HAL_PCD_EP_Receive+0x2e8>)
 80019fc:	4694      	mov	ip, r2
 80019fe:	4463      	add	r3, ip
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b3e      	cmp	r3, #62	; 0x3e
 8001a06:	d919      	bls.n	8001a3c <HAL_PCD_EP_Receive+0xe8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	095a      	lsrs	r2, r3, #5
 8001a0c:	2326      	movs	r3, #38	; 0x26
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	221f      	movs	r2, #31
 8001a16:	4013      	ands	r3, r2
 8001a18:	d105      	bne.n	8001a26 <HAL_PCD_EP_Receive+0xd2>
 8001a1a:	2126      	movs	r1, #38	; 0x26
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	3a01      	subs	r2, #1
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	2326      	movs	r3, #38	; 0x26
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4a83      	ldr	r2, [pc, #524]	; (8001c40 <HAL_PCD_EP_Receive+0x2ec>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	e0da      	b.n	8001bf2 <HAL_PCD_EP_Receive+0x29e>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	085a      	lsrs	r2, r3, #1
 8001a40:	2326      	movs	r3, #38	; 0x26
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d005      	beq.n	8001a5a <HAL_PCD_EP_Receive+0x106>
 8001a4e:	2126      	movs	r1, #38	; 0x26
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	3201      	adds	r2, #1
 8001a58:	801a      	strh	r2, [r3, #0]
 8001a5a:	2326      	movs	r3, #38	; 0x26
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	801a      	strh	r2, [r3, #0]
 8001a68:	e0c3      	b.n	8001bf2 <HAL_PCD_EP_Receive+0x29e>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d145      	bne.n	8001afe <HAL_PCD_EP_Receive+0x1aa>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2250      	movs	r2, #80	; 0x50
 8001a78:	5a9b      	ldrh	r3, [r3, r2]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	001a      	movs	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	18d3      	adds	r3, r2, r3
 8001a8e:	4a6d      	ldr	r2, [pc, #436]	; (8001c44 <HAL_PCD_EP_Receive+0x2f0>)
 8001a90:	4694      	mov	ip, r2
 8001a92:	4463      	add	r3, ip
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b3e      	cmp	r3, #62	; 0x3e
 8001a9a:	d919      	bls.n	8001ad0 <HAL_PCD_EP_Receive+0x17c>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	095a      	lsrs	r2, r3, #5
 8001aa0:	2324      	movs	r3, #36	; 0x24
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	221f      	movs	r2, #31
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d105      	bne.n	8001aba <HAL_PCD_EP_Receive+0x166>
 8001aae:	2124      	movs	r1, #36	; 0x24
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	2324      	movs	r3, #36	; 0x24
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4a5e      	ldr	r2, [pc, #376]	; (8001c40 <HAL_PCD_EP_Receive+0x2ec>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	e02e      	b.n	8001b2e <HAL_PCD_EP_Receive+0x1da>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	085a      	lsrs	r2, r3, #1
 8001ad4:	2324      	movs	r3, #36	; 0x24
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	801a      	strh	r2, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d005      	beq.n	8001aee <HAL_PCD_EP_Receive+0x19a>
 8001ae2:	2124      	movs	r1, #36	; 0x24
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	3201      	adds	r2, #1
 8001aec:	801a      	strh	r2, [r3, #0]
 8001aee:	2324      	movs	r3, #36	; 0x24
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	801a      	strh	r2, [r3, #0]
 8001afc:	e017      	b.n	8001b2e <HAL_PCD_EP_Receive+0x1da>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d113      	bne.n	8001b2e <HAL_PCD_EP_Receive+0x1da>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2250      	movs	r2, #80	; 0x50
 8001b0c:	5a9b      	ldrh	r3, [r3, r2]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	001a      	movs	r2, r3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_PCD_EP_Receive+0x2f0>)
 8001b24:	4694      	mov	ip, r2
 8001b26:	4463      	add	r3, ip
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d145      	bne.n	8001bc2 <HAL_PCD_EP_Receive+0x26e>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2250      	movs	r2, #80	; 0x50
 8001b3c:	5a9b      	ldrh	r3, [r3, r2]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	001a      	movs	r2, r3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_PCD_EP_Receive+0x2e8>)
 8001b54:	4694      	mov	ip, r2
 8001b56:	4463      	add	r3, ip
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b3e      	cmp	r3, #62	; 0x3e
 8001b5e:	d919      	bls.n	8001b94 <HAL_PCD_EP_Receive+0x240>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	095a      	lsrs	r2, r3, #5
 8001b64:	2322      	movs	r3, #34	; 0x22
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	221f      	movs	r2, #31
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d105      	bne.n	8001b7e <HAL_PCD_EP_Receive+0x22a>
 8001b72:	2122      	movs	r1, #34	; 0x22
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	2322      	movs	r3, #34	; 0x22
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4a2d      	ldr	r2, [pc, #180]	; (8001c40 <HAL_PCD_EP_Receive+0x2ec>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e02e      	b.n	8001bf2 <HAL_PCD_EP_Receive+0x29e>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	085a      	lsrs	r2, r3, #1
 8001b98:	2322      	movs	r3, #34	; 0x22
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d005      	beq.n	8001bb2 <HAL_PCD_EP_Receive+0x25e>
 8001ba6:	2122      	movs	r1, #34	; 0x22
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	3201      	adds	r2, #1
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	2322      	movs	r3, #34	; 0x22
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	e017      	b.n	8001bf2 <HAL_PCD_EP_Receive+0x29e>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	785b      	ldrb	r3, [r3, #1]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d113      	bne.n	8001bf2 <HAL_PCD_EP_Receive+0x29e>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2250      	movs	r2, #80	; 0x50
 8001bd0:	5a9b      	ldrh	r3, [r3, r2]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	001a      	movs	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_PCD_EP_Receive+0x2e8>)
 8001be8:	4694      	mov	ip, r2
 8001bea:	4463      	add	r3, ip
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_PCD_EP_Receive+0x2f4>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	b29c      	uxth	r4, r3
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	4063      	eors	r3, r4
 8001c10:	b29c      	uxth	r4, r3
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4063      	eors	r3, r4
 8001c18:	b29c      	uxth	r4, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	001a      	movs	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	18d3      	adds	r3, r2, r3
 8001c28:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_PCD_EP_Receive+0x2f8>)
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b00b      	add	sp, #44	; 0x2c
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	00000406 	.word	0x00000406
 8001c40:	ffff8000 	.word	0xffff8000
 8001c44:	00000402 	.word	0x00000402
 8001c48:	ffffbf8f 	.word	0xffffbf8f
 8001c4c:	ffff8080 	.word	0xffff8080

08001c50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	200b      	movs	r0, #11
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	1c0a      	adds	r2, r1, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8001c64:	2326      	movs	r3, #38	; 0x26
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c6c:	0001      	movs	r1, r0
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	227f      	movs	r2, #127	; 0x7f
 8001c74:	401a      	ands	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3328      	adds	r3, #40	; 0x28
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	18d3      	adds	r3, r2, r3
 8001c84:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	227f      	movs	r2, #127	; 0x7f
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d909      	bls.n	8001ccc <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1ad2      	subs	r2, r2, r3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	e005      	b.n	8001cd8 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	7a9b      	ldrb	r3, [r3, #10]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d11e      	bne.n	8001d1e <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	6919      	ldr	r1, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	889a      	ldrh	r2, [r3, #4]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f000 fb02 	bl	80022f8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2250      	movs	r2, #80	; 0x50
 8001cfa:	5a9b      	ldrh	r3, [r3, r2]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	001a      	movs	r2, r3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	18d3      	adds	r3, r2, r3
 8001d08:	001a      	movs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	18d3      	adds	r3, r2, r3
 8001d10:	4aa4      	ldr	r2, [pc, #656]	; (8001fa4 <HAL_PCD_EP_Transmit+0x354>)
 8001d12:	4694      	mov	ip, r2
 8001d14:	4463      	add	r3, ip
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e11f      	b.n	8001f5e <HAL_PCD_EP_Transmit+0x30e>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	001a      	movs	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	18d3      	adds	r3, r2, r3
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	001a      	movs	r2, r3
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d167      	bne.n	8001e0a <HAL_PCD_EP_Transmit+0x1ba>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d145      	bne.n	8001dce <HAL_PCD_EP_Transmit+0x17e>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2250      	movs	r2, #80	; 0x50
 8001d48:	5a9b      	ldrh	r3, [r3, r2]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	18d3      	adds	r3, r2, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_PCD_EP_Transmit+0x358>)
 8001d60:	4694      	mov	ip, r2
 8001d62:	4463      	add	r3, ip
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b3e      	cmp	r3, #62	; 0x3e
 8001d6a:	d919      	bls.n	8001da0 <HAL_PCD_EP_Transmit+0x150>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	095a      	lsrs	r2, r3, #5
 8001d70:	2324      	movs	r3, #36	; 0x24
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	221f      	movs	r2, #31
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d105      	bne.n	8001d8a <HAL_PCD_EP_Transmit+0x13a>
 8001d7e:	2124      	movs	r1, #36	; 0x24
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	3a01      	subs	r2, #1
 8001d88:	801a      	strh	r2, [r3, #0]
 8001d8a:	2324      	movs	r3, #36	; 0x24
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4a85      	ldr	r2, [pc, #532]	; (8001fac <HAL_PCD_EP_Transmit+0x35c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e02e      	b.n	8001dfe <HAL_PCD_EP_Transmit+0x1ae>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	085a      	lsrs	r2, r3, #1
 8001da4:	2324      	movs	r3, #36	; 0x24
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4013      	ands	r3, r2
 8001db0:	d005      	beq.n	8001dbe <HAL_PCD_EP_Transmit+0x16e>
 8001db2:	2124      	movs	r1, #36	; 0x24
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	3201      	adds	r2, #1
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	2324      	movs	r3, #36	; 0x24
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	029b      	lsls	r3, r3, #10
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	801a      	strh	r2, [r3, #0]
 8001dcc:	e017      	b.n	8001dfe <HAL_PCD_EP_Transmit+0x1ae>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d113      	bne.n	8001dfe <HAL_PCD_EP_Transmit+0x1ae>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2250      	movs	r2, #80	; 0x50
 8001ddc:	5a9b      	ldrh	r3, [r3, r2]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	001a      	movs	r2, r3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	001a      	movs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	18d3      	adds	r3, r2, r3
 8001df2:	4a6d      	ldr	r2, [pc, #436]	; (8001fa8 <HAL_PCD_EP_Transmit+0x358>)
 8001df4:	4694      	mov	ip, r2
 8001df6:	4463      	add	r3, ip
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8001dfe:	2326      	movs	r3, #38	; 0x26
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	8912      	ldrh	r2, [r2, #8]
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	e066      	b.n	8001ed8 <HAL_PCD_EP_Transmit+0x288>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d145      	bne.n	8001e9e <HAL_PCD_EP_Transmit+0x24e>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2250      	movs	r2, #80	; 0x50
 8001e18:	5a9b      	ldrh	r3, [r3, r2]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	18d3      	adds	r3, r2, r3
 8001e26:	001a      	movs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_PCD_EP_Transmit+0x354>)
 8001e30:	4694      	mov	ip, r2
 8001e32:	4463      	add	r3, ip
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b3e      	cmp	r3, #62	; 0x3e
 8001e3a:	d919      	bls.n	8001e70 <HAL_PCD_EP_Transmit+0x220>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	095a      	lsrs	r2, r3, #5
 8001e40:	2322      	movs	r3, #34	; 0x22
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	221f      	movs	r2, #31
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d105      	bne.n	8001e5a <HAL_PCD_EP_Transmit+0x20a>
 8001e4e:	2122      	movs	r1, #34	; 0x22
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	3a01      	subs	r2, #1
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	2322      	movs	r3, #34	; 0x22
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_PCD_EP_Transmit+0x35c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	e02e      	b.n	8001ece <HAL_PCD_EP_Transmit+0x27e>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	085a      	lsrs	r2, r3, #1
 8001e74:	2322      	movs	r3, #34	; 0x22
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d005      	beq.n	8001e8e <HAL_PCD_EP_Transmit+0x23e>
 8001e82:	2122      	movs	r1, #34	; 0x22
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	881a      	ldrh	r2, [r3, #0]
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	2322      	movs	r3, #34	; 0x22
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	e017      	b.n	8001ece <HAL_PCD_EP_Transmit+0x27e>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d113      	bne.n	8001ece <HAL_PCD_EP_Transmit+0x27e>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2250      	movs	r2, #80	; 0x50
 8001eac:	5a9b      	ldrh	r3, [r3, r2]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	001a      	movs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	18d3      	adds	r3, r2, r3
 8001ec2:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_PCD_EP_Transmit+0x354>)
 8001ec4:	4694      	mov	ip, r2
 8001ec6:	4463      	add	r3, ip
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8001ece:	2326      	movs	r3, #38	; 0x26
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	88d2      	ldrh	r2, [r2, #6]
 8001ed6:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	6919      	ldr	r1, [r3, #16]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b29c      	uxth	r4, r3
 8001ee4:	2326      	movs	r3, #38	; 0x26
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	0023      	movs	r3, r4
 8001eec:	f000 fa04 	bl	80022f8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	785b      	ldrb	r3, [r3, #1]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d117      	bne.n	8001f28 <HAL_PCD_EP_Transmit+0x2d8>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	18d3      	adds	r3, r2, r3
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_PCD_EP_Transmit+0x360>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0019      	movs	r1, r3
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	18cb      	adds	r3, r1, r3
 8001f1e:	4925      	ldr	r1, [pc, #148]	; (8001fb4 <HAL_PCD_EP_Transmit+0x364>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	b292      	uxth	r2, r2
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	e01a      	b.n	8001f5e <HAL_PCD_EP_Transmit+0x30e>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d116      	bne.n	8001f5e <HAL_PCD_EP_Transmit+0x30e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	001a      	movs	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_PCD_EP_Transmit+0x360>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18cb      	adds	r3, r1, r3
 8001f56:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_PCD_EP_Transmit+0x368>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	001a      	movs	r2, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	18d3      	adds	r3, r2, r3
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_PCD_EP_Transmit+0x36c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	b29c      	uxth	r4, r3
 8001f76:	2310      	movs	r3, #16
 8001f78:	4063      	eors	r3, r4
 8001f7a:	b29c      	uxth	r4, r3
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	4063      	eors	r3, r4
 8001f80:	b29c      	uxth	r4, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	001a      	movs	r2, r3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18d3      	adds	r3, r2, r3
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_PCD_EP_Transmit+0x370>)
 8001f92:	4322      	orrs	r2, r4
 8001f94:	b292      	uxth	r2, r2
 8001f96:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b00b      	add	sp, #44	; 0x2c
 8001fa0:	bd90      	pop	{r4, r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	00000402 	.word	0x00000402
 8001fa8:	00000406 	.word	0x00000406
 8001fac:	ffff8000 	.word	0xffff8000
 8001fb0:	00000f0f 	.word	0x00000f0f
 8001fb4:	ffff80c0 	.word	0xffff80c0
 8001fb8:	ffffc080 	.word	0xffffc080
 8001fbc:	ffff8fbf 	.word	0xffff8fbf
 8001fc0:	ffff8080 	.word	0xffff8080

08001fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	000a      	movs	r2, r1
 8001fce:	1cfb      	adds	r3, r7, #3
 8001fd0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	23f4      	movs	r3, #244	; 0xf4
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_PCD_EP_SetStall+0x1e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e099      	b.n	8002116 <HAL_PCD_EP_SetStall+0x152>
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	23f4      	movs	r3, #244	; 0xf4
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8001fec:	1cfb      	adds	r3, r7, #3
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0c      	bge.n	8002010 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001ff6:	1cfb      	adds	r3, r7, #3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	227f      	movs	r2, #127	; 0x7f
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	0013      	movs	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3328      	adds	r3, #40	; 0x28
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	18d3      	adds	r3, r2, r3
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e00a      	b.n	8002026 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002010:	1cfb      	adds	r3, r7, #3
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	0013      	movs	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	3309      	adds	r3, #9
 800201e:	33ff      	adds	r3, #255	; 0xff
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	18d3      	adds	r3, r2, r3
 8002024:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800202c:	1cfb      	adds	r3, r7, #3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	227f      	movs	r2, #127	; 0x7f
 8002032:	4013      	ands	r3, r2
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800203a:	1cfb      	adds	r3, r7, #3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b25b      	sxtb	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	09db      	lsrs	r3, r3, #7
 8002044:	b2db      	uxtb	r3, r3
 8002046:	001a      	movs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d120      	bne.n	8002096 <HAL_PCD_EP_SetStall+0xd2>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	001a      	movs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	001a      	movs	r2, r3
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_PCD_EP_SetStall+0x15c>)
 800206a:	401a      	ands	r2, r3
 800206c:	0014      	movs	r4, r2
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	4063      	eors	r3, r4
 8002074:	001c      	movs	r4, r3
 8002076:	2310      	movs	r3, #16
 8002078:	4063      	eors	r3, r4
 800207a:	001c      	movs	r4, r3
 800207c:	b2a2      	uxth	r2, r4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0019      	movs	r1, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18cb      	adds	r3, r1, r3
 800208c:	4925      	ldr	r1, [pc, #148]	; (8002124 <HAL_PCD_EP_SetStall+0x160>)
 800208e:	430a      	orrs	r2, r1
 8002090:	b292      	uxth	r2, r2
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	e039      	b.n	800210a <HAL_PCD_EP_SetStall+0x146>
  }
  else
  {
    if (ep->is_in)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01a      	beq.n	80020d4 <HAL_PCD_EP_SetStall+0x110>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	001a      	movs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_PCD_EP_SetStall+0x164>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	b29c      	uxth	r4, r3
 80020b6:	2310      	movs	r3, #16
 80020b8:	4063      	eors	r3, r4
 80020ba:	b29c      	uxth	r4, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	001a      	movs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_PCD_EP_SetStall+0x160>)
 80020cc:	4322      	orrs	r2, r4
 80020ce:	b292      	uxth	r2, r2
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	e01a      	b.n	800210a <HAL_PCD_EP_SetStall+0x146>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	001a      	movs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_PCD_EP_SetStall+0x168>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	b29c      	uxth	r4, r3
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	015b      	lsls	r3, r3, #5
 80020f0:	4063      	eors	r3, r4
 80020f2:	b29c      	uxth	r4, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	001a      	movs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	18d3      	adds	r3, r2, r3
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_PCD_EP_SetStall+0x160>)
 8002104:	4322      	orrs	r2, r4
 8002106:	b292      	uxth	r2, r2
 8002108:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	23f4      	movs	r3, #244	; 0xf4
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2100      	movs	r1, #0
 8002112:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b005      	add	sp, #20
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	0000bfbf 	.word	0x0000bfbf
 8002124:	ffff8080 	.word	0xffff8080
 8002128:	ffff8fbf 	.word	0xffff8fbf
 800212c:	ffffbf8f 	.word	0xffffbf8f

08002130 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	000a      	movs	r2, r1
 800213a:	1cfb      	adds	r3, r7, #3
 800213c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 800213e:	1cfb      	adds	r3, r7, #3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	da0c      	bge.n	8002162 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002148:	1cfb      	adds	r3, r7, #3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	227f      	movs	r2, #127	; 0x7f
 800214e:	401a      	ands	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3328      	adds	r3, #40	; 0x28
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	18d3      	adds	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e00a      	b.n	8002178 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002162:	1cfb      	adds	r3, r7, #3
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	0013      	movs	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3309      	adds	r3, #9
 8002170:	33ff      	adds	r3, #255	; 0xff
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	227f      	movs	r2, #127	; 0x7f
 8002184:	4013      	ands	r3, r2
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800218c:	1cfb      	adds	r3, r7, #3
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b25b      	sxtb	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	09db      	lsrs	r3, r3, #7
 8002196:	b2db      	uxtb	r3, r3
 8002198:	001a      	movs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	23f4      	movs	r3, #244	; 0xf4
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_PCD_EP_ClrStall+0x7e>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e094      	b.n	80022d8 <HAL_PCD_EP_ClrStall+0x1a8>
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	23f4      	movs	r3, #244	; 0xf4
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2101      	movs	r1, #1
 80021b6:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d041      	beq.n	8002244 <HAL_PCD_EP_ClrStall+0x114>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	001a      	movs	r2, r3
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	4013      	ands	r3, r2
 80021d8:	d016      	beq.n	8002208 <HAL_PCD_EP_ClrStall+0xd8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	001a      	movs	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	18d3      	adds	r3, r2, r3
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4a3c      	ldr	r2, [pc, #240]	; (80022e0 <HAL_PCD_EP_ClrStall+0x1b0>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0019      	movs	r1, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	18cb      	adds	r3, r1, r3
 8002200:	4938      	ldr	r1, [pc, #224]	; (80022e4 <HAL_PCD_EP_ClrStall+0x1b4>)
 8002202:	430a      	orrs	r2, r1
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	001a      	movs	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	18d3      	adds	r3, r2, r3
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <HAL_PCD_EP_ClrStall+0x1b8>)
 800221c:	4013      	ands	r3, r2
 800221e:	b29c      	uxth	r4, r3
 8002220:	2310      	movs	r3, #16
 8002222:	4063      	eors	r3, r4
 8002224:	b29c      	uxth	r4, r3
 8002226:	2320      	movs	r3, #32
 8002228:	4063      	eors	r3, r4
 800222a:	b29c      	uxth	r4, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	4a2c      	ldr	r2, [pc, #176]	; (80022ec <HAL_PCD_EP_ClrStall+0x1bc>)
 800223c:	4322      	orrs	r2, r4
 800223e:	b292      	uxth	r2, r2
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e043      	b.n	80022cc <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	001a      	movs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	18d3      	adds	r3, r2, r3
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	001a      	movs	r2, r3
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	01db      	lsls	r3, r3, #7
 800225c:	4013      	ands	r3, r2
 800225e:	d016      	beq.n	800228e <HAL_PCD_EP_ClrStall+0x15e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002274:	4013      	ands	r3, r2
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0019      	movs	r1, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	18cb      	adds	r3, r1, r3
 8002286:	491a      	ldr	r1, [pc, #104]	; (80022f0 <HAL_PCD_EP_ClrStall+0x1c0>)
 8002288:	430a      	orrs	r2, r1
 800228a:	b292      	uxth	r2, r2
 800228c:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <HAL_PCD_EP_ClrStall+0x1c4>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	b29c      	uxth	r4, r3
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	015b      	lsls	r3, r3, #5
 80022aa:	4063      	eors	r3, r4
 80022ac:	b29c      	uxth	r4, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	4063      	eors	r3, r4
 80022b4:	b29c      	uxth	r4, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	18d3      	adds	r3, r2, r3
 80022c4:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_PCD_EP_ClrStall+0x1bc>)
 80022c6:	4322      	orrs	r2, r4
 80022c8:	b292      	uxth	r2, r2
 80022ca:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	23f4      	movs	r3, #244	; 0xf4
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2100      	movs	r1, #0
 80022d4:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b005      	add	sp, #20
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	00000f0f 	.word	0x00000f0f
 80022e4:	ffff80c0 	.word	0xffff80c0
 80022e8:	ffff8fbf 	.word	0xffff8fbf
 80022ec:	ffff8080 	.word	0xffff8080
 80022f0:	ffffc080 	.word	0xffffc080
 80022f4:	ffffbf8f 	.word	0xffffbf8f

080022f8 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	0019      	movs	r1, r3
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	1c0a      	adds	r2, r1, #0
 800230c:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	00d2      	lsls	r2, r2, #3
 8002324:	4694      	mov	ip, r2
 8002326:	4463      	add	r3, ip
 8002328:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e01e      	b.n	800236e <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	2012      	movs	r0, #18
 8002336:	183b      	adds	r3, r7, r0
 8002338:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b299      	uxth	r1, r3
 800234a:	2410      	movs	r4, #16
 800234c:	193b      	adds	r3, r7, r4
 800234e:	183a      	adds	r2, r7, r0
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	61ba      	str	r2, [r7, #24]
 800235c:	193a      	adds	r2, r7, r4
 800235e:	8812      	ldrh	r2, [r2, #0]
 8002360:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3301      	adds	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3b01      	subs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1dd      	bne.n	8002330 <PCD_WritePMA+0x38>
  }
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b009      	add	sp, #36	; 0x24
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	0019      	movs	r1, r3
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	1c0a      	adds	r2, r1, #0
 8002390:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800239c:	1dbb      	adds	r3, r7, #6
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	00d2      	lsls	r2, r2, #3
 80023a8:	4694      	mov	ip, r2
 80023aa:	4463      	add	r3, ip
 80023ac:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e014      	b.n	80023de <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1c9a      	adds	r2, r3, #2
 80023b8:	61ba      	str	r2, [r7, #24]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	0a19      	lsrs	r1, r3, #8
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	3b01      	subs	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e7      	bne.n	80023b4 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	61ba      	str	r2, [r7, #24]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]
  }
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b008      	add	sp, #32
 800240e:	bd80      	pop	{r7, pc}

08002410 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 8002418:	231e      	movs	r3, #30
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8002420:	230c      	movs	r3, #12
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002428:	e34a      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800242a:	230e      	movs	r3, #14
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	201d      	movs	r0, #29
 8002436:	183b      	adds	r3, r7, r0
 8002438:	210f      	movs	r1, #15
 800243a:	400a      	ands	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 800243e:	183b      	adds	r3, r7, r0
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d000      	beq.n	8002448 <PCD_EP_ISR_Handler+0x38>
 8002446:	e137      	b.n	80026b8 <PCD_EP_ISR_Handler+0x2a8>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002448:	230e      	movs	r3, #14
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	001a      	movs	r2, r3
 8002452:	2310      	movs	r3, #16
 8002454:	4013      	ands	r3, r2
 8002456:	d14c      	bne.n	80024f2 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	49c4      	ldr	r1, [pc, #784]	; (8002778 <PCD_EP_ISR_Handler+0x368>)
 8002466:	400a      	ands	r2, r1
 8002468:	b292      	uxth	r2, r2
 800246a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3328      	adds	r3, #40	; 0x28
 8002470:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2250      	movs	r2, #80	; 0x50
 8002478:	5a9b      	ldrh	r3, [r3, r2]
 800247a:	b29b      	uxth	r3, r3
 800247c:	001a      	movs	r2, r3
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	001a      	movs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	4abb      	ldr	r2, [pc, #748]	; (800277c <PCD_EP_ISR_Handler+0x36c>)
 8002490:	4694      	mov	ip, r2
 8002492:	4463      	add	r3, ip
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	059b      	lsls	r3, r3, #22
 8002498:	0d9a      	lsrs	r2, r3, #22
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	18d2      	adds	r2, r2, r3
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2100      	movs	r1, #0
 80024b0:	0018      	movs	r0, r3
 80024b2:	f003 f9b9 	bl	8005828 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2224      	movs	r2, #36	; 0x24
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d100      	bne.n	80024c4 <PCD_EP_ISR_Handler+0xb4>
 80024c2:	e2fd      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d000      	beq.n	80024ce <PCD_EP_ISR_Handler+0xbe>
 80024cc:	e2f8      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2224      	movs	r2, #36	; 0x24
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	4252      	negs	r2, r2
 80024da:	4313      	orrs	r3, r2
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b291      	uxth	r1, r2
 80024e4:	224c      	movs	r2, #76	; 0x4c
 80024e6:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]
 80024f0:	e2e6      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3309      	adds	r3, #9
 80024f6:	33ff      	adds	r3, #255	; 0xff
 80024f8:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	b29a      	uxth	r2, r3
 8002502:	210c      	movs	r1, #12
 8002504:	187b      	adds	r3, r7, r1
 8002506:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002508:	187b      	adds	r3, r7, r1
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	001a      	movs	r2, r3
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4013      	ands	r3, r2
 8002516:	d031      	beq.n	800257c <PCD_EP_ISR_Handler+0x16c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2250      	movs	r2, #80	; 0x50
 800251e:	5a9b      	ldrh	r3, [r3, r2]
 8002520:	b29b      	uxth	r3, r3
 8002522:	001a      	movs	r2, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	18d3      	adds	r3, r2, r3
 800252c:	001a      	movs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	18d3      	adds	r3, r2, r3
 8002534:	4a92      	ldr	r2, [pc, #584]	; (8002780 <PCD_EP_ISR_Handler+0x370>)
 8002536:	4694      	mov	ip, r2
 8002538:	4463      	add	r3, ip
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	059b      	lsls	r3, r3, #22
 800253e:	0d9a      	lsrs	r2, r3, #22
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	33ed      	adds	r3, #237	; 0xed
 800254c:	33ff      	adds	r3, #255	; 0xff
 800254e:	0019      	movs	r1, r3
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	889a      	ldrh	r2, [r3, #4]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f7ff ff0f 	bl	800237c <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4986      	ldr	r1, [pc, #536]	; (8002784 <PCD_EP_ISR_Handler+0x374>)
 800256c:	400a      	ands	r2, r1
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f003 f923 	bl	80057c0 <HAL_PCD_SetupStageCallback>
 800257a:	e2a1      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800257c:	230c      	movs	r3, #12
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	b21b      	sxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	db00      	blt.n	800258c <PCD_EP_ISR_Handler+0x17c>
 800258a:	e299      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	497a      	ldr	r1, [pc, #488]	; (8002784 <PCD_EP_ISR_Handler+0x374>)
 800259a:	400a      	ands	r2, r1
 800259c:	b292      	uxth	r2, r2
 800259e:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2250      	movs	r2, #80	; 0x50
 80025a6:	5a9b      	ldrh	r3, [r3, r2]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	001a      	movs	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	001a      	movs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	4a70      	ldr	r2, [pc, #448]	; (8002780 <PCD_EP_ISR_Handler+0x370>)
 80025be:	4694      	mov	ip, r2
 80025c0:	4463      	add	r3, ip
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	059b      	lsls	r3, r3, #22
 80025c6:	0d9a      	lsrs	r2, r3, #22
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d011      	beq.n	80025f8 <PCD_EP_ISR_Handler+0x1e8>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	889a      	ldrh	r2, [r3, #4]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f7ff fec9 	bl	800237c <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	18d2      	adds	r2, r2, r3
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2100      	movs	r1, #0
 80025fc:	0018      	movs	r0, r3
 80025fe:	f003 f8f2 	bl	80057e6 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2250      	movs	r2, #80	; 0x50
 8002608:	5a9b      	ldrh	r3, [r3, r2]
 800260a:	b29b      	uxth	r3, r3
 800260c:	001a      	movs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	4a5a      	ldr	r2, [pc, #360]	; (8002780 <PCD_EP_ISR_Handler+0x370>)
 8002616:	4694      	mov	ip, r2
 8002618:	4463      	add	r3, ip
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b3e      	cmp	r3, #62	; 0x3e
 8002622:	d91b      	bls.n	800265c <PCD_EP_ISR_Handler+0x24c>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	095a      	lsrs	r2, r3, #5
 800262a:	2316      	movs	r3, #22
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	221f      	movs	r2, #31
 8002636:	4013      	ands	r3, r2
 8002638:	d105      	bne.n	8002646 <PCD_EP_ISR_Handler+0x236>
 800263a:	2116      	movs	r1, #22
 800263c:	187b      	adds	r3, r7, r1
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	187b      	adds	r3, r7, r1
 8002642:	3a01      	subs	r2, #1
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	2316      	movs	r3, #22
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	029b      	lsls	r3, r3, #10
 800264e:	b29b      	uxth	r3, r3
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <PCD_EP_ISR_Handler+0x378>)
 8002652:	4313      	orrs	r3, r2
 8002654:	b29a      	uxth	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	801a      	strh	r2, [r3, #0]
 800265a:	e017      	b.n	800268c <PCD_EP_ISR_Handler+0x27c>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	085a      	lsrs	r2, r3, #1
 8002662:	2316      	movs	r3, #22
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	801a      	strh	r2, [r3, #0]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d005      	beq.n	800267e <PCD_EP_ISR_Handler+0x26e>
 8002672:	2116      	movs	r1, #22
 8002674:	187b      	adds	r3, r7, r1
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	187b      	adds	r3, r7, r1
 800267a:	3201      	adds	r2, #1
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	2316      	movs	r3, #22
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	b29a      	uxth	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	4a3d      	ldr	r2, [pc, #244]	; (800278c <PCD_EP_ISR_Handler+0x37c>)
 8002696:	4013      	ands	r3, r2
 8002698:	b29c      	uxth	r4, r3
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	015b      	lsls	r3, r3, #5
 800269e:	4063      	eors	r3, r4
 80026a0:	b29c      	uxth	r4, r3
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	4063      	eors	r3, r4
 80026a8:	b29c      	uxth	r4, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a38      	ldr	r2, [pc, #224]	; (8002790 <PCD_EP_ISR_Handler+0x380>)
 80026b0:	4322      	orrs	r2, r4
 80026b2:	b292      	uxth	r2, r2
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	e203      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	001a      	movs	r2, r3
 80026be:	231d      	movs	r3, #29
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	210c      	movs	r1, #12
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21b      	sxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db00      	blt.n	80026e0 <PCD_EP_ISR_Handler+0x2d0>
 80026de:	e0f9      	b.n	80028d4 <PCD_EP_ISR_Handler+0x4c4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	001a      	movs	r2, r3
 80026e6:	201d      	movs	r0, #29
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0019      	movs	r1, r3
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	18cb      	adds	r3, r1, r3
 8002702:	4920      	ldr	r1, [pc, #128]	; (8002784 <PCD_EP_ISR_Handler+0x374>)
 8002704:	400a      	ands	r2, r1
 8002706:	b292      	uxth	r2, r2
 8002708:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 800270a:	183b      	adds	r3, r7, r0
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	0013      	movs	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3309      	adds	r3, #9
 8002718:	33ff      	adds	r3, #255	; 0xff
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	18d3      	adds	r3, r2, r3
 800271e:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	7a9b      	ldrb	r3, [r3, #10]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d135      	bne.n	8002794 <PCD_EP_ISR_Handler+0x384>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2250      	movs	r2, #80	; 0x50
 800272e:	5a9b      	ldrh	r3, [r3, r2]
 8002730:	b29b      	uxth	r3, r3
 8002732:	001a      	movs	r2, r3
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	001a      	movs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	18d3      	adds	r3, r2, r3
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <PCD_EP_ISR_Handler+0x370>)
 8002746:	4694      	mov	ip, r2
 8002748:	4463      	add	r3, ip
 800274a:	881a      	ldrh	r2, [r3, #0]
 800274c:	211e      	movs	r1, #30
 800274e:	187b      	adds	r3, r7, r1
 8002750:	0592      	lsls	r2, r2, #22
 8002752:	0d92      	lsrs	r2, r2, #22
 8002754:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8002756:	187b      	adds	r3, r7, r1
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d100      	bne.n	8002760 <PCD_EP_ISR_Handler+0x350>
 800275e:	e08e      	b.n	800287e <PCD_EP_ISR_Handler+0x46e>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6919      	ldr	r1, [r3, #16]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	889a      	ldrh	r2, [r3, #4]
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f7ff fe03 	bl	800237c <PCD_ReadPMA>
 8002776:	e082      	b.n	800287e <PCD_EP_ISR_Handler+0x46e>
 8002778:	ffff8f0f 	.word	0xffff8f0f
 800277c:	00000402 	.word	0x00000402
 8002780:	00000406 	.word	0x00000406
 8002784:	00000f8f 	.word	0x00000f8f
 8002788:	ffff8000 	.word	0xffff8000
 800278c:	ffffbf8f 	.word	0xffffbf8f
 8002790:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	001a      	movs	r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	18d3      	adds	r3, r2, r3
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	01db      	lsls	r3, r3, #7
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	01db      	lsls	r3, r3, #7
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d126      	bne.n	8002804 <PCD_EP_ISR_Handler+0x3f4>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2250      	movs	r2, #80	; 0x50
 80027bc:	5a9b      	ldrh	r3, [r3, r2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	001a      	movs	r2, r3
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	18d3      	adds	r3, r2, r3
 80027ca:	001a      	movs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	18d3      	adds	r3, r2, r3
 80027d2:	4ac4      	ldr	r2, [pc, #784]	; (8002ae4 <PCD_EP_ISR_Handler+0x6d4>)
 80027d4:	4694      	mov	ip, r2
 80027d6:	4463      	add	r3, ip
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	211e      	movs	r1, #30
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	0592      	lsls	r2, r2, #22
 80027e0:	0d92      	lsrs	r2, r2, #22
 80027e2:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d031      	beq.n	8002850 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6919      	ldr	r1, [r3, #16]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	88da      	ldrh	r2, [r3, #6]
 80027f8:	231e      	movs	r3, #30
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	f7ff fdbd 	bl	800237c <PCD_ReadPMA>
 8002802:	e025      	b.n	8002850 <PCD_EP_ISR_Handler+0x440>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2250      	movs	r2, #80	; 0x50
 800280a:	5a9b      	ldrh	r3, [r3, r2]
 800280c:	b29b      	uxth	r3, r3
 800280e:	001a      	movs	r2, r3
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	18d3      	adds	r3, r2, r3
 8002818:	001a      	movs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	4ab1      	ldr	r2, [pc, #708]	; (8002ae8 <PCD_EP_ISR_Handler+0x6d8>)
 8002822:	4694      	mov	ip, r2
 8002824:	4463      	add	r3, ip
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	211e      	movs	r1, #30
 800282a:	187b      	adds	r3, r7, r1
 800282c:	0592      	lsls	r2, r2, #22
 800282e:	0d92      	lsrs	r2, r2, #22
 8002830:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002832:	187b      	adds	r3, r7, r1
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	891a      	ldrh	r2, [r3, #8]
 8002846:	231e      	movs	r3, #30
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f7ff fd96 	bl	800237c <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	001a      	movs	r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4aa2      	ldr	r2, [pc, #648]	; (8002aec <PCD_EP_ISR_Handler+0x6dc>)
 8002864:	4013      	ands	r3, r2
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0019      	movs	r1, r3
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	18cb      	adds	r3, r1, r3
 8002876:	499e      	ldr	r1, [pc, #632]	; (8002af0 <PCD_EP_ISR_Handler+0x6e0>)
 8002878:	430a      	orrs	r2, r1
 800287a:	b292      	uxth	r2, r2
 800287c:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	211e      	movs	r1, #30
 8002884:	187b      	adds	r3, r7, r1
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	18d2      	adds	r2, r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	187b      	adds	r3, r7, r1
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	18d2      	adds	r2, r2, r3
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <PCD_EP_ISR_Handler+0x4a2>
 80028a4:	231e      	movs	r3, #30
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	881a      	ldrh	r2, [r3, #0]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d207      	bcs.n	80028c2 <PCD_EP_ISR_Handler+0x4b2>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0011      	movs	r1, r2
 80028ba:	0018      	movs	r0, r3
 80028bc:	f002 ff93 	bl	80057e6 <HAL_PCD_DataOutStageCallback>
 80028c0:	e008      	b.n	80028d4 <PCD_EP_ISR_Handler+0x4c4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	7819      	ldrb	r1, [r3, #0]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff f840 	bl	8001954 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028d4:	230c      	movs	r3, #12
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	001a      	movs	r2, r3
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	4013      	ands	r3, r2
 80028e2:	d100      	bne.n	80028e6 <PCD_EP_ISR_Handler+0x4d6>
 80028e4:	e0ec      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
      {
        ep = &hpcd->IN_ep[EPindex];
 80028e6:	211d      	movs	r1, #29
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	0013      	movs	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	3328      	adds	r3, #40	; 0x28
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	001a      	movs	r2, r3
 8002902:	0008      	movs	r0, r1
 8002904:	187b      	adds	r3, r7, r1
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0019      	movs	r1, r3
 8002916:	183b      	adds	r3, r7, r0
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	18cb      	adds	r3, r1, r3
 800291e:	4975      	ldr	r1, [pc, #468]	; (8002af4 <PCD_EP_ISR_Handler+0x6e4>)
 8002920:	400a      	ands	r2, r1
 8002922:	b292      	uxth	r2, r2
 8002924:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	7a9b      	ldrb	r3, [r3, #10]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d126      	bne.n	800297c <PCD_EP_ISR_Handler+0x56c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2250      	movs	r2, #80	; 0x50
 8002934:	5a9b      	ldrh	r3, [r3, r2]
 8002936:	b29b      	uxth	r3, r3
 8002938:	001a      	movs	r2, r3
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	001a      	movs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <PCD_EP_ISR_Handler+0x6d4>)
 800294c:	4694      	mov	ip, r2
 800294e:	4463      	add	r3, ip
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	059b      	lsls	r3, r3, #22
 8002954:	0d9a      	lsrs	r2, r3, #22
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d100      	bne.n	8002964 <PCD_EP_ISR_Handler+0x554>
 8002962:	e07b      	b.n	8002a5c <PCD_EP_ISR_Handler+0x64c>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	889a      	ldrh	r2, [r3, #4]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f7ff fcbf 	bl	80022f8 <PCD_WritePMA>
 800297a:	e06f      	b.n	8002a5c <PCD_EP_ISR_Handler+0x64c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	001a      	movs	r2, r3
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	001a      	movs	r2, r3
 8002990:	2340      	movs	r3, #64	; 0x40
 8002992:	4013      	ands	r3, r2
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d125      	bne.n	80029e4 <PCD_EP_ISR_Handler+0x5d4>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2250      	movs	r2, #80	; 0x50
 800299e:	5a9b      	ldrh	r3, [r3, r2]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	001a      	movs	r2, r3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	001a      	movs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	18d3      	adds	r3, r2, r3
 80029b4:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <PCD_EP_ISR_Handler+0x6d4>)
 80029b6:	4694      	mov	ip, r2
 80029b8:	4463      	add	r3, ip
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	059b      	lsls	r3, r3, #22
 80029be:	0d9a      	lsrs	r2, r3, #22
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d030      	beq.n	8002a2e <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6919      	ldr	r1, [r3, #16]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	88da      	ldrh	r2, [r3, #6]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f7ff fc8b 	bl	80022f8 <PCD_WritePMA>
 80029e2:	e024      	b.n	8002a2e <PCD_EP_ISR_Handler+0x61e>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2250      	movs	r2, #80	; 0x50
 80029ea:	5a9b      	ldrh	r3, [r3, r2]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	001a      	movs	r2, r3
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	001a      	movs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <PCD_EP_ISR_Handler+0x6d8>)
 8002a02:	4694      	mov	ip, r2
 8002a04:	4463      	add	r3, ip
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	059b      	lsls	r3, r3, #22
 8002a0a:	0d9a      	lsrs	r2, r3, #22
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	891a      	ldrh	r2, [r3, #8]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f7ff fc65 	bl	80022f8 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	001a      	movs	r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	18d3      	adds	r3, r2, r3
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <PCD_EP_ISR_Handler+0x6dc>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	18cb      	adds	r3, r1, r3
 8002a54:	4928      	ldr	r1, [pc, #160]	; (8002af8 <PCD_EP_ISR_Handler+0x6e8>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2250      	movs	r2, #80	; 0x50
 8002a62:	5a9b      	ldrh	r3, [r3, r2]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	18d3      	adds	r3, r2, r3
 8002a70:	001a      	movs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	18d3      	adds	r3, r2, r3
 8002a78:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <PCD_EP_ISR_Handler+0x6d4>)
 8002a7a:	4694      	mov	ip, r2
 8002a7c:	4463      	add	r3, ip
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	059b      	lsls	r3, r3, #22
 8002a82:	0d9a      	lsrs	r2, r3, #22
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	18d2      	adds	r2, r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <PCD_EP_ISR_Handler+0x69e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f002 febe 	bl	8005828 <HAL_PCD_DataInStageCallback>
 8002aac:	e008      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x6b0>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	7819      	ldrb	r1, [r3, #0]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff f8c8 	bl	8001c50 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2244      	movs	r2, #68	; 0x44
 8002ac6:	5a9b      	ldrh	r3, [r3, r2]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	230e      	movs	r3, #14
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	1c11      	adds	r1, r2, #0
 8002ad0:	8019      	strh	r1, [r3, #0]
 8002ad2:	b213      	sxth	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da00      	bge.n	8002ada <PCD_EP_ISR_Handler+0x6ca>
 8002ad8:	e4a7      	b.n	800242a <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b009      	add	sp, #36	; 0x24
 8002ae2:	bd90      	pop	{r4, r7, pc}
 8002ae4:	00000402 	.word	0x00000402
 8002ae8:	00000406 	.word	0x00000406
 8002aec:	00000f0f 	.word	0x00000f0f
 8002af0:	ffff80c0 	.word	0xffff80c0
 8002af4:	ffff8f0f 	.word	0xffff8f0f
 8002af8:	ffffc080 	.word	0xffffc080

08002afc <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	0008      	movs	r0, r1
 8002b06:	0011      	movs	r1, r2
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	240a      	movs	r4, #10
 8002b0c:	193b      	adds	r3, r7, r4
 8002b0e:	1c02      	adds	r2, r0, #0
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	2308      	movs	r3, #8
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	1c0a      	adds	r2, r1, #0
 8002b18:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	4013      	ands	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002b28:	230a      	movs	r3, #10
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	227f      	movs	r2, #127	; 0x7f
 8002b30:	401a      	ands	r2, r3
 8002b32:	0013      	movs	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e00b      	b.n	8002b5c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b44:	230a      	movs	r3, #10
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	3309      	adds	r3, #9
 8002b54:	33ff      	adds	r3, #255	; 0xff
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	18d3      	adds	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	809a      	strh	r2, [r3, #4]
 8002b74:	e00b      	b.n	8002b8e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b007      	add	sp, #28
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18>
 8002bae:	e08d      	b.n	8002ccc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bb0:	4bc5      	ldr	r3, [pc, #788]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d00e      	beq.n	8002bda <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbc:	4bc2      	ldr	r3, [pc, #776]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d116      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
 8002bc8:	4bbf      	ldr	r3, [pc, #764]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	23c0      	movs	r3, #192	; 0xc0
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4bbb      	ldr	r3, [pc, #748]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_RCC_OscConfig+0x50>
 8002be6:	e070      	b.n	8002cca <HAL_RCC_OscConfig+0x132>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x5a>
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e329      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_OscConfig+0x76>
 8002bfe:	4bb2      	ldr	r3, [pc, #712]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4bb1      	ldr	r3, [pc, #708]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0249      	lsls	r1, r1, #9
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0xd6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4bac      	ldr	r3, [pc, #688]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c1c:	49ab      	ldr	r1, [pc, #684]	; (8002ecc <HAL_RCC_OscConfig+0x334>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	4ba9      	ldr	r3, [pc, #676]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4ba8      	ldr	r3, [pc, #672]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c28:	49a9      	ldr	r1, [pc, #676]	; (8002ed0 <HAL_RCC_OscConfig+0x338>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0xd6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10e      	bne.n	8002c56 <HAL_RCC_OscConfig+0xbe>
 8002c38:	4ba3      	ldr	r3, [pc, #652]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4ba2      	ldr	r3, [pc, #648]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	02c9      	lsls	r1, r1, #11
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4ba0      	ldr	r3, [pc, #640]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b9f      	ldr	r3, [pc, #636]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0249      	lsls	r1, r1, #9
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0xd6>
 8002c56:	4b9c      	ldr	r3, [pc, #624]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b9b      	ldr	r3, [pc, #620]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	499b      	ldr	r1, [pc, #620]	; (8002ecc <HAL_RCC_OscConfig+0x334>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b99      	ldr	r3, [pc, #612]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b98      	ldr	r3, [pc, #608]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c68:	4999      	ldr	r1, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x338>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fd fb17 	bl	80002a8 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fd fb12 	bl	80002a8 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e2db      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b8d      	ldr	r3, [pc, #564]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fd fb02 	bl	80002a8 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002caa:	f7fd fafd 	bl	80002a8 <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e2c6      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbc:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x112>
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x140>
 8002cd6:	e06c      	b.n	8002db2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	220c      	movs	r2, #12
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce2:	4b79      	ldr	r3, [pc, #484]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11f      	bne.n	8002d2e <HAL_RCC_OscConfig+0x196>
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	23c0      	movs	r3, #192	; 0xc0
 8002cf4:	025b      	lsls	r3, r3, #9
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d00:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e299      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	22f8      	movs	r2, #248	; 0xf8
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00da      	lsls	r2, r3, #3
 8002d26:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2c:	e041      	b.n	8002db2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d024      	beq.n	8002d80 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fd fab1 	bl	80002a8 <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fd faac 	bl	80002a8 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e275      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0f1      	beq.n	8002d4c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	22f8      	movs	r2, #248	; 0xf8
 8002d6e:	4393      	bics	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00da      	lsls	r2, r3, #3
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d80:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fd fa8c 	bl	80002a8 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fd fa87 	bl	80002a8 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e250      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d1f1      	bne.n	8002d96 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	d036      	beq.n	8002e2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fd fa6a 	bl	80002a8 <HAL_GetTick>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fd fa65 	bl	80002a8 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e22e      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2202      	movs	r2, #2
 8002df2:	4013      	ands	r3, r2
 8002df4:	d0f1      	beq.n	8002dda <HAL_RCC_OscConfig+0x242>
 8002df6:	e018      	b.n	8002e2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002dfe:	2101      	movs	r1, #1
 8002e00:	438a      	bics	r2, r1
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fd fa50 	bl	80002a8 <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fd fa4b 	bl	80002a8 <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e214      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d1f1      	bne.n	8002e0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	4013      	ands	r3, r2
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x29e>
 8002e34:	e0b6      	b.n	8002fa4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2317      	movs	r3, #23
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	055b      	lsls	r3, r3, #21
 8002e46:	4013      	ands	r3, r2
 8002e48:	d111      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	0549      	lsls	r1, r1, #21
 8002e54:	430a      	orrs	r2, r1
 8002e56:	61da      	str	r2, [r3, #28]
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	055b      	lsls	r3, r3, #21
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e66:	2317      	movs	r3, #23
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_OscConfig+0x33c>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	d11a      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_RCC_OscConfig+0x33c>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCC_OscConfig+0x33c>)
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	0049      	lsls	r1, r1, #1
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fd fa0e 	bl	80002a8 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fd fa09 	bl	80002a8 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e1d2      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x33c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x340>
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_RCC_OscConfig+0x330>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
 8002ec4:	e036      	b.n	8002f34 <HAL_RCC_OscConfig+0x39c>
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	fffbffff 	.word	0xfffbffff
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x362>
 8002ee0:	4bca      	ldr	r3, [pc, #808]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	4bc9      	ldr	r3, [pc, #804]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	621a      	str	r2, [r3, #32]
 8002eec:	4bc7      	ldr	r3, [pc, #796]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	4bc6      	ldr	r3, [pc, #792]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	621a      	str	r2, [r3, #32]
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x39c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x384>
 8002f02:	4bc2      	ldr	r3, [pc, #776]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	4bc1      	ldr	r3, [pc, #772]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f08:	2104      	movs	r1, #4
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	621a      	str	r2, [r3, #32]
 8002f0e:	4bbf      	ldr	r3, [pc, #764]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	4bbe      	ldr	r3, [pc, #760]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	621a      	str	r2, [r3, #32]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x39c>
 8002f1c:	4bbb      	ldr	r3, [pc, #748]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	4bba      	ldr	r3, [pc, #744]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	438a      	bics	r2, r1
 8002f26:	621a      	str	r2, [r3, #32]
 8002f28:	4bb8      	ldr	r3, [pc, #736]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	4bb7      	ldr	r3, [pc, #732]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f2e:	2104      	movs	r1, #4
 8002f30:	438a      	bics	r2, r1
 8002f32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d014      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd f9b4 	bl	80002a8 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e009      	b.n	8002f5a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fd f9af 	bl	80002a8 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	4aaf      	ldr	r2, [pc, #700]	; (8003210 <HAL_RCC_OscConfig+0x678>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e177      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4bac      	ldr	r3, [pc, #688]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	4013      	ands	r3, r2
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3ae>
 8002f64:	e013      	b.n	8002f8e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fd f99f 	bl	80002a8 <HAL_GetTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e009      	b.n	8002f84 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fd f99a 	bl	80002a8 <HAL_GetTick>
 8002f74:	0002      	movs	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	4aa5      	ldr	r2, [pc, #660]	; (8003210 <HAL_RCC_OscConfig+0x678>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e162      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4ba1      	ldr	r3, [pc, #644]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8e:	2317      	movs	r3, #23
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b9c      	ldr	r3, [pc, #624]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	4b9b      	ldr	r3, [pc, #620]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002f9e:	499d      	ldr	r1, [pc, #628]	; (8003214 <HAL_RCC_OscConfig+0x67c>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	4013      	ands	r3, r2
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d12a      	bne.n	800300c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fb6:	4b95      	ldr	r3, [pc, #596]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b94      	ldr	r3, [pc, #592]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fc2:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc6:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fd f96b 	bl	80002a8 <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fd8:	f7fd f966 	bl	80002a8 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e12f      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2202      	movs	r2, #2
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d0f1      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ff4:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	22f8      	movs	r2, #248	; 0xf8
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003006:	430a      	orrs	r2, r1
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
 800300a:	e034      	b.n	8003076 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	3305      	adds	r3, #5
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003014:	4b7d      	ldr	r3, [pc, #500]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003018:	4b7c      	ldr	r3, [pc, #496]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800301a:	2104      	movs	r1, #4
 800301c:	438a      	bics	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003020:	4b7a      	ldr	r3, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	22f8      	movs	r2, #248	; 0xf8
 8003026:	4393      	bics	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	; 0x34
 8003036:	e01e      	b.n	8003076 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003038:	4b74      	ldr	r3, [pc, #464]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800303e:	2104      	movs	r1, #4
 8003040:	430a      	orrs	r2, r1
 8003042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800304a:	2101      	movs	r1, #1
 800304c:	438a      	bics	r2, r1
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fd f92a 	bl	80002a8 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800305a:	f7fd f925 	bl	80002a8 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0ee      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800306c:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2202      	movs	r2, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d1f1      	bne.n	800305a <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2220      	movs	r2, #32
 800307c:	4013      	ands	r3, r2
 800307e:	d05c      	beq.n	800313a <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	220c      	movs	r2, #12
 8003086:	4013      	ands	r3, r2
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d00e      	beq.n	80030aa <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	220c      	movs	r2, #12
 8003092:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003094:	2b08      	cmp	r3, #8
 8003096:	d114      	bne.n	80030c2 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	025b      	lsls	r3, r3, #9
 80030a0:	401a      	ands	r2, r3
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	025b      	lsls	r3, r3, #9
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80030aa:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	4013      	ands	r3, r2
 80030b4:	d040      	beq.n	8003138 <HAL_RCC_OscConfig+0x5a0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d03c      	beq.n	8003138 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0c3      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01b      	beq.n	8003102 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80030cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ce:	4b4f      	ldr	r3, [pc, #316]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0249      	lsls	r1, r1, #9
 80030d4:	430a      	orrs	r2, r1
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd f8e6 	bl	80002a8 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e2:	f7fd f8e1 	bl	80002a8 <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0aa      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030f4:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80030f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	025b      	lsls	r3, r3, #9
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x54a>
 8003100:	e01b      	b.n	800313a <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003102:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003108:	4943      	ldr	r1, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x680>)
 800310a:	400a      	ands	r2, r1
 800310c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd f8cb 	bl	80002a8 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fd f8c6 	bl	80002a8 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e08f      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	025b      	lsls	r3, r3, #9
 8003132:	4013      	ands	r3, r2
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x580>
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003138:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <HAL_RCC_OscConfig+0x5ac>
 8003142:	e081      	b.n	8003248 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	220c      	movs	r2, #12
 800314a:	4013      	ands	r3, r2
 800314c:	2b08      	cmp	r3, #8
 800314e:	d100      	bne.n	8003152 <HAL_RCC_OscConfig+0x5ba>
 8003150:	e078      	b.n	8003244 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b02      	cmp	r3, #2
 8003158:	d14c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003160:	492e      	ldr	r1, [pc, #184]	; (800321c <HAL_RCC_OscConfig+0x684>)
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd f89f 	bl	80002a8 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fd f89a 	bl	80002a8 <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e063      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	049b      	lsls	r3, r3, #18
 800318a:	4013      	ands	r3, r2
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_RCC_OscConfig+0x674>)
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	220f      	movs	r2, #15
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x674>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x688>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	431a      	orrs	r2, r3
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	0449      	lsls	r1, r1, #17
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fd f86d 	bl	80002a8 <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fd f868 	bl	80002a8 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e031      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	049b      	lsls	r3, r3, #18
 80031ee:	4013      	ands	r3, r2
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x63c>
 80031f2:	e029      	b.n	8003248 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_RCC_OscConfig+0x674>)
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x684>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd f852 	bl	80002a8 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x69e>
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	00001388 	.word	0x00001388
 8003214:	efffffff 	.word	0xefffffff
 8003218:	fffeffff 	.word	0xfffeffff
 800321c:	feffffff 	.word	0xfeffffff
 8003220:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd f840 	bl	80002a8 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e009      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_RCC_OscConfig+0x6bc>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	049b      	lsls	r3, r3, #18
 800323e:	4013      	ands	r3, r2
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x68c>
 8003242:	e001      	b.n	8003248 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b006      	add	sp, #24
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40021000 	.word	0x40021000

08003258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003266:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	4013      	ands	r3, r2
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d911      	bls.n	8003298 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003274:	4b77      	ldr	r3, [pc, #476]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	4393      	bics	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	4b75      	ldr	r3, [pc, #468]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003286:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d8      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	22f0      	movs	r2, #240	; 0xf0
 80032a8:	4393      	bics	r3, r2
 80032aa:	0019      	movs	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b69      	ldr	r3, [pc, #420]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d100      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x6a>
 80032c0:	e089      	b.n	80033d6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	4013      	ands	r3, r2
 80032d4:	d120      	bne.n	8003318 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0b7      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	049b      	lsls	r3, r3, #18
 80032ea:	4013      	ands	r3, r2
 80032ec:	d114      	bne.n	8003318 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0ab      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80032fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	025b      	lsls	r3, r3, #9
 8003302:	4013      	ands	r3, r2
 8003304:	d108      	bne.n	8003318 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e09f      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e098      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	4393      	bics	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fc ffbc 	bl	80002a8 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d111      	bne.n	8003360 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	e009      	b.n	8003352 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fc ffb3 	bl	80002a8 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	4a44      	ldr	r2, [pc, #272]	; (800345c <HAL_RCC_ClockConfig+0x204>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e07b      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	220c      	movs	r2, #12
 8003358:	4013      	ands	r3, r2
 800335a:	2b04      	cmp	r3, #4
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_ClockConfig+0xe6>
 800335e:	e03a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d111      	bne.n	800338c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	e009      	b.n	800337e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f7fc ff9d 	bl	80002a8 <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	4a39      	ldr	r2, [pc, #228]	; (800345c <HAL_RCC_ClockConfig+0x204>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e065      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	220c      	movs	r2, #12
 8003384:	4013      	ands	r3, r2
 8003386:	2b08      	cmp	r3, #8
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_ClockConfig+0x112>
 800338a:	e024      	b.n	80033d6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d11b      	bne.n	80033cc <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003394:	e009      	b.n	80033aa <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003396:	f7fc ff87 	bl	80002a8 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	4a2e      	ldr	r2, [pc, #184]	; (800345c <HAL_RCC_ClockConfig+0x204>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04f      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80033aa:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	220c      	movs	r2, #12
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d1ef      	bne.n	8003396 <HAL_RCC_ClockConfig+0x13e>
 80033b6:	e00e      	b.n	80033d6 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fc ff76 	bl	80002a8 <HAL_GetTick>
 80033bc:	0002      	movs	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_RCC_ClockConfig+0x204>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03e      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	220c      	movs	r2, #12
 80033d2:	4013      	ands	r3, r2
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d211      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_RCC_ClockConfig+0x1fc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2201      	movs	r2, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e020      	b.n	800344a <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2204      	movs	r2, #4
 800340e:	4013      	ands	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <HAL_RCC_ClockConfig+0x208>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	0001      	movs	r1, r0
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x200>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	220f      	movs	r2, #15
 8003434:	4013      	ands	r3, r2
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x20c>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	000a      	movs	r2, r1
 800343c:	40da      	lsrs	r2, r3
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x210>)
 8003440:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fc ff08 	bl	8000258 <HAL_InitTick>
  
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	40022000 	.word	0x40022000
 8003458:	40021000 	.word	0x40021000
 800345c:	00001388 	.word	0x00001388
 8003460:	fffff8ff 	.word	0xfffff8ff
 8003464:	08006aa0 	.word	0x08006aa0
 8003468:	200000c0 	.word	0x200000c0

0800346c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b08f      	sub	sp, #60	; 0x3c
 8003470:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003472:	2314      	movs	r3, #20
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	4a37      	ldr	r2, [pc, #220]	; (8003554 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003478:	ca13      	ldmia	r2!, {r0, r1, r4}
 800347a:	c313      	stmia	r3!, {r0, r1, r4}
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_RCC_GetSysClockFreq+0xec>)
 8003484:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003486:	c313      	stmia	r3!, {r0, r1, r4}
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	2300      	movs	r3, #0
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_GetSysClockFreq+0xf0>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	220c      	movs	r2, #12
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d006      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x52>
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d043      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0xd0>
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d144      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034bc:	e044      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	0c9b      	lsrs	r3, r3, #18
 80034c2:	220f      	movs	r2, #15
 80034c4:	4013      	ands	r3, r2
 80034c6:	2214      	movs	r2, #20
 80034c8:	18ba      	adds	r2, r7, r2
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_RCC_GetSysClockFreq+0xf0>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	220f      	movs	r2, #15
 80034d4:	4013      	ands	r3, r2
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034de:	23c0      	movs	r3, #192	; 0xc0
 80034e0:	025b      	lsls	r3, r3, #9
 80034e2:	401a      	ands	r2, r3
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d109      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80034ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ee:	481c      	ldr	r0, [pc, #112]	; (8003560 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034f0:	f7fc fe12 	bl	8000118 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	001a      	movs	r2, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	4353      	muls	r3, r2
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
 80034fe:	e01a      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003502:	23c0      	movs	r3, #192	; 0xc0
 8003504:	025b      	lsls	r3, r3, #9
 8003506:	401a      	ands	r2, r3
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	025b      	lsls	r3, r3, #9
 800350c:	429a      	cmp	r2, r3
 800350e:	d109      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8003510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003512:	4814      	ldr	r0, [pc, #80]	; (8003564 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003514:	f7fc fe00 	bl	8000118 <__udivsi3>
 8003518:	0003      	movs	r3, r0
 800351a:	001a      	movs	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	4353      	muls	r3, r2
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
 8003522:	e008      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8003524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003526:	480e      	ldr	r0, [pc, #56]	; (8003560 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003528:	f7fc fdf6 	bl	8000118 <__udivsi3>
 800352c:	0003      	movs	r3, r0
 800352e:	001a      	movs	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	4353      	muls	r3, r2
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800353a:	e005      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003540:	e002      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003546:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b00f      	add	sp, #60	; 0x3c
 8003550:	bd90      	pop	{r4, r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	080069d0 	.word	0x080069d0
 8003558:	080069e0 	.word	0x080069e0
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200
 8003564:	02dc6c00 	.word	0x02dc6c00

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b02      	ldr	r3, [pc, #8]	; (8003578 <HAL_RCC_GetHCLKFreq+0x10>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	200000c0 	.word	0x200000c0

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003580:	f7ff fff2 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003584:	0001      	movs	r1, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	2207      	movs	r2, #7
 800358e:	4013      	ands	r3, r2
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	40d9      	lsrs	r1, r3
 8003596:	000b      	movs	r3, r1
}    
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08006ab0 	.word	0x08006ab0

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	025b      	lsls	r3, r3, #9
 80035c0:	4013      	ands	r3, r2
 80035c2:	d100      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035c4:	e08f      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2317      	movs	r3, #23
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	055b      	lsls	r3, r3, #21
 80035d6:	4013      	ands	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b6c      	ldr	r3, [pc, #432]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	0549      	lsls	r1, r1, #21
 80035e4:	430a      	orrs	r2, r1
 80035e6:	61da      	str	r2, [r3, #28]
 80035e8:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	055b      	lsls	r3, r3, #21
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2317      	movs	r3, #23
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b64      	ldr	r3, [pc, #400]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4013      	ands	r3, r2
 8003608:	d11a      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b61      	ldr	r3, [pc, #388]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b60      	ldr	r3, [pc, #384]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003610:	2180      	movs	r1, #128	; 0x80
 8003612:	0049      	lsls	r1, r1, #1
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003618:	f7fc fe46 	bl	80002a8 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fc fe41 	bl	80002a8 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b64      	cmp	r3, #100	; 0x64
 800362e:	d901      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0a6      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d0f0      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003640:	4b52      	ldr	r3, [pc, #328]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	23c0      	movs	r3, #192	; 0xc0
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d034      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	23c0      	movs	r3, #192	; 0xc0
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4013      	ands	r3, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	429a      	cmp	r2, r3
 8003660:	d02c      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a4b      	ldr	r2, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366c:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	4b46      	ldr	r3, [pc, #280]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	0249      	lsls	r1, r1, #9
 8003676:	430a      	orrs	r2, r1
 8003678:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367a:	4b44      	ldr	r3, [pc, #272]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003680:	4945      	ldr	r1, [pc, #276]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003682:	400a      	ands	r2, r1
 8003684:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003686:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fc fe08 	bl	80002a8 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	e009      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fc fe03 	bl	80002a8 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	4a3c      	ldr	r2, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e067      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	2202      	movs	r2, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f0      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036bc:	4b33      	ldr	r3, [pc, #204]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a34      	ldr	r2, [pc, #208]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4b30      	ldr	r3, [pc, #192]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036cc:	430a      	orrs	r2, r1
 80036ce:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d0:	2317      	movs	r3, #23
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b2c      	ldr	r3, [pc, #176]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036e0:	492f      	ldr	r1, [pc, #188]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2203      	movs	r2, #3
 80036f6:	4393      	bics	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003700:	430a      	orrs	r2, r1
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2202      	movs	r2, #2
 800370a:	4013      	ands	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800370e:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800371e:	430a      	orrs	r2, r1
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2220      	movs	r2, #32
 8003728:	4013      	ands	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2210      	movs	r2, #16
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800373c:	430a      	orrs	r2, r1
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	029b      	lsls	r3, r3, #10
 8003748:	4013      	ands	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	4393      	bics	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4013      	ands	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4393      	bics	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800377c:	430a      	orrs	r2, r1
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b006      	add	sp, #24
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	fffffcff 	.word	0xfffffcff
 8003798:	fffeffff 	.word	0xfffeffff
 800379c:	00001388 	.word	0x00001388
 80037a0:	efffffff 	.word	0xefffffff
 80037a4:	fffcffff 	.word	0xfffcffff

080037a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e047      	b.n	800384a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2269      	movs	r2, #105	; 0x69
 80037be:	5c9b      	ldrb	r3, [r3, r2]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2268      	movs	r2, #104	; 0x68
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f001 feb5 	bl	8005540 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2269      	movs	r2, #105	; 0x69
 80037da:	2124      	movs	r1, #36	; 0x24
 80037dc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f8d5 	bl	80039a0 <UART_SetConfig>
 80037f6:	0003      	movs	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e024      	b.n	800384a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fa84 	bl	8003d18 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_UART_Init+0xac>)
 800381c:	400a      	ands	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	212a      	movs	r1, #42	; 0x2a
 800382c:	438a      	bics	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fb1c 	bl	8003e80 <UART_CheckIdleState>
 8003848:	0003      	movs	r3, r0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	ffffb7ff 	.word	0xffffb7ff

08003858 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2269      	movs	r2, #105	; 0x69
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	d000      	beq.n	800387a <HAL_UART_Transmit+0x22>
 8003878:	e08c      	b.n	8003994 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_UART_Transmit+0x30>
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e084      	b.n	8003996 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	015b      	lsls	r3, r3, #5
 8003894:	429a      	cmp	r2, r3
 8003896:	d109      	bne.n	80038ac <HAL_UART_Transmit+0x54>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	4013      	ands	r3, r2
 80038a6:	d001      	beq.n	80038ac <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e074      	b.n	8003996 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2268      	movs	r2, #104	; 0x68
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Transmit+0x62>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e06d      	b.n	8003996 <HAL_UART_Transmit+0x13e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2268      	movs	r2, #104	; 0x68
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2269      	movs	r2, #105	; 0x69
 80038cc:	2121      	movs	r1, #33	; 0x21
 80038ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038d0:	f7fc fcea 	bl	80002a8 <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1dba      	adds	r2, r7, #6
 80038dc:	2150      	movs	r1, #80	; 0x50
 80038de:	8812      	ldrh	r2, [r2, #0]
 80038e0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1dba      	adds	r2, r7, #6
 80038e6:	2152      	movs	r1, #82	; 0x52
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 80038ec:	e035      	b.n	800395a <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2252      	movs	r2, #82	; 0x52
 80038f2:	5a9b      	ldrh	r3, [r3, r2]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b299      	uxth	r1, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2252      	movs	r2, #82	; 0x52
 80038fe:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	0013      	movs	r3, r2
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	f000 fb0f 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d001      	beq.n	800391a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e03d      	b.n	8003996 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	015b      	lsls	r3, r3, #5
 8003922:	429a      	cmp	r2, r3
 8003924:	d111      	bne.n	800394a <HAL_UART_Transmit+0xf2>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	05d2      	lsls	r2, r2, #23
 800393c:	0dd2      	lsrs	r2, r2, #23
 800393e:	b292      	uxth	r2, r2
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3302      	adds	r3, #2
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e007      	b.n	800395a <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	60ba      	str	r2, [r7, #8]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b292      	uxth	r2, r2
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2252      	movs	r2, #82	; 0x52
 800395e:	5a9b      	ldrh	r3, [r3, r2]
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1c3      	bne.n	80038ee <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	0013      	movs	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	2140      	movs	r1, #64	; 0x40
 8003974:	f000 fadc 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003978:	1e03      	subs	r3, r0, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e00a      	b.n	8003996 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2269      	movs	r2, #105	; 0x69
 8003984:	2120      	movs	r1, #32
 8003986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2268      	movs	r2, #104	; 0x68
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b006      	add	sp, #24
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80039ac:	2317      	movs	r3, #23
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2210      	movs	r2, #16
 80039b2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80039b4:	230a      	movs	r3, #10
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80039bc:	2314      	movs	r3, #20
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c4:	2313      	movs	r3, #19
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4ac1      	ldr	r2, [pc, #772]	; (8003cf0 <UART_SetConfig+0x350>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4abc      	ldr	r2, [pc, #752]	; (8003cf4 <UART_SetConfig+0x354>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4ab4      	ldr	r2, [pc, #720]	; (8003cf8 <UART_SetConfig+0x358>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4ab0      	ldr	r2, [pc, #704]	; (8003cfc <UART_SetConfig+0x35c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d125      	bne.n	8003a8a <UART_SetConfig+0xea>
 8003a3e:	4bb0      	ldr	r3, [pc, #704]	; (8003d00 <UART_SetConfig+0x360>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	2203      	movs	r2, #3
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d00f      	beq.n	8003a6a <UART_SetConfig+0xca>
 8003a4a:	d304      	bcc.n	8003a56 <UART_SetConfig+0xb6>
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d011      	beq.n	8003a74 <UART_SetConfig+0xd4>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d005      	beq.n	8003a60 <UART_SetConfig+0xc0>
 8003a54:	e013      	b.n	8003a7e <UART_SetConfig+0xde>
 8003a56:	2317      	movs	r3, #23
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e064      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003a60:	2317      	movs	r3, #23
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e05f      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003a6a:	2317      	movs	r3, #23
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2204      	movs	r2, #4
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e05a      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003a74:	2317      	movs	r3, #23
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2208      	movs	r2, #8
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e055      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003a7e:	2317      	movs	r3, #23
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2210      	movs	r2, #16
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	e04f      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a9d      	ldr	r2, [pc, #628]	; (8003d04 <UART_SetConfig+0x364>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d132      	bne.n	8003afa <UART_SetConfig+0x15a>
 8003a94:	4b9a      	ldr	r3, [pc, #616]	; (8003d00 <UART_SetConfig+0x360>)
 8003a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a98:	23c0      	movs	r3, #192	; 0xc0
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	0252      	lsls	r2, r2, #9
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <UART_SetConfig+0x13a>
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	0252      	lsls	r2, r2, #9
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d802      	bhi.n	8003ab4 <UART_SetConfig+0x114>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <UART_SetConfig+0x126>
 8003ab2:	e01c      	b.n	8003aee <UART_SetConfig+0x14e>
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	0292      	lsls	r2, r2, #10
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <UART_SetConfig+0x144>
 8003abc:	22c0      	movs	r2, #192	; 0xc0
 8003abe:	0292      	lsls	r2, r2, #10
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d005      	beq.n	8003ad0 <UART_SetConfig+0x130>
 8003ac4:	e013      	b.n	8003aee <UART_SetConfig+0x14e>
 8003ac6:	2317      	movs	r3, #23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e02c      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003ad0:	2317      	movs	r3, #23
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	e027      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003ada:	2317      	movs	r3, #23
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2204      	movs	r2, #4
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	e022      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2208      	movs	r2, #8
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e01d      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003aee:	2317      	movs	r3, #23
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2210      	movs	r2, #16
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	e017      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a82      	ldr	r2, [pc, #520]	; (8003d08 <UART_SetConfig+0x368>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d104      	bne.n	8003b0e <UART_SetConfig+0x16e>
 8003b04:	2317      	movs	r3, #23
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e00d      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a7e      	ldr	r2, [pc, #504]	; (8003d0c <UART_SetConfig+0x36c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d104      	bne.n	8003b22 <UART_SetConfig+0x182>
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e003      	b.n	8003b2a <UART_SetConfig+0x18a>
 8003b22:	2317      	movs	r3, #23
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2210      	movs	r2, #16
 8003b28:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d000      	beq.n	8003b38 <UART_SetConfig+0x198>
 8003b36:	e077      	b.n	8003c28 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8003b38:	2317      	movs	r3, #23
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d01c      	beq.n	8003b7c <UART_SetConfig+0x1dc>
 8003b42:	dc02      	bgt.n	8003b4a <UART_SetConfig+0x1aa>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <UART_SetConfig+0x1b4>
 8003b48:	e04f      	b.n	8003bea <UART_SetConfig+0x24a>
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d027      	beq.n	8003b9e <UART_SetConfig+0x1fe>
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d039      	beq.n	8003bc6 <UART_SetConfig+0x226>
 8003b52:	e04a      	b.n	8003bea <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b54:	f7ff fd12 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	005a      	lsls	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	18d2      	adds	r2, r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0019      	movs	r1, r3
 8003b6a:	0010      	movs	r0, r2
 8003b6c:	f7fc fad4 	bl	8000118 <__udivsi3>
 8003b70:	0003      	movs	r3, r0
 8003b72:	001a      	movs	r2, r3
 8003b74:	2314      	movs	r3, #20
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	801a      	strh	r2, [r3, #0]
        break;
 8003b7a:	e03b      	b.n	8003bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <UART_SetConfig+0x370>)
 8003b84:	189a      	adds	r2, r3, r2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	0010      	movs	r0, r2
 8003b8e:	f7fc fac3 	bl	8000118 <__udivsi3>
 8003b92:	0003      	movs	r3, r0
 8003b94:	001a      	movs	r2, r3
 8003b96:	2314      	movs	r3, #20
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	801a      	strh	r2, [r3, #0]
        break;
 8003b9c:	e02a      	b.n	8003bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b9e:	f7ff fc65 	bl	800346c <HAL_RCC_GetSysClockFreq>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	005a      	lsls	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	18d2      	adds	r2, r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	f7fc faaf 	bl	8000118 <__udivsi3>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	2314      	movs	r3, #20
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	801a      	strh	r2, [r3, #0]
        break;
 8003bc4:	e016      	b.n	8003bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	0252      	lsls	r2, r2, #9
 8003bd0:	189a      	adds	r2, r3, r2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	0010      	movs	r0, r2
 8003bda:	f7fc fa9d 	bl	8000118 <__udivsi3>
 8003bde:	0003      	movs	r3, r0
 8003be0:	001a      	movs	r2, r3
 8003be2:	2314      	movs	r3, #20
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	801a      	strh	r2, [r3, #0]
        break;
 8003be8:	e004      	b.n	8003bf4 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003bea:	2313      	movs	r3, #19
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
        break;
 8003bf2:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003bf4:	200a      	movs	r0, #10
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	2414      	movs	r4, #20
 8003bfa:	193a      	adds	r2, r7, r4
 8003bfc:	8812      	ldrh	r2, [r2, #0]
 8003bfe:	210f      	movs	r1, #15
 8003c00:	438a      	bics	r2, r1
 8003c02:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	105b      	asrs	r3, r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2207      	movs	r2, #7
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b299      	uxth	r1, r3
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	183a      	adds	r2, r7, r0
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	183a      	adds	r2, r7, r0
 8003c22:	8812      	ldrh	r2, [r2, #0]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e05b      	b.n	8003ce0 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8003c28:	2317      	movs	r3, #23
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d01b      	beq.n	8003c6a <UART_SetConfig+0x2ca>
 8003c32:	dc02      	bgt.n	8003c3a <UART_SetConfig+0x29a>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <UART_SetConfig+0x2a4>
 8003c38:	e04d      	b.n	8003cd6 <UART_SetConfig+0x336>
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d026      	beq.n	8003c8c <UART_SetConfig+0x2ec>
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d037      	beq.n	8003cb2 <UART_SetConfig+0x312>
 8003c42:	e048      	b.n	8003cd6 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c44:	f7ff fc9a 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	18d2      	adds	r2, r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f7fc fa5d 	bl	8000118 <__udivsi3>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
        break;
 8003c68:	e03a      	b.n	8003ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	4a28      	ldr	r2, [pc, #160]	; (8003d14 <UART_SetConfig+0x374>)
 8003c72:	189a      	adds	r2, r3, r2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0019      	movs	r1, r3
 8003c7a:	0010      	movs	r0, r2
 8003c7c:	f7fc fa4c 	bl	8000118 <__udivsi3>
 8003c80:	0003      	movs	r3, r0
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60da      	str	r2, [r3, #12]
        break;
 8003c8a:	e029      	b.n	8003ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c8c:	f7ff fbee 	bl	800346c <HAL_RCC_GetSysClockFreq>
 8003c90:	0002      	movs	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	18d2      	adds	r2, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	f7fc fa39 	bl	8000118 <__udivsi3>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60da      	str	r2, [r3, #12]
        break;
 8003cb0:	e016      	b.n	8003ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0212      	lsls	r2, r2, #8
 8003cbc:	189a      	adds	r2, r3, r2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	0010      	movs	r0, r2
 8003cc6:	f7fc fa27 	bl	8000118 <__udivsi3>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60da      	str	r2, [r3, #12]
        break;
 8003cd4:	e004      	b.n	8003ce0 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003cd6:	2313      	movs	r3, #19
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
        break;
 8003cde:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003ce0:	2313      	movs	r3, #19
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]

}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b007      	add	sp, #28
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	efff69f3 	.word	0xefff69f3
 8003cf4:	ffffcfff 	.word	0xffffcfff
 8003cf8:	fffff4ff 	.word	0xfffff4ff
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40004400 	.word	0x40004400
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40004c00 	.word	0x40004c00
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2201      	movs	r2, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <UART_AdvFeatureConfig+0x144>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2202      	movs	r2, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4a43      	ldr	r2, [pc, #268]	; (8003e60 <UART_AdvFeatureConfig+0x148>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a3b      	ldr	r2, [pc, #236]	; (8003e64 <UART_AdvFeatureConfig+0x14c>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a34      	ldr	r2, [pc, #208]	; (8003e68 <UART_AdvFeatureConfig+0x150>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2210      	movs	r2, #16
 8003dae:	4013      	ands	r3, r2
 8003db0:	d00b      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <UART_AdvFeatureConfig+0x154>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	2220      	movs	r2, #32
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <UART_AdvFeatureConfig+0x158>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	4013      	ands	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <UART_AdvFeatureConfig+0x15c>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	035b      	lsls	r3, r3, #13
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d10b      	bne.n	8003e32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <UART_AdvFeatureConfig+0x160>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <UART_AdvFeatureConfig+0x164>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	0019      	movs	r1, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fffdffff 	.word	0xfffdffff
 8003e60:	fffeffff 	.word	0xfffeffff
 8003e64:	fffbffff 	.word	0xfffbffff
 8003e68:	ffff7fff 	.word	0xffff7fff
 8003e6c:	ffffefff 	.word	0xffffefff
 8003e70:	ffffdfff 	.word	0xffffdfff
 8003e74:	ffefffff 	.word	0xffefffff
 8003e78:	ff9fffff 	.word	0xff9fffff
 8003e7c:	fff7ffff 	.word	0xfff7ffff

08003e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e92:	f7fc fa09 	bl	80002a8 <HAL_GetTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <UART_CheckIdleState+0xa4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <UART_CheckIdleState+0x2e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <UART_CheckIdleState+0xa8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d129      	bne.n	8003f02 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10d      	bne.n	8003ed8 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	0399      	lsls	r1, r3, #14
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <UART_CheckIdleState+0xac>)
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0013      	movs	r3, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f000 f830 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003ed0:	1e03      	subs	r3, r0, #0
 8003ed2:	d001      	beq.n	8003ed8 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e021      	b.n	8003f1c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d10d      	bne.n	8003f02 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	03d9      	lsls	r1, r3, #15
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <UART_CheckIdleState+0xac>)
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f000 f81b 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d001      	beq.n	8003f02 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00c      	b.n	8003f1c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2269      	movs	r2, #105	; 0x69
 8003f06:	2120      	movs	r1, #32
 8003f08:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	226a      	movs	r2, #106	; 0x6a
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2268      	movs	r2, #104	; 0x68
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40004400 	.word	0x40004400
 8003f2c:	01ffffff 	.word	0x01ffffff

08003f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f40:	e02b      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3301      	adds	r3, #1
 8003f46:	d028      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f4e:	f7fc f9ab 	bl	80002a8 <HAL_GetTick>
 8003f52:	0002      	movs	r2, r0
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d21d      	bcs.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4916      	ldr	r1, [pc, #88]	; (8003fc4 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	438a      	bics	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2269      	movs	r2, #105	; 0x69
 8003f82:	2120      	movs	r1, #32
 8003f84:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	226a      	movs	r2, #106	; 0x6a
 8003f8a:	2120      	movs	r1, #32
 8003f8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2268      	movs	r2, #104	; 0x68
 8003f92:	2100      	movs	r1, #0
 8003f94:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00f      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	425a      	negs	r2, r3
 8003faa:	4153      	adcs	r3, r2
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	001a      	movs	r2, r3
 8003fb0:	1dfb      	adds	r3, r7, #7
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d0c4      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffe5f 	.word	0xfffffe5f

08003fc8 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	1cfb      	adds	r3, r7, #3
 8003fd4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8003fd6:	230f      	movs	r3, #15
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	2181      	movs	r1, #129	; 0x81
 8003fe6:	f001 fd2d 	bl	8005a44 <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8003fea:	2010      	movs	r0, #16
 8003fec:	f001 fee4 	bl	8005db8 <USBD_static_malloc>
 8003ff0:	0001      	movs	r1, r0
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	2386      	movs	r3, #134	; 0x86
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	2386      	movs	r3, #134	; 0x86
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	58d3      	ldr	r3, [r2, r3]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <USBD_HID_Init+0x48>
  {
    ret = 1; 
 8004006:	230f      	movs	r3, #15
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e005      	b.n	800401c <USBD_HID_Init+0x54>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	2386      	movs	r3, #134	; 0x86
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	58d3      	ldr	r3, [r2, r3]
 8004018:	2200      	movs	r2, #0
 800401a:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 800401c:	230f      	movs	r3, #15
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	781b      	ldrb	r3, [r3, #0]
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}

0800402a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	000a      	movs	r2, r1
 8004034:	1cfb      	adds	r3, r7, #3
 8004036:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2181      	movs	r1, #129	; 0x81
 800403c:	0018      	movs	r0, r3
 800403e:	f001 fd3f 	bl	8005ac0 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	2386      	movs	r3, #134	; 0x86
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	58d3      	ldr	r3, [r2, r3]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <USBD_HID_DeInit+0x3c>
  {
    USBD_free(pdev->pClassData);
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	2386      	movs	r3, #134	; 0x86
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	58d3      	ldr	r3, [r2, r3]
 8004056:	0018      	movs	r0, r3
 8004058:	f001 feba 	bl	8005dd0 <USBD_static_free>
    pdev->pClassData = NULL;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	2386      	movs	r3, #134	; 0x86
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	2100      	movs	r1, #0
 8004064:	50d1      	str	r1, [r2, r3]
  } 
  
  return USBD_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	0018      	movs	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	b002      	add	sp, #8
 800406e:	bd80      	pop	{r7, pc}

08004070 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 800407a:	2316      	movs	r3, #22
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	2200      	movs	r2, #0
 8004080:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	2386      	movs	r3, #134	; 0x86
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	58d3      	ldr	r3, [r2, r3]
 800408e:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	001a      	movs	r2, r3
 8004096:	2360      	movs	r3, #96	; 0x60
 8004098:	4013      	ands	r3, r2
 800409a:	d036      	beq.n	800410a <USBD_HID_Setup+0x9a>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d000      	beq.n	80040a2 <USBD_HID_Setup+0x32>
 80040a0:	e077      	b.n	8004192 <USBD_HID_Setup+0x122>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d00e      	beq.n	80040c8 <USBD_HID_Setup+0x58>
 80040aa:	dc02      	bgt.n	80040b2 <USBD_HID_Setup+0x42>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d01b      	beq.n	80040e8 <USBD_HID_Setup+0x78>
 80040b0:	e022      	b.n	80040f8 <USBD_HID_Setup+0x88>
 80040b2:	2b0a      	cmp	r3, #10
 80040b4:	d00f      	beq.n	80040d6 <USBD_HID_Setup+0x66>
 80040b6:	2b0b      	cmp	r3, #11
 80040b8:	d11e      	bne.n	80040f8 <USBD_HID_Setup+0x88>
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	885b      	ldrh	r3, [r3, #2]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	001a      	movs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]
      break;
 80040c6:	e01f      	b.n	8004108 <USBD_HID_Setup+0x98>
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 80040c8:	68f9      	ldr	r1, [r7, #12]
      USBD_CtlSendData (pdev, 
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	0018      	movs	r0, r3
 80040d0:	f001 f83a 	bl	8005148 <USBD_CtlSendData>
                        1);    
      break;
 80040d4:	e018      	b.n	8004108 <USBD_HID_Setup+0x98>
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	001a      	movs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]
      break;
 80040e6:	e00f      	b.n	8004108 <USBD_HID_Setup+0x98>
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	0018      	movs	r0, r3
 80040f2:	f001 f829 	bl	8005148 <USBD_CtlSendData>
                        1);        
      break;      
 80040f6:	e007      	b.n	8004108 <USBD_HID_Setup+0x98>
      
    default:
      USBD_CtlError (pdev, req);
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 ffa2 	bl	8005048 <USBD_CtlError>
      return USBD_FAIL; 
 8004104:	2302      	movs	r3, #2
 8004106:	e045      	b.n	8004194 <USBD_HID_Setup+0x124>
    }
    break;
 8004108:	e043      	b.n	8004192 <USBD_HID_Setup+0x122>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	2b0a      	cmp	r3, #10
 8004110:	d02f      	beq.n	8004172 <USBD_HID_Setup+0x102>
 8004112:	2b0b      	cmp	r3, #11
 8004114:	d036      	beq.n	8004184 <USBD_HID_Setup+0x114>
 8004116:	2b06      	cmp	r3, #6
 8004118:	d13b      	bne.n	8004192 <USBD_HID_Setup+0x122>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	885b      	ldrh	r3, [r3, #2]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d10b      	bne.n	800413e <USBD_HID_Setup+0xce>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	88db      	ldrh	r3, [r3, #6]
 800412a:	2216      	movs	r2, #22
 800412c:	18ba      	adds	r2, r7, r2
 800412e:	b299      	uxth	r1, r3
 8004130:	294a      	cmp	r1, #74	; 0x4a
 8004132:	d900      	bls.n	8004136 <USBD_HID_Setup+0xc6>
 8004134:	234a      	movs	r3, #74	; 0x4a
 8004136:	8013      	strh	r3, [r2, #0]
        pbuf = HID_MOUSE_ReportDesc;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <USBD_HID_Setup+0x12c>)
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e010      	b.n	8004160 <USBD_HID_Setup+0xf0>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	885b      	ldrh	r3, [r3, #2]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b21      	cmp	r3, #33	; 0x21
 8004148:	d10a      	bne.n	8004160 <USBD_HID_Setup+0xf0>
      {
        pbuf = USBD_HID_Desc;   
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <USBD_HID_Setup+0x130>)
 800414c:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	88db      	ldrh	r3, [r3, #6]
 8004152:	2216      	movs	r2, #22
 8004154:	18ba      	adds	r2, r7, r2
 8004156:	b299      	uxth	r1, r3
 8004158:	2909      	cmp	r1, #9
 800415a:	d900      	bls.n	800415e <USBD_HID_Setup+0xee>
 800415c:	2309      	movs	r3, #9
 800415e:	8013      	strh	r3, [r2, #0]
      }
      
      USBD_CtlSendData (pdev, 
 8004160:	2316      	movs	r3, #22
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	881a      	ldrh	r2, [r3, #0]
 8004166:	6939      	ldr	r1, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0018      	movs	r0, r3
 800416c:	f000 ffec 	bl	8005148 <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 8004170:	e00f      	b.n	8004192 <USBD_HID_Setup+0x122>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3308      	adds	r3, #8
 8004176:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	0018      	movs	r0, r3
 800417e:	f000 ffe3 	bl	8005148 <USBD_CtlSendData>
                        1);
      break;
 8004182:	e006      	b.n	8004192 <USBD_HID_Setup+0x122>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	885b      	ldrh	r3, [r3, #2]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	001a      	movs	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	46c0      	nop			; (mov r8, r8)
    }
  }
  return USBD_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b006      	add	sp, #24
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000074 	.word	0x20000074
 80041a0:	2000005c 	.word	0x2000005c

080041a4 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2222      	movs	r2, #34	; 0x22
 80041b0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80041b2:	4b02      	ldr	r3, [pc, #8]	; (80041bc <USBD_HID_GetCfgDesc+0x18>)
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000038 	.word	0x20000038

080041c0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	000a      	movs	r2, r1
 80041ca:	1cfb      	adds	r3, r7, #3
 80041cc:	701a      	strb	r2, [r3, #0]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	2386      	movs	r3, #134	; 0x86
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	58d3      	ldr	r3, [r2, r3]
 80041d6:	2200      	movs	r2, #0
 80041d8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	220a      	movs	r2, #10
 80041f0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80041f2:	4b02      	ldr	r3, [pc, #8]	; (80041fc <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b002      	add	sp, #8
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000068 	.word	0x20000068

08004200 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004214:	2302      	movs	r3, #2
 8004216:	e020      	b.n	800425a <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	2385      	movs	r3, #133	; 0x85
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	58d3      	ldr	r3, [r2, r3]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	2385      	movs	r3, #133	; 0x85
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	2100      	movs	r1, #0
 800422c:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	2384      	movs	r3, #132	; 0x84
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	23fe      	movs	r3, #254	; 0xfe
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2101      	movs	r1, #1
 8004246:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1dfa      	adds	r2, r7, #7
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0018      	movs	r0, r3
 8004254:	f001 fb74 	bl	8005940 <USBD_LL_Init>
  
  return USBD_OK; 
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}

08004262 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800426c:	230f      	movs	r3, #15
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	2385      	movs	r3, #133	; 0x85
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004284:	230f      	movs	r3, #15
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e003      	b.n	8004296 <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800428e:	230f      	movs	r3, #15
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2202      	movs	r2, #2
 8004294:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b004      	add	sp, #16
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f001 fb9c 	bl	80059ec <USBD_LL_Start>
  
  return USBD_OK;  
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b002      	add	sp, #8
 80042bc:	bd80      	pop	{r7, pc}

080042be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	000a      	movs	r2, r1
 80042da:	1cfb      	adds	r3, r7, #3
 80042dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80042de:	230f      	movs	r3, #15
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	2202      	movs	r2, #2
 80042e4:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	2385      	movs	r3, #133	; 0x85
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	58d3      	ldr	r3, [r2, r3]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00f      	beq.n	8004312 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	2385      	movs	r3, #133	; 0x85
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	58d3      	ldr	r3, [r2, r3]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1cfa      	adds	r2, r7, #3
 80042fe:	7811      	ldrb	r1, [r2, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	0010      	movs	r0, r2
 8004304:	4798      	blx	r3
 8004306:	1e03      	subs	r3, r0, #0
 8004308:	d103      	bne.n	8004312 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800430a:	230f      	movs	r3, #15
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 8004312:	230f      	movs	r3, #15
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}

08004320 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	000a      	movs	r2, r1
 800432a:	1cfb      	adds	r3, r7, #3
 800432c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	2385      	movs	r3, #133	; 0x85
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	58d3      	ldr	r3, [r2, r3]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	1cfa      	adds	r2, r7, #3
 800433a:	7811      	ldrb	r1, [r2, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	0010      	movs	r0, r2
 8004340:	4798      	blx	r3
  return USBD_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2282      	movs	r2, #130	; 0x82
 800435a:	0092      	lsls	r2, r2, #2
 800435c:	4694      	mov	ip, r2
 800435e:	4463      	add	r3, ip
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f000 fe34 	bl	8004fd2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	23fa      	movs	r3, #250	; 0xfa
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	2101      	movs	r1, #1
 8004372:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <USBD_LL_SetupStage+0xb4>)
 8004378:	5a9b      	ldrh	r3, [r3, r2]
 800437a:	0019      	movs	r1, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	23fc      	movs	r3, #252	; 0xfc
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	2382      	movs	r3, #130	; 0x82
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	001a      	movs	r2, r3
 800438e:	231f      	movs	r3, #31
 8004390:	4013      	ands	r3, r2
 8004392:	2b01      	cmp	r3, #1
 8004394:	d00d      	beq.n	80043b2 <USBD_LL_SetupStage+0x66>
 8004396:	2b02      	cmp	r3, #2
 8004398:	d015      	beq.n	80043c6 <USBD_LL_SetupStage+0x7a>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11d      	bne.n	80043da <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2282      	movs	r2, #130	; 0x82
 80043a2:	0092      	lsls	r2, r2, #2
 80043a4:	189a      	adds	r2, r3, r2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0011      	movs	r1, r2
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 f9be 	bl	800472c <USBD_StdDevReq>
    break;
 80043b0:	e020      	b.n	80043f4 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2282      	movs	r2, #130	; 0x82
 80043b6:	0092      	lsls	r2, r2, #2
 80043b8:	189a      	adds	r2, r3, r2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0011      	movs	r1, r2
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fa08 	bl	80047d4 <USBD_StdItfReq>
    break;
 80043c4:	e016      	b.n	80043f4 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2282      	movs	r2, #130	; 0x82
 80043ca:	0092      	lsls	r2, r2, #2
 80043cc:	189a      	adds	r2, r3, r2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0011      	movs	r1, r2
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 fa3d 	bl	8004852 <USBD_StdEPReq>
    break;
 80043d8:	e00c      	b.n	80043f4 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	2382      	movs	r3, #130	; 0x82
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	227f      	movs	r2, #127	; 0x7f
 80043e4:	4393      	bics	r3, r2
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0011      	movs	r1, r2
 80043ec:	0018      	movs	r0, r3
 80043ee:	f001 fb99 	bl	8005b24 <USBD_LL_StallEP>
    break;
 80043f2:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	0000020e 	.word	0x0000020e

08004404 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	200b      	movs	r0, #11
 8004410:	183b      	adds	r3, r7, r0
 8004412:	1c0a      	adds	r2, r1, #0
 8004414:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004416:	183b      	adds	r3, r7, r0
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13e      	bne.n	800449c <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3305      	adds	r3, #5
 8004422:	33ff      	adds	r3, #255	; 0xff
 8004424:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	23fa      	movs	r3, #250	; 0xfa
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	58d3      	ldr	r3, [r2, r3]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d14c      	bne.n	80044cc <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	429a      	cmp	r2, r3
 800443c:	d914      	bls.n	8004468 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d900      	bls.n	800445a <USBD_LL_DataOutStage+0x56>
 8004458:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 800445a:	b292      	uxth	r2, r2
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fea4 	bl	80051ae <USBD_CtlContinueRx>
 8004466:	e031      	b.n	80044cc <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	2385      	movs	r3, #133	; 0x85
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	58d3      	ldr	r3, [r2, r3]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	23fe      	movs	r3, #254	; 0xfe
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800447e:	2b03      	cmp	r3, #3
 8004480:	d107      	bne.n	8004492 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	2385      	movs	r3, #133	; 0x85
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	58d3      	ldr	r3, [r2, r3]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	0010      	movs	r0, r2
 8004490:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fe9d 	bl	80051d4 <USBD_CtlSendStatus>
 800449a:	e017      	b.n	80044cc <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	2385      	movs	r3, #133	; 0x85
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	58d3      	ldr	r3, [r2, r3]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	23fe      	movs	r3, #254	; 0xfe
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d10a      	bne.n	80044cc <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	2385      	movs	r3, #133	; 0x85
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	58d3      	ldr	r3, [r2, r3]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	220b      	movs	r2, #11
 80044c2:	18ba      	adds	r2, r7, r2
 80044c4:	7811      	ldrb	r1, [r2, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	0010      	movs	r0, r2
 80044ca:	4798      	blx	r3
  }  
  return USBD_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b006      	add	sp, #24
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	200b      	movs	r0, #11
 80044e2:	183b      	adds	r3, r7, r0
 80044e4:	1c0a      	adds	r2, r1, #0
 80044e6:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80044e8:	183b      	adds	r3, r7, r0
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d000      	beq.n	80044f2 <USBD_LL_DataInStage+0x1c>
 80044f0:	e077      	b.n	80045e2 <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3314      	adds	r3, #20
 80044f6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	23fa      	movs	r3, #250	; 0xfa
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	58d3      	ldr	r3, [r2, r3]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d15e      	bne.n	80045c2 <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	429a      	cmp	r2, r3
 800450e:	d915      	bls.n	800453c <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004522:	b29a      	uxth	r2, r3
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	0018      	movs	r0, r3
 800452a:	f000 fe2d 	bl	8005188 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	2300      	movs	r3, #0
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	f001 fc01 	bl	8005d3c <USBD_LL_PrepareReceive>
 800453a:	e042      	b.n	80045c2 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0019      	movs	r1, r3
 8004546:	0010      	movs	r0, r2
 8004548:	f7fb fe6c 	bl	8000224 <__aeabi_uidivmod>
 800454c:	1e0b      	subs	r3, r1, #0
 800454e:	d11f      	bne.n	8004590 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004558:	429a      	cmp	r2, r3
 800455a:	d319      	bcc.n	8004590 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	23fc      	movs	r3, #252	; 0xfc
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8004568:	429a      	cmp	r2, r3
 800456a:	d211      	bcs.n	8004590 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	2100      	movs	r1, #0
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fe08 	bl	8005188 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	23fc      	movs	r3, #252	; 0xfc
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2100      	movs	r1, #0
 8004580:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	2300      	movs	r3, #0
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	f001 fbd7 	bl	8005d3c <USBD_LL_PrepareReceive>
 800458e:	e018      	b.n	80045c2 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	2385      	movs	r3, #133	; 0x85
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	58d3      	ldr	r3, [r2, r3]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	23fe      	movs	r3, #254	; 0xfe
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d107      	bne.n	80045ba <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	2385      	movs	r3, #133	; 0x85
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	58d3      	ldr	r3, [r2, r3]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	0010      	movs	r0, r2
 80045b8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fe1d 	bl	80051fc <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d121      	bne.n	8004612 <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7ff fe74 	bl	80042be <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	2100      	movs	r1, #0
 80045de:	54d1      	strb	r1, [r2, r3]
 80045e0:	e017      	b.n	8004612 <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	2385      	movs	r3, #133	; 0x85
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	58d3      	ldr	r3, [r2, r3]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	23fe      	movs	r3, #254	; 0xfe
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d10a      	bne.n	8004612 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	2385      	movs	r3, #133	; 0x85
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	58d3      	ldr	r3, [r2, r3]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	220b      	movs	r2, #11
 8004608:	18ba      	adds	r2, r7, r2
 800460a:	7811      	ldrb	r1, [r2, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	0010      	movs	r0, r2
 8004610:	4798      	blx	r3
  }  
  return USBD_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b006      	add	sp, #24
 800461a:	bd80      	pop	{r7, pc}

0800461c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	f001 fa0a 	bl	8005a44 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	2388      	movs	r3, #136	; 0x88
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	2200      	movs	r2, #0
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	f001 f9ff 	bl	8005a44 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	23fe      	movs	r3, #254	; 0xfe
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2101      	movs	r1, #1
 8004654:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	2386      	movs	r3, #134	; 0x86
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	58d3      	ldr	r3, [r2, r3]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	2385      	movs	r3, #133	; 0x85
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	58d3      	ldr	r3, [r2, r3]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2d9      	uxtb	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	4790      	blx	r2
 
  
  return USBD_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}

08004682 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	000a      	movs	r2, r1
 800468c:	1cfb      	adds	r3, r7, #3
 800468e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	1cfa      	adds	r2, r7, #3
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	23fe      	movs	r3, #254	; 0xfe
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	5cd1      	ldrb	r1, [r2, r3]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	23fe      	movs	r3, #254	; 0xfe
 80046b6:	33ff      	adds	r3, #255	; 0xff
 80046b8:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	23fe      	movs	r3, #254	; 0xfe
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2104      	movs	r1, #4
 80046c2:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b002      	add	sp, #8
 80046cc:	bd80      	pop	{r7, pc}

080046ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	23fe      	movs	r3, #254	; 0xfe
 80046da:	33ff      	adds	r3, #255	; 0xff
 80046dc:	5cd1      	ldrb	r1, [r2, r3]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	23fe      	movs	r3, #254	; 0xfe
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	0018      	movs	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	23fe      	movs	r3, #254	; 0xfe
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d10e      	bne.n	8004722 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	2385      	movs	r3, #133	; 0x85
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	58d3      	ldr	r3, [r2, r3]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	2385      	movs	r3, #133	; 0x85
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	58d3      	ldr	r3, [r2, r3]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	0010      	movs	r0, r2
 8004720:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}

0800472c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004736:	230f      	movs	r3, #15
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b09      	cmp	r3, #9
 8004744:	d835      	bhi.n	80047b2 <USBD_StdDevReq+0x86>
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <USBD_StdDevReq+0xa4>)
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0011      	movs	r1, r2
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f992 	bl	8004a80 <USBD_GetDescriptor>
    break;
 800475c:	e030      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f000 fa95 	bl	8004c94 <USBD_SetAddress>
    break;
 800476a:	e029      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f000 fadc 	bl	8004d30 <USBD_SetConfig>
    break;
 8004778:	e022      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	0011      	movs	r1, r2
 8004780:	0018      	movs	r0, r3
 8004782:	f000 fb71 	bl	8004e68 <USBD_GetConfig>
    break;
 8004786:	e01b      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0011      	movs	r1, r2
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fba2 	bl	8004ed8 <USBD_GetStatus>
    break;
 8004794:	e014      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	0011      	movs	r1, r2
 800479c:	0018      	movs	r0, r3
 800479e:	f000 fbca 	bl	8004f36 <USBD_SetFeature>
    break;
 80047a2:	e00d      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0011      	movs	r1, r2
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fbe2 	bl	8004f74 <USBD_ClrFeature>
    break;
 80047b0:	e006      	b.n	80047c0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0011      	movs	r1, r2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 fc45 	bl	8005048 <USBD_CtlError>
    break;
 80047be:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 80047c0:	230f      	movs	r3, #15
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	781b      	ldrb	r3, [r3, #0]
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b004      	add	sp, #16
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	08006a40 	.word	0x08006a40

080047d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80047de:	230f      	movs	r3, #15
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	23fe      	movs	r3, #254	; 0xfe
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d122      	bne.n	8004838 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d816      	bhi.n	800482a <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	2385      	movs	r3, #133	; 0x85
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	58d3      	ldr	r3, [r2, r3]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	0010      	movs	r0, r2
 800480c:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	88db      	ldrh	r3, [r3, #6]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d117      	bne.n	8004846 <USBD_StdItfReq+0x72>
 8004816:	230f      	movs	r3, #15
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d112      	bne.n	8004846 <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 fcd6 	bl	80051d4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004828:	e00d      	b.n	8004846 <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0011      	movs	r1, r2
 8004830:	0018      	movs	r0, r3
 8004832:	f000 fc09 	bl	8005048 <USBD_CtlError>
    break;
 8004836:	e006      	b.n	8004846 <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0011      	movs	r1, r2
 800483e:	0018      	movs	r0, r3
 8004840:	f000 fc02 	bl	8005048 <USBD_CtlError>
    break;
 8004844:	e000      	b.n	8004848 <USBD_StdItfReq+0x74>
    break;
 8004846:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}

08004852 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800485c:	230f      	movs	r3, #15
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	889a      	ldrh	r2, [r3, #4]
 8004868:	230e      	movs	r3, #14
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	001a      	movs	r2, r3
 8004874:	2360      	movs	r3, #96	; 0x60
 8004876:	4013      	ands	r3, r2
 8004878:	2b20      	cmp	r3, #32
 800487a:	d10a      	bne.n	8004892 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	2385      	movs	r3, #133	; 0x85
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	58d3      	ldr	r3, [r2, r3]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	0010      	movs	r0, r2
 800488c:	4798      	blx	r3
    
    return USBD_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e0f1      	b.n	8004a76 <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d04e      	beq.n	8004938 <USBD_StdEPReq+0xe6>
 800489a:	2b03      	cmp	r3, #3
 800489c:	d003      	beq.n	80048a6 <USBD_StdEPReq+0x54>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d100      	bne.n	80048a4 <USBD_StdEPReq+0x52>
 80048a2:	e090      	b.n	80049c6 <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 80048a4:	e0e4      	b.n	8004a70 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	23fe      	movs	r3, #254	; 0xfe
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d002      	beq.n	80048b8 <USBD_StdEPReq+0x66>
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d013      	beq.n	80048de <USBD_StdEPReq+0x8c>
 80048b6:	e036      	b.n	8004926 <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80048b8:	230e      	movs	r3, #14
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d038      	beq.n	8004934 <USBD_StdEPReq+0xe2>
 80048c2:	230e      	movs	r3, #14
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d033      	beq.n	8004934 <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 80048cc:	230e      	movs	r3, #14
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f001 f924 	bl	8005b24 <USBD_LL_StallEP>
      break;	
 80048dc:	e02a      	b.n	8004934 <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	885b      	ldrh	r3, [r3, #2]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d111      	bne.n	800490a <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80048e6:	230e      	movs	r3, #14
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00c      	beq.n	800490a <USBD_StdEPReq+0xb8>
 80048f0:	230e      	movs	r3, #14
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d007      	beq.n	800490a <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 80048fa:	230e      	movs	r3, #14
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0011      	movs	r1, r2
 8004904:	0018      	movs	r0, r3
 8004906:	f001 f90d 	bl	8005b24 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	2385      	movs	r3, #133	; 0x85
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	58d3      	ldr	r3, [r2, r3]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	0010      	movs	r0, r2
 800491a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	0018      	movs	r0, r3
 8004920:	f000 fc58 	bl	80051d4 <USBD_CtlSendStatus>
      break;
 8004924:	e007      	b.n	8004936 <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f000 fb8b 	bl	8005048 <USBD_CtlError>
      break;    
 8004932:	e000      	b.n	8004936 <USBD_StdEPReq+0xe4>
      break;	
 8004934:	46c0      	nop			; (mov r8, r8)
    break;
 8004936:	e09b      	b.n	8004a70 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	23fe      	movs	r3, #254	; 0xfe
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d002      	beq.n	800494a <USBD_StdEPReq+0xf8>
 8004944:	2b03      	cmp	r3, #3
 8004946:	d013      	beq.n	8004970 <USBD_StdEPReq+0x11e>
 8004948:	e032      	b.n	80049b0 <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800494a:	230e      	movs	r3, #14
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <USBD_StdEPReq+0x16c>
 8004954:	230e      	movs	r3, #14
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d02f      	beq.n	80049be <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 800495e:	230e      	movs	r3, #14
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0011      	movs	r1, r2
 8004968:	0018      	movs	r0, r3
 800496a:	f001 f8db 	bl	8005b24 <USBD_LL_StallEP>
      break;	
 800496e:	e026      	b.n	80049be <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	885b      	ldrh	r3, [r3, #2]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d124      	bne.n	80049c2 <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 8004978:	230e      	movs	r3, #14
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	227f      	movs	r2, #127	; 0x7f
 8004980:	4013      	ands	r3, r2
 8004982:	d010      	beq.n	80049a6 <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004984:	230e      	movs	r3, #14
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0011      	movs	r1, r2
 800498e:	0018      	movs	r0, r3
 8004990:	f001 f8fa 	bl	8005b88 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	2385      	movs	r3, #133	; 0x85
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	58d3      	ldr	r3, [r2, r3]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	0010      	movs	r0, r2
 80049a4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 fc13 	bl	80051d4 <USBD_CtlSendStatus>
      break;
 80049ae:	e008      	b.n	80049c2 <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0011      	movs	r1, r2
 80049b6:	0018      	movs	r0, r3
 80049b8:	f000 fb46 	bl	8005048 <USBD_CtlError>
      break;    
 80049bc:	e002      	b.n	80049c4 <USBD_StdEPReq+0x172>
      break;	
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	e056      	b.n	8004a70 <USBD_StdEPReq+0x21e>
      break;
 80049c2:	46c0      	nop			; (mov r8, r8)
    break;
 80049c4:	e054      	b.n	8004a70 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	23fe      	movs	r3, #254	; 0xfe
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	5cd3      	ldrb	r3, [r2, r3]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d002      	beq.n	80049d8 <USBD_StdEPReq+0x186>
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d00f      	beq.n	80049f6 <USBD_StdEPReq+0x1a4>
 80049d6:	e042      	b.n	8004a5e <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 80049d8:	230e      	movs	r3, #14
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	227f      	movs	r2, #127	; 0x7f
 80049e0:	4013      	ands	r3, r2
 80049e2:	d043      	beq.n	8004a6c <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 80049e4:	230e      	movs	r3, #14
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0011      	movs	r1, r2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f001 f898 	bl	8005b24 <USBD_LL_StallEP>
      break;	
 80049f4:	e03a      	b.n	8004a6c <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80049f6:	230e      	movs	r3, #14
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da0a      	bge.n	8004a18 <USBD_StdEPReq+0x1c6>
 8004a02:	230e      	movs	r3, #14
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	227f      	movs	r2, #127	; 0x7f
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	3304      	adds	r3, #4
 8004a16:	e009      	b.n	8004a2c <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004a18:	230e      	movs	r3, #14
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	227f      	movs	r2, #127	; 0x7f
 8004a20:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004a22:	3310      	adds	r3, #16
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004a2e:	230e      	movs	r3, #14
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0011      	movs	r1, r2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f001 f8d7 	bl	8005bec <USBD_LL_IsStallEP>
 8004a3e:	1e03      	subs	r3, r0, #0
 8004a40:	d003      	beq.n	8004a4a <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e002      	b.n	8004a50 <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004a50:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 fb76 	bl	8005148 <USBD_CtlSendData>
      break;
 8004a5c:	e007      	b.n	8004a6e <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 faef 	bl	8005048 <USBD_CtlError>
      break;
 8004a6a:	e000      	b.n	8004a6e <USBD_StdEPReq+0x21c>
      break;	
 8004a6c:	46c0      	nop			; (mov r8, r8)
    break;
 8004a6e:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8004a70:	230f      	movs	r3, #15
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	781b      	ldrb	r3, [r3, #0]
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d900      	bls.n	8004a98 <USBD_GetDescriptor+0x18>
 8004a96:	e0ce      	b.n	8004c36 <USBD_GetDescriptor+0x1b6>
 8004a98:	009a      	lsls	r2, r3, #2
 8004a9a:	4b7c      	ldr	r3, [pc, #496]	; (8004c8c <USBD_GetDescriptor+0x20c>)
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	2384      	movs	r3, #132	; 0x84
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	58d3      	ldr	r3, [r2, r3]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	7c12      	ldrb	r2, [r2, #16]
 8004ab0:	210a      	movs	r1, #10
 8004ab2:	1879      	adds	r1, r7, r1
 8004ab4:	0010      	movs	r0, r2
 8004ab6:	4798      	blx	r3
 8004ab8:	0003      	movs	r3, r0
 8004aba:	60fb      	str	r3, [r7, #12]
    break;
 8004abc:	e0c2      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	7c1b      	ldrb	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	2385      	movs	r3, #133	; 0x85
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	58d3      	ldr	r3, [r2, r3]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	18ba      	adds	r2, r7, r2
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	4798      	blx	r3
 8004ad8:	0003      	movs	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004ae4:	e0ae      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	2385      	movs	r3, #133	; 0x85
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	58d3      	ldr	r3, [r2, r3]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	220a      	movs	r2, #10
 8004af2:	18ba      	adds	r2, r7, r2
 8004af4:	0010      	movs	r0, r2
 8004af6:	4798      	blx	r3
 8004af8:	0003      	movs	r3, r0
 8004afa:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
    break;
 8004b04:	e09e      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	885b      	ldrh	r3, [r3, #2]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d858      	bhi.n	8004bc2 <USBD_GetDescriptor+0x142>
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <USBD_GetDescriptor+0x210>)
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	2384      	movs	r3, #132	; 0x84
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	58d3      	ldr	r3, [r2, r3]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	7c12      	ldrb	r2, [r2, #16]
 8004b28:	210a      	movs	r1, #10
 8004b2a:	1879      	adds	r1, r7, r1
 8004b2c:	0010      	movs	r0, r2
 8004b2e:	4798      	blx	r3
 8004b30:	0003      	movs	r3, r0
 8004b32:	60fb      	str	r3, [r7, #12]
      break;
 8004b34:	e04c      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	2384      	movs	r3, #132	; 0x84
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	58d3      	ldr	r3, [r2, r3]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	7c12      	ldrb	r2, [r2, #16]
 8004b44:	210a      	movs	r1, #10
 8004b46:	1879      	adds	r1, r7, r1
 8004b48:	0010      	movs	r0, r2
 8004b4a:	4798      	blx	r3
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]
      break;
 8004b50:	e03e      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	2384      	movs	r3, #132	; 0x84
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	58d3      	ldr	r3, [r2, r3]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	7c12      	ldrb	r2, [r2, #16]
 8004b60:	210a      	movs	r1, #10
 8004b62:	1879      	adds	r1, r7, r1
 8004b64:	0010      	movs	r0, r2
 8004b66:	4798      	blx	r3
 8004b68:	0003      	movs	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]
      break;
 8004b6c:	e030      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	2384      	movs	r3, #132	; 0x84
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	58d3      	ldr	r3, [r2, r3]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	7c12      	ldrb	r2, [r2, #16]
 8004b7c:	210a      	movs	r1, #10
 8004b7e:	1879      	adds	r1, r7, r1
 8004b80:	0010      	movs	r0, r2
 8004b82:	4798      	blx	r3
 8004b84:	0003      	movs	r3, r0
 8004b86:	60fb      	str	r3, [r7, #12]
      break;
 8004b88:	e022      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	2384      	movs	r3, #132	; 0x84
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	58d3      	ldr	r3, [r2, r3]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	7c12      	ldrb	r2, [r2, #16]
 8004b98:	210a      	movs	r1, #10
 8004b9a:	1879      	adds	r1, r7, r1
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	4798      	blx	r3
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	60fb      	str	r3, [r7, #12]
      break;
 8004ba4:	e014      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	2384      	movs	r3, #132	; 0x84
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	58d3      	ldr	r3, [r2, r3]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	7c12      	ldrb	r2, [r2, #16]
 8004bb4:	210a      	movs	r1, #10
 8004bb6:	1879      	adds	r1, r7, r1
 8004bb8:	0010      	movs	r0, r2
 8004bba:	4798      	blx	r3
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	60fb      	str	r3, [r7, #12]
      break;
 8004bc0:	e006      	b.n	8004bd0 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fa3d 	bl	8005048 <USBD_CtlError>
      return;
 8004bce:	e059      	b.n	8004c84 <USBD_GetDescriptor+0x204>
#endif   
    }
    break;
 8004bd0:	e038      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7c1b      	ldrb	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	2385      	movs	r3, #133	; 0x85
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	58d3      	ldr	r3, [r2, r3]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	220a      	movs	r2, #10
 8004be6:	18ba      	adds	r2, r7, r2
 8004be8:	0010      	movs	r0, r2
 8004bea:	4798      	blx	r3
 8004bec:	0003      	movs	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]
      break;
 8004bf0:	e028      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fa25 	bl	8005048 <USBD_CtlError>
      return;
 8004bfe:	e041      	b.n	8004c84 <USBD_GetDescriptor+0x204>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	7c1b      	ldrb	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	2385      	movs	r3, #133	; 0x85
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	58d3      	ldr	r3, [r2, r3]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	220a      	movs	r2, #10
 8004c14:	18ba      	adds	r2, r7, r2
 8004c16:	0010      	movs	r0, r2
 8004c18:	4798      	blx	r3
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	2207      	movs	r2, #7
 8004c24:	701a      	strb	r2, [r3, #0]
      break; 
 8004c26:	e00d      	b.n	8004c44 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0011      	movs	r1, r2
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 fa0a 	bl	8005048 <USBD_CtlError>
      return;
 8004c34:	e026      	b.n	8004c84 <USBD_GetDescriptor+0x204>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 fa03 	bl	8005048 <USBD_CtlError>
    return;
 8004c42:	e01f      	b.n	8004c84 <USBD_GetDescriptor+0x204>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004c44:	230a      	movs	r3, #10
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01a      	beq.n	8004c84 <USBD_GetDescriptor+0x204>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	88db      	ldrh	r3, [r3, #6]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <USBD_GetDescriptor+0x204>
  {
    
    len = MIN(len , req->wLength);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	88da      	ldrh	r2, [r3, #6]
 8004c5a:	230a      	movs	r3, #10
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	1c18      	adds	r0, r3, #0
 8004c62:	1c11      	adds	r1, r2, #0
 8004c64:	b28a      	uxth	r2, r1
 8004c66:	b283      	uxth	r3, r0
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d900      	bls.n	8004c6e <USBD_GetDescriptor+0x1ee>
 8004c6c:	1c01      	adds	r1, r0, #0
 8004c6e:	b28a      	uxth	r2, r1
 8004c70:	210a      	movs	r1, #10
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f000 fa62 	bl	8005148 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	08006a68 	.word	0x08006a68
 8004c90:	08006a88 	.word	0x08006a88

08004c94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	889b      	ldrh	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d13a      	bne.n	8004d1c <USBD_SetAddress+0x88>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	88db      	ldrh	r3, [r3, #6]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d136      	bne.n	8004d1c <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	885b      	ldrh	r3, [r3, #2]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	230f      	movs	r3, #15
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	217f      	movs	r1, #127	; 0x7f
 8004cba:	400a      	ands	r2, r1
 8004cbc:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	23fe      	movs	r3, #254	; 0xfe
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d106      	bne.n	8004cd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0011      	movs	r1, r2
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 f9b9 	bl	8005048 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004cd6:	e027      	b.n	8004d28 <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	240f      	movs	r4, #15
 8004cdc:	1939      	adds	r1, r7, r4
 8004cde:	23ff      	movs	r3, #255	; 0xff
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	7809      	ldrb	r1, [r1, #0]
 8004ce4:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 ffb4 	bl	8005c5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 fa6c 	bl	80051d4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	23fe      	movs	r3, #254	; 0xfe
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004d0e:	e00b      	b.n	8004d28 <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	23fe      	movs	r3, #254	; 0xfe
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	2101      	movs	r1, #1
 8004d18:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004d1a:	e005      	b.n	8004d28 <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	0011      	movs	r1, r2
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 f990 	bl	8005048 <USBD_CtlError>
  } 
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b005      	add	sp, #20
 8004d2e:	bd90      	pop	{r4, r7, pc}

08004d30 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	885b      	ldrh	r3, [r3, #2]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <USBD_SetConfig+0x134>)
 8004d42:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004d44:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <USBD_SetConfig+0x134>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d906      	bls.n	8004d5a <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0011      	movs	r1, r2
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 f978 	bl	8005048 <USBD_CtlError>
 8004d58:	e081      	b.n	8004e5e <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	23fe      	movs	r3, #254	; 0xfe
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	5cd3      	ldrb	r3, [r2, r3]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d002      	beq.n	8004d6c <USBD_SetConfig+0x3c>
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d029      	beq.n	8004dbe <USBD_SetConfig+0x8e>
 8004d6a:	e071      	b.n	8004e50 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004d6c:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <USBD_SetConfig+0x134>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01f      	beq.n	8004db4 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <USBD_SetConfig+0x134>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	001a      	movs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	23fe      	movs	r3, #254	; 0xfe
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2103      	movs	r1, #3
 8004d86:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <USBD_SetConfig+0x134>)
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff fa9d 	bl	80042d0 <USBD_SetClassConfig>
 8004d96:	0003      	movs	r3, r0
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d106      	bne.n	8004daa <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0011      	movs	r1, r2
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 f950 	bl	8005048 <USBD_CtlError>
          return;
 8004da8:	e059      	b.n	8004e5e <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 fa11 	bl	80051d4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004db2:	e054      	b.n	8004e5e <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fa0c 	bl	80051d4 <USBD_CtlSendStatus>
      break;
 8004dbc:	e04f      	b.n	8004e5e <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <USBD_SetConfig+0x134>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	23fe      	movs	r3, #254	; 0xfe
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2102      	movs	r1, #2
 8004dce:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <USBD_SetConfig+0x134>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <USBD_SetConfig+0x134>)
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0011      	movs	r1, r2
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7ff fa9c 	bl	8004320 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f9f2 	bl	80051d4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004df0:	e035      	b.n	8004e5e <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <USBD_SetConfig+0x134>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	001a      	movs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d022      	beq.n	8004e46 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0011      	movs	r1, r2
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7ff fa88 	bl	8004320 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004e10:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <USBD_SetConfig+0x134>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	001a      	movs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <USBD_SetConfig+0x134>)
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7ff fa54 	bl	80042d0 <USBD_SetClassConfig>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d106      	bne.n	8004e3c <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0011      	movs	r1, r2
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 f907 	bl	8005048 <USBD_CtlError>
          return;
 8004e3a:	e010      	b.n	8004e5e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 f9c8 	bl	80051d4 <USBD_CtlSendStatus>
      break;
 8004e44:	e00b      	b.n	8004e5e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f000 f9c3 	bl	80051d4 <USBD_CtlSendStatus>
      break;
 8004e4e:	e006      	b.n	8004e5e <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 f8f6 	bl	8005048 <USBD_CtlError>
      break;
 8004e5c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000194 	.word	0x20000194

08004e68 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	88db      	ldrh	r3, [r3, #6]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d006      	beq.n	8004e88 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0011      	movs	r1, r2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f000 f8e1 	bl	8005048 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004e86:	e023      	b.n	8004ed0 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	23fe      	movs	r3, #254	; 0xfe
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d002      	beq.n	8004e9a <USBD_GetConfig+0x32>
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d00c      	beq.n	8004eb2 <USBD_GetConfig+0x4a>
 8004e98:	e013      	b.n	8004ec2 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 f94c 	bl	8005148 <USBD_CtlSendData>
      break;
 8004eb0:	e00e      	b.n	8004ed0 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 f944 	bl	8005148 <USBD_CtlSendData>
      break;
 8004ec0:	e006      	b.n	8004ed0 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f000 f8bd 	bl	8005048 <USBD_CtlError>
      break;
 8004ece:	46c0      	nop			; (mov r8, r8)
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	23fe      	movs	r3, #254	; 0xfe
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	5cd3      	ldrb	r3, [r2, r3]
 8004eea:	3b02      	subs	r3, #2
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d817      	bhi.n	8004f20 <USBD_GetStatus+0x48>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	2381      	movs	r3, #129	; 0x81
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	58d3      	ldr	r3, [r2, r3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2202      	movs	r2, #2
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	330c      	adds	r3, #12
 8004f12:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f915 	bl	8005148 <USBD_CtlSendData>
                      2);
    break;
 8004f1e:	e006      	b.n	8004f2e <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0011      	movs	r1, r2
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 f88e 	bl	8005048 <USBD_CtlError>
    break;
 8004f2c:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b002      	add	sp, #8
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	885b      	ldrh	r3, [r3, #2]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d111      	bne.n	8004f6c <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	2381      	movs	r3, #129	; 0x81
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	2101      	movs	r1, #1
 8004f50:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	2385      	movs	r3, #133	; 0x85
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	58d3      	ldr	r3, [r2, r3]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	0010      	movs	r0, r2
 8004f62:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 f934 	bl	80051d4 <USBD_CtlSendStatus>
  }

}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	23fe      	movs	r3, #254	; 0xfe
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	5cd3      	ldrb	r3, [r2, r3]
 8004f86:	3b02      	subs	r3, #2
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d816      	bhi.n	8004fba <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	885b      	ldrh	r3, [r3, #2]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d119      	bne.n	8004fc8 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	2381      	movs	r3, #129	; 0x81
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	2385      	movs	r3, #133	; 0x85
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	58d3      	ldr	r3, [r2, r3]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	0010      	movs	r0, r2
 8004fae:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f000 f90e 	bl	80051d4 <USBD_CtlSendStatus>
    }
    break;
 8004fb8:	e006      	b.n	8004fc8 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f000 f841 	bl	8005048 <USBD_CtlError>
    break;
 8004fc6:	e000      	b.n	8004fca <USBD_ClrFeature+0x56>
    break;
 8004fc8:	46c0      	nop			; (mov r8, r8)
  }
}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b002      	add	sp, #8
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	785a      	ldrb	r2, [r3, #1]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3302      	adds	r3, #2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	3303      	adds	r3, #3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	18d3      	adds	r3, r2, r3
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	3304      	adds	r3, #4
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	3305      	adds	r3, #5
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	b29b      	uxth	r3, r3
 800501c:	18d3      	adds	r3, r2, r3
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	3306      	adds	r3, #6
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b29a      	uxth	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	3307      	adds	r3, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	80da      	strh	r2, [r3, #6]

}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b002      	add	sp, #8
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fd64 	bl	8005b24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2100      	movs	r1, #0
 8005060:	0018      	movs	r0, r3
 8005062:	f000 fd5f 	bl	8005b24 <USBD_LL_StallEP>
}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b002      	add	sp, #8
 800506c:	bd80      	pop	{r7, pc}

0800506e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800506e:	b590      	push	{r4, r7, lr}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800507a:	2317      	movs	r3, #23
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d03e      	beq.n	8005106 <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 f83f 	bl	800510e <USBD_GetLen>
 8005090:	0003      	movs	r3, r0
 8005092:	3301      	adds	r3, #1
 8005094:	b29b      	uxth	r3, r3
 8005096:	18db      	adds	r3, r3, r3
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8819      	ldrh	r1, [r3, #0]
 80050a2:	2417      	movs	r4, #23
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	193a      	adds	r2, r7, r4
 80050aa:	1c58      	adds	r0, r3, #1
 80050ac:	7010      	strb	r0, [r2, #0]
 80050ae:	001a      	movs	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	b2ca      	uxtb	r2, r1
 80050b6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	193a      	adds	r2, r7, r4
 80050be:	1c59      	adds	r1, r3, #1
 80050c0:	7011      	strb	r1, [r2, #0]
 80050c2:	001a      	movs	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	2203      	movs	r2, #3
 80050ca:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80050cc:	e017      	b.n	80050fe <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	2417      	movs	r4, #23
 80050d6:	193a      	adds	r2, r7, r4
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	1939      	adds	r1, r7, r4
 80050dc:	1c50      	adds	r0, r2, #1
 80050de:	7008      	strb	r0, [r1, #0]
 80050e0:	0011      	movs	r1, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	1852      	adds	r2, r2, r1
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80050ea:	193b      	adds	r3, r7, r4
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	193a      	adds	r2, r7, r4
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	7011      	strb	r1, [r2, #0]
 80050f4:	001a      	movs	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <USBD_GetString+0x60>
    }
  } 
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b007      	add	sp, #28
 800510c:	bd90      	pop	{r4, r7, pc}

0800510e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005116:	230f      	movs	r3, #15
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 800511e:	e008      	b.n	8005132 <USBD_GetLen+0x24>
    {
        len++;
 8005120:	210f      	movs	r1, #15
 8005122:	187b      	adds	r3, r7, r1
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	187b      	adds	r3, r7, r1
 8005128:	3201      	adds	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
        buf++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3301      	adds	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f2      	bne.n	8005120 <USBD_GetLen+0x12>
    }

    return len;
 800513a:	230f      	movs	r3, #15
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	781b      	ldrb	r3, [r3, #0]
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}

08005148 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	23fa      	movs	r3, #250	; 0xfa
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2102      	movs	r1, #2
 800515e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8005160:	1dbb      	adds	r3, r7, #6
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005168:	1dbb      	adds	r3, r7, #6
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005170:	1dbb      	adds	r3, r7, #6
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	2100      	movs	r1, #0
 800517a:	f000 fda1 	bl	8005cc0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005196:	1dbb      	adds	r3, r7, #6
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	2100      	movs	r1, #0
 80051a0:	f000 fd8e 	bl	8005cc0 <USBD_LL_Transmit>
  
  return USBD_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}

080051ae <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	1dbb      	adds	r3, r7, #6
 80051ba:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 80051bc:	1dbb      	adds	r3, r7, #6
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	2100      	movs	r1, #0
 80051c6:	f000 fdb9 	bl	8005d3c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b004      	add	sp, #16
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	23fa      	movs	r3, #250	; 0xfa
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2104      	movs	r1, #4
 80051e4:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	2300      	movs	r3, #0
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	f000 fd67 	bl	8005cc0 <USBD_LL_Transmit>
  
  return USBD_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	23fa      	movs	r3, #250	; 0xfa
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2105      	movs	r1, #5
 800520c:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	2300      	movs	r3, #0
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	f000 fd91 	bl	8005d3c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b002      	add	sp, #8
 8005222:	bd80      	pop	{r7, pc}

08005224 <log_comm>:
extern UART_HandleTypeDef 	huart1;

uint8_t        			buf[128];
uint32_t	   		cnt = 0;

void log_comm( const char* info) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	snprintf((char *)buf, sizeof(buf)-1, "%s\n\r", info);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <log_comm+0x34>)
 8005230:	480a      	ldr	r0, [pc, #40]	; (800525c <log_comm+0x38>)
 8005232:	217f      	movs	r1, #127	; 0x7f
 8005234:	f000 ffa6 	bl	8006184 <sniprintf>
	HAL_UART_Transmit(&huart1, buf, strlen((const char *)buf), 100);
 8005238:	4b08      	ldr	r3, [pc, #32]	; (800525c <log_comm+0x38>)
 800523a:	0018      	movs	r0, r3
 800523c:	f7fa ff64 	bl	8000108 <strlen>
 8005240:	0003      	movs	r3, r0
 8005242:	b29a      	uxth	r2, r3
 8005244:	4905      	ldr	r1, [pc, #20]	; (800525c <log_comm+0x38>)
 8005246:	4806      	ldr	r0, [pc, #24]	; (8005260 <log_comm+0x3c>)
 8005248:	2364      	movs	r3, #100	; 0x64
 800524a:	f7fe fb05 	bl	8003858 <HAL_UART_Transmit>
/*	if ( HAL_OK != HAL_UART_Transmit(&huart1, buf, strlen((const char *)buf), 100)) {
		cnt--;
	}
*/
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	080069f0 	.word	0x080069f0
 800525c:	200001bc 	.word	0x200001bc
 8005260:	20000264 	.word	0x20000264

08005264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005268:	f7fa ffe2 	bl	8000230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800526c:	f000 f80a 	bl	8005284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005270:	f000 f8c8 	bl	8005404 <MX_GPIO_Init>
  MX_CAN_Init();
 8005274:	f000 f85e 	bl	8005334 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8005278:	f000 f892 	bl	80053a0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800527c:	f000 fa44 	bl	8005708 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005280:	e7fe      	b.n	8005280 <main+0x1c>
	...

08005284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b099      	sub	sp, #100	; 0x64
 8005288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800528a:	242c      	movs	r4, #44	; 0x2c
 800528c:	193b      	adds	r3, r7, r4
 800528e:	0018      	movs	r0, r3
 8005290:	2334      	movs	r3, #52	; 0x34
 8005292:	001a      	movs	r2, r3
 8005294:	2100      	movs	r1, #0
 8005296:	f000 ff6d 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800529a:	231c      	movs	r3, #28
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	0018      	movs	r0, r3
 80052a0:	2310      	movs	r3, #16
 80052a2:	001a      	movs	r2, r3
 80052a4:	2100      	movs	r1, #0
 80052a6:	f000 ff65 	bl	8006174 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052aa:	003b      	movs	r3, r7
 80052ac:	0018      	movs	r0, r3
 80052ae:	231c      	movs	r3, #28
 80052b0:	001a      	movs	r2, r3
 80052b2:	2100      	movs	r1, #0
 80052b4:	f000 ff5e 	bl	8006174 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	2220      	movs	r2, #32
 80052bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80052be:	193b      	adds	r3, r7, r4
 80052c0:	2201      	movs	r2, #1
 80052c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	2200      	movs	r2, #0
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fd fc63 	bl	8002b98 <HAL_RCC_OscConfig>
 80052d2:	1e03      	subs	r3, r0, #0
 80052d4:	d001      	beq.n	80052da <SystemClock_Config+0x56>
  {
    Error_Handler();
 80052d6:	f000 f8bb 	bl	8005450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80052da:	211c      	movs	r1, #28
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	2207      	movs	r2, #7
 80052e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	2203      	movs	r2, #3
 80052e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80052e8:	187b      	adds	r3, r7, r1
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	2200      	movs	r2, #0
 80052f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	2101      	movs	r1, #1
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fd ffad 	bl	8003258 <HAL_RCC_ClockConfig>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d001      	beq.n	8005306 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005302:	f000 f8a5 	bl	8005450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8005306:	003b      	movs	r3, r7
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <SystemClock_Config+0xac>)
 800530a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800530c:	003b      	movs	r3, r7
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005312:	003b      	movs	r3, r7
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005318:	003b      	movs	r3, r7
 800531a:	0018      	movs	r0, r3
 800531c:	f7fe f944 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 8005320:	1e03      	subs	r3, r0, #0
 8005322:	d001      	beq.n	8005328 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8005324:	f000 f894 	bl	8005450 <Error_Handler>
  }
}
 8005328:	46c0      	nop			; (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b019      	add	sp, #100	; 0x64
 800532e:	bd90      	pop	{r4, r7, pc}
 8005330:	00020001 	.word	0x00020001

08005334 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8005338:	4b17      	ldr	r3, [pc, #92]	; (8005398 <MX_CAN_Init+0x64>)
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <MX_CAN_Init+0x68>)
 800533c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <MX_CAN_Init+0x64>)
 8005340:	2210      	movs	r2, #16
 8005342:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8005344:	4b14      	ldr	r3, [pc, #80]	; (8005398 <MX_CAN_Init+0x64>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800534a:	4b13      	ldr	r3, [pc, #76]	; (8005398 <MX_CAN_Init+0x64>)
 800534c:	2200      	movs	r2, #0
 800534e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <MX_CAN_Init+0x64>)
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <MX_CAN_Init+0x64>)
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <MX_CAN_Init+0x64>)
 800535e:	2200      	movs	r2, #0
 8005360:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <MX_CAN_Init+0x64>)
 8005364:	2200      	movs	r2, #0
 8005366:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <MX_CAN_Init+0x64>)
 800536a:	2200      	movs	r2, #0
 800536c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <MX_CAN_Init+0x64>)
 8005370:	2200      	movs	r2, #0
 8005372:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <MX_CAN_Init+0x64>)
 8005376:	2200      	movs	r2, #0
 8005378:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <MX_CAN_Init+0x64>)
 800537c:	2200      	movs	r2, #0
 800537e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <MX_CAN_Init+0x64>)
 8005382:	0018      	movs	r0, r3
 8005384:	f7fa ff9a 	bl	80002bc <HAL_CAN_Init>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d001      	beq.n	8005390 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800538c:	f000 f860 	bl	8005450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	2000023c 	.word	0x2000023c
 800539c:	40006400 	.word	0x40006400

080053a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053a6:	4a15      	ldr	r2, [pc, #84]	; (80053fc <MX_USART1_UART_Init+0x5c>)
 80053a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1500000;
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <MX_USART1_UART_Init+0x60>)
 80053ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053bc:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053c4:	220c      	movs	r2, #12
 80053c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053dc:	2200      	movs	r2, #0
 80053de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <MX_USART1_UART_Init+0x58>)
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fe f9e0 	bl	80037a8 <HAL_UART_Init>
 80053e8:	1e03      	subs	r3, r0, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80053ec:	f000 f830 	bl	8005450 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	20000264 	.word	0x20000264
 80053fc:	40013800 	.word	0x40013800
 8005400:	0016e360 	.word	0x0016e360

08005404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <MX_GPIO_Init+0x48>)
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <MX_GPIO_Init+0x48>)
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	0289      	lsls	r1, r1, #10
 8005414:	430a      	orrs	r2, r1
 8005416:	615a      	str	r2, [r3, #20]
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <MX_GPIO_Init+0x48>)
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	4013      	ands	r3, r2
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <MX_GPIO_Init+0x48>)
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <MX_GPIO_Init+0x48>)
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	02c9      	lsls	r1, r1, #11
 8005430:	430a      	orrs	r2, r1
 8005432:	615a      	str	r2, [r3, #20]
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <MX_GPIO_Init+0x48>)
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	02db      	lsls	r3, r3, #11
 800543c:	4013      	ands	r3, r2
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	683b      	ldr	r3, [r7, #0]

}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b002      	add	sp, #8
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	40021000 	.word	0x40021000

08005450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005462:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_MspInit+0x44>)
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_MspInit+0x44>)
 8005468:	2101      	movs	r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
 800546e:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <HAL_MspInit+0x44>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2201      	movs	r2, #1
 8005474:	4013      	ands	r3, r2
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_MspInit+0x44>)
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_MspInit+0x44>)
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0549      	lsls	r1, r1, #21
 8005484:	430a      	orrs	r2, r1
 8005486:	61da      	str	r2, [r3, #28]
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_MspInit+0x44>)
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	055b      	lsls	r3, r3, #21
 8005490:	4013      	ands	r3, r2
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b002      	add	sp, #8
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ac:	2314      	movs	r3, #20
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	0018      	movs	r0, r3
 80054b2:	2314      	movs	r3, #20
 80054b4:	001a      	movs	r2, r3
 80054b6:	2100      	movs	r1, #0
 80054b8:	f000 fe5c 	bl	8006174 <memset>
  if(hcan->Instance==CAN)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_CAN_MspInit+0x90>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d132      	bne.n	800552c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	0489      	lsls	r1, r1, #18
 80054d0:	430a      	orrs	r2, r1
 80054d2:	61da      	str	r2, [r3, #28]
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	049b      	lsls	r3, r3, #18
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	02c9      	lsls	r1, r1, #11
 80054ec:	430a      	orrs	r2, r1
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_CAN_MspInit+0x94>)
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	02db      	lsls	r3, r3, #11
 80054f8:	4013      	ands	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80054fe:	2114      	movs	r1, #20
 8005500:	187b      	adds	r3, r7, r1
 8005502:	22c0      	movs	r2, #192	; 0xc0
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	187b      	adds	r3, r7, r1
 800550a:	2202      	movs	r2, #2
 800550c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	187b      	adds	r3, r7, r1
 8005510:	2200      	movs	r2, #0
 8005512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005514:	187b      	adds	r3, r7, r1
 8005516:	2203      	movs	r2, #3
 8005518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2204      	movs	r2, #4
 800551e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005520:	187b      	adds	r3, r7, r1
 8005522:	4a06      	ldr	r2, [pc, #24]	; (800553c <HAL_CAN_MspInit+0x98>)
 8005524:	0019      	movs	r1, r3
 8005526:	0010      	movs	r0, r2
 8005528:	f7fb f8a0 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b00a      	add	sp, #40	; 0x28
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40006400 	.word	0x40006400
 8005538:	40021000 	.word	0x40021000
 800553c:	48000400 	.word	0x48000400

08005540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005548:	2314      	movs	r3, #20
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	0018      	movs	r0, r3
 800554e:	2314      	movs	r3, #20
 8005550:	001a      	movs	r2, r3
 8005552:	2100      	movs	r1, #0
 8005554:	f000 fe0e 	bl	8006174 <memset>
  if(huart->Instance==USART1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_UART_MspInit+0x94>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d133      	bne.n	80055ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	01c9      	lsls	r1, r1, #7
 800556c:	430a      	orrs	r2, r1
 800556e:	619a      	str	r2, [r3, #24]
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557e:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	0289      	lsls	r1, r1, #10
 8005588:	430a      	orrs	r2, r1
 800558a:	615a      	str	r2, [r3, #20]
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_UART_MspInit+0x98>)
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	029b      	lsls	r3, r3, #10
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800559a:	2114      	movs	r1, #20
 800559c:	187b      	adds	r3, r7, r1
 800559e:	22c0      	movs	r2, #192	; 0xc0
 80055a0:	00d2      	lsls	r2, r2, #3
 80055a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2202      	movs	r2, #2
 80055a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	2200      	movs	r2, #0
 80055ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	2203      	movs	r2, #3
 80055b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80055b6:	187b      	adds	r3, r7, r1
 80055b8:	2201      	movs	r2, #1
 80055ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	187a      	adds	r2, r7, r1
 80055be:	2390      	movs	r3, #144	; 0x90
 80055c0:	05db      	lsls	r3, r3, #23
 80055c2:	0011      	movs	r1, r2
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7fb f851 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b00a      	add	sp, #40	; 0x28
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	40013800 	.word	0x40013800
 80055d8:	40021000 	.word	0x40021000

080055dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055ea:	e7fe      	b.n	80055ea <HardFault_Handler+0x4>

080055ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005604:	f7fa fe44 	bl	8000290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <USB_IRQHandler+0x14>)
 8005616:	0018      	movs	r0, r3
 8005618:	f7fb faac 	bl	8000b74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	200004f8 	.word	0x200004f8

08005628 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <_sbrk+0x50>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d102      	bne.n	800563e <_sbrk+0x16>
		heap_end = &end;
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <_sbrk+0x50>)
 800563a:	4a10      	ldr	r2, [pc, #64]	; (800567c <_sbrk+0x54>)
 800563c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800563e:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <_sbrk+0x50>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <_sbrk+0x50>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	18d3      	adds	r3, r2, r3
 800564c:	466a      	mov	r2, sp
 800564e:	4293      	cmp	r3, r2
 8005650:	d907      	bls.n	8005662 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005652:	f000 fd65 	bl	8006120 <__errno>
 8005656:	0003      	movs	r3, r0
 8005658:	220c      	movs	r2, #12
 800565a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800565c:	2301      	movs	r3, #1
 800565e:	425b      	negs	r3, r3
 8005660:	e006      	b.n	8005670 <_sbrk+0x48>
	}

	heap_end += incr;
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <_sbrk+0x50>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	18d2      	adds	r2, r2, r3
 800566a:	4b03      	ldr	r3, [pc, #12]	; (8005678 <_sbrk+0x50>)
 800566c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000198 	.word	0x20000198
 800567c:	20000920 	.word	0x20000920

08005680 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005684:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <SystemInit+0x70>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <SystemInit+0x70>)
 800568a:	2101      	movs	r1, #1
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <SystemInit+0x70>)
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <SystemInit+0x70>)
 8005696:	4917      	ldr	r1, [pc, #92]	; (80056f4 <SystemInit+0x74>)
 8005698:	400a      	ands	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <SystemInit+0x70>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <SystemInit+0x70>)
 80056a2:	4915      	ldr	r1, [pc, #84]	; (80056f8 <SystemInit+0x78>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <SystemInit+0x70>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <SystemInit+0x70>)
 80056ae:	4913      	ldr	r1, [pc, #76]	; (80056fc <SystemInit+0x7c>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <SystemInit+0x70>)
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <SystemInit+0x70>)
 80056ba:	4911      	ldr	r1, [pc, #68]	; (8005700 <SystemInit+0x80>)
 80056bc:	400a      	ands	r2, r1
 80056be:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <SystemInit+0x70>)
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <SystemInit+0x70>)
 80056c6:	210f      	movs	r1, #15
 80056c8:	438a      	bics	r2, r1
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <SystemInit+0x70>)
 80056ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <SystemInit+0x70>)
 80056d2:	490c      	ldr	r1, [pc, #48]	; (8005704 <SystemInit+0x84>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <SystemInit+0x70>)
 80056da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <SystemInit+0x70>)
 80056de:	2101      	movs	r1, #1
 80056e0:	438a      	bics	r2, r1
 80056e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <SystemInit+0x70>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]

}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000
 80056f4:	08ffb80c 	.word	0x08ffb80c
 80056f8:	fef6ffff 	.word	0xfef6ffff
 80056fc:	fffbffff 	.word	0xfffbffff
 8005700:	ffc0ffff 	.word	0xffc0ffff
 8005704:	fffcfe2c 	.word	0xfffcfe2c

08005708 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  log_comm(__func__);
 800570c:	4b11      	ldr	r3, [pc, #68]	; (8005754 <MX_USB_DEVICE_Init+0x4c>)
 800570e:	0018      	movs	r0, r3
 8005710:	f7ff fd88 	bl	8005224 <log_comm>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005714:	4910      	ldr	r1, [pc, #64]	; (8005758 <MX_USB_DEVICE_Init+0x50>)
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <MX_USB_DEVICE_Init+0x54>)
 8005718:	2200      	movs	r2, #0
 800571a:	0018      	movs	r0, r3
 800571c:	f7fe fd70 	bl	8004200 <USBD_Init>
 8005720:	1e03      	subs	r3, r0, #0
 8005722:	d001      	beq.n	8005728 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005724:	f7ff fe94 	bl	8005450 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <MX_USB_DEVICE_Init+0x58>)
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <MX_USB_DEVICE_Init+0x54>)
 800572c:	0011      	movs	r1, r2
 800572e:	0018      	movs	r0, r3
 8005730:	f7fe fd97 	bl	8004262 <USBD_RegisterClass>
 8005734:	1e03      	subs	r3, r0, #0
 8005736:	d001      	beq.n	800573c <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 8005738:	f7ff fe8a 	bl	8005450 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <MX_USB_DEVICE_Init+0x54>)
 800573e:	0018      	movs	r0, r3
 8005740:	f7fe fdb0 	bl	80042a4 <USBD_Start>
 8005744:	1e03      	subs	r3, r0, #0
 8005746:	d001      	beq.n	800574c <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8005748:	f7ff fe82 	bl	8005450 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	08006ab8 	.word	0x08006ab8
 8005758:	200000c4 	.word	0x200000c4
 800575c:	200002d4 	.word	0x200002d4
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  log_comm(__func__);
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_PCD_MspInit+0x50>)
 800576e:	0018      	movs	r0, r3
 8005770:	f7ff fd58 	bl	8005224 <log_comm>
  if(pcdHandle->Instance==USB)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <HAL_PCD_MspInit+0x54>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d115      	bne.n	80057aa <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <HAL_PCD_MspInit+0x58>)
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <HAL_PCD_MspInit+0x58>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	0409      	lsls	r1, r1, #16
 8005788:	430a      	orrs	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_PCD_MspInit+0x58>)
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	201f      	movs	r0, #31
 80057a0:	f7fa ff32 	bl	8000608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80057a4:	201f      	movs	r0, #31
 80057a6:	f7fa ff44 	bl	8000632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b004      	add	sp, #16
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	08006acc 	.word	0x08006acc
 80057b8:	40005c00 	.word	0x40005c00
 80057bc:	40021000 	.word	0x40021000

080057c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	2387      	movs	r3, #135	; 0x87
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	58d2      	ldr	r2, [r2, r3]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	33ed      	adds	r3, #237	; 0xed
 80057d4:	33ff      	adds	r3, #255	; 0xff
 80057d6:	0019      	movs	r1, r3
 80057d8:	0010      	movs	r0, r2
 80057da:	f7fe fdb7 	bl	800434c <USBD_LL_SetupStage>
}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b002      	add	sp, #8
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057e6:	b590      	push	{r4, r7, lr}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	000a      	movs	r2, r1
 80057f0:	1cfb      	adds	r3, r7, #3
 80057f2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	2387      	movs	r3, #135	; 0x87
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	58d4      	ldr	r4, [r2, r3]
 80057fc:	1cfb      	adds	r3, r7, #3
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	238c      	movs	r3, #140	; 0x8c
 8005804:	0059      	lsls	r1, r3, #1
 8005806:	0013      	movs	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	18c3      	adds	r3, r0, r3
 8005810:	185b      	adds	r3, r3, r1
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	1cfb      	adds	r3, r7, #3
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	0019      	movs	r1, r3
 800581a:	0020      	movs	r0, r4
 800581c:	f7fe fdf2 	bl	8004404 <USBD_LL_DataOutStage>
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b003      	add	sp, #12
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	000a      	movs	r2, r1
 8005832:	1cfb      	adds	r3, r7, #3
 8005834:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	2387      	movs	r3, #135	; 0x87
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	58d0      	ldr	r0, [r2, r3]
 800583e:	1cfb      	adds	r3, r7, #3
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	0013      	movs	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	18cb      	adds	r3, r1, r3
 800584e:	3338      	adds	r3, #56	; 0x38
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	1cfb      	adds	r3, r7, #3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	0019      	movs	r1, r3
 8005858:	f7fe fe3d 	bl	80044d6 <USBD_LL_DataInStage>
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b002      	add	sp, #8
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	2387      	movs	r3, #135	; 0x87
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	58d3      	ldr	r3, [r2, r3]
 8005874:	0018      	movs	r0, r3
 8005876:	f7fe ff3b 	bl	80046f0 <USBD_LL_SOF>
}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	46bd      	mov	sp, r7
 800587e:	b002      	add	sp, #8
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800588a:	230f      	movs	r3, #15
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d001      	beq.n	800589e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800589a:	f7ff fdd9 	bl	8005450 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	2387      	movs	r3, #135	; 0x87
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	58d2      	ldr	r2, [r2, r3]
 80058a6:	230f      	movs	r3, #15
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	0019      	movs	r1, r3
 80058ae:	0010      	movs	r0, r2
 80058b0:	f7fe fee7 	bl	8004682 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	2387      	movs	r3, #135	; 0x87
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	58d3      	ldr	r3, [r2, r3]
 80058bc:	0018      	movs	r0, r3
 80058be:	f7fe fead 	bl	800461c <USBD_LL_Reset>
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b004      	add	sp, #16
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	2387      	movs	r3, #135	; 0x87
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	58d3      	ldr	r3, [r2, r3]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7fe fee0 	bl	80046a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <HAL_PCD_SuspendCallback+0x34>)
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_PCD_SuspendCallback+0x34>)
 80058f0:	2106      	movs	r1, #6
 80058f2:	430a      	orrs	r2, r1
 80058f4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b002      	add	sp, #8
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_PCD_ResumeCallback+0x38>)
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_PCD_ResumeCallback+0x38>)
 800591a:	2106      	movs	r1, #6
 800591c:	438a      	bics	r2, r1
 800591e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8005920:	f000 fa5e 	bl	8005de0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	2387      	movs	r3, #135	; 0x87
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	58d3      	ldr	r3, [r2, r3]
 800592c:	0018      	movs	r0, r3
 800592e:	f7fe fece 	bl	80046ce <USBD_LL_Resume>
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	46bd      	mov	sp, r7
 8005936:	b002      	add	sp, #8
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	log_comm(__func__);
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <USBD_LL_Init+0xa0>)
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff fc6a 	bl	8005224 <log_comm>
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005950:	4a24      	ldr	r2, [pc, #144]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005952:	2387      	movs	r3, #135	; 0x87
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	2388      	movs	r3, #136	; 0x88
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4920      	ldr	r1, [pc, #128]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005962:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8005964:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005966:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <USBD_LL_Init+0xa8>)
 8005968:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <USBD_LL_Init+0xa4>)
 800596c:	2208      	movs	r2, #8
 800596e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005970:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005972:	2202      	movs	r2, #2
 8005974:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005978:	2202      	movs	r2, #2
 800597a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <USBD_LL_Init+0xa4>)
 800597e:	2200      	movs	r2, #0
 8005980:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005984:	2200      	movs	r2, #0
 8005986:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <USBD_LL_Init+0xa4>)
 800598a:	2200      	movs	r2, #0
 800598c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <USBD_LL_Init+0xa4>)
 8005990:	0018      	movs	r0, r3
 8005992:	f7fa ffe7 	bl	8000964 <HAL_PCD_Init>
 8005996:	1e03      	subs	r3, r0, #0
 8005998:	d001      	beq.n	800599e <USBD_LL_Init+0x5e>
  {
    Error_Handler( );
 800599a:	f7ff fd59 	bl	8005450 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	2388      	movs	r3, #136	; 0x88
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	58d0      	ldr	r0, [r2, r3]
 80059a6:	2318      	movs	r3, #24
 80059a8:	2200      	movs	r2, #0
 80059aa:	2100      	movs	r1, #0
 80059ac:	f7fd f8a6 	bl	8002afc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	2388      	movs	r3, #136	; 0x88
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	58d0      	ldr	r0, [r2, r3]
 80059b8:	2358      	movs	r3, #88	; 0x58
 80059ba:	2200      	movs	r2, #0
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	f7fd f89d 	bl	8002afc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	2388      	movs	r3, #136	; 0x88
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	58d0      	ldr	r0, [r2, r3]
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	2200      	movs	r2, #0
 80059d0:	2181      	movs	r1, #129	; 0x81
 80059d2:	f7fd f893 	bl	8002afc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	0018      	movs	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	b002      	add	sp, #8
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	08006adc 	.word	0x08006adc
 80059e4:	200004f8 	.word	0x200004f8
 80059e8:	40005c00 	.word	0x40005c00

080059ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059f4:	240f      	movs	r4, #15
 80059f6:	193b      	adds	r3, r7, r4
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059fc:	260e      	movs	r6, #14
 80059fe:	19bb      	adds	r3, r7, r6
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
  log_comm(__func__);
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <USBD_LL_Start+0x54>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff fc0c 	bl	8005224 <log_comm>
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	2388      	movs	r3, #136	; 0x88
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	58d3      	ldr	r3, [r2, r3]
 8005a14:	0025      	movs	r5, r4
 8005a16:	193c      	adds	r4, r7, r4
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f7fb f893 	bl	8000b44 <HAL_PCD_Start>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a22:	19bc      	adds	r4, r7, r6
 8005a24:	197b      	adds	r3, r7, r5
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f000 f9e0 	bl	8005dee <USBD_Get_USB_Status>
 8005a2e:	0003      	movs	r3, r0
 8005a30:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8005a32:	19bb      	adds	r3, r7, r6
 8005a34:	781b      	ldrb	r3, [r3, #0]
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b005      	add	sp, #20
 8005a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	08006aec 	.word	0x08006aec

08005a44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	000c      	movs	r4, r1
 8005a4e:	0010      	movs	r0, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	1cfb      	adds	r3, r7, #3
 8005a54:	1c22      	adds	r2, r4, #0
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	1cbb      	adds	r3, r7, #2
 8005a5a:	1c02      	adds	r2, r0, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	003b      	movs	r3, r7
 8005a60:	1c0a      	adds	r2, r1, #0
 8005a62:	801a      	strh	r2, [r3, #0]
	log_comm(__func__);
 8005a64:	4b15      	ldr	r3, [pc, #84]	; (8005abc <USBD_LL_OpenEP+0x78>)
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7ff fbdc 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a6c:	260f      	movs	r6, #15
 8005a6e:	19bb      	adds	r3, r7, r6
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a74:	250e      	movs	r5, #14
 8005a76:	197b      	adds	r3, r7, r5
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	2388      	movs	r3, #136	; 0x88
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	58d0      	ldr	r0, [r2, r3]
 8005a84:	19bc      	adds	r4, r7, r6
 8005a86:	1cbb      	adds	r3, r7, #2
 8005a88:	781d      	ldrb	r5, [r3, #0]
 8005a8a:	003b      	movs	r3, r7
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	1cfb      	adds	r3, r7, #3
 8005a90:	7819      	ldrb	r1, [r3, #0]
 8005a92:	002b      	movs	r3, r5
 8005a94:	f7fb f9c4 	bl	8000e20 <HAL_PCD_EP_Open>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a9c:	250e      	movs	r5, #14
 8005a9e:	197c      	adds	r4, r7, r5
 8005aa0:	19bb      	adds	r3, r7, r6
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f9a2 	bl	8005dee <USBD_Get_USB_Status>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8005aae:	197b      	adds	r3, r7, r5
 8005ab0:	781b      	ldrb	r3, [r3, #0]
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b005      	add	sp, #20
 8005ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	08006afc 	.word	0x08006afc

08005ac0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	000a      	movs	r2, r1
 8005aca:	1cfb      	adds	r3, r7, #3
 8005acc:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <USBD_LL_CloseEP+0x60>)
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff fba7 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ade:	260e      	movs	r6, #14
 8005ae0:	19bb      	adds	r3, r7, r6
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	2388      	movs	r3, #136	; 0x88
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	58d2      	ldr	r2, [r2, r3]
 8005aee:	000d      	movs	r5, r1
 8005af0:	187c      	adds	r4, r7, r1
 8005af2:	1cfb      	adds	r3, r7, #3
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	0019      	movs	r1, r3
 8005af8:	0010      	movs	r0, r2
 8005afa:	f7fb fd2d 	bl	8001558 <HAL_PCD_EP_Close>
 8005afe:	0003      	movs	r3, r0
 8005b00:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b02:	19bc      	adds	r4, r7, r6
 8005b04:	0029      	movs	r1, r5
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f000 f96f 	bl	8005dee <USBD_Get_USB_Status>
 8005b10:	0003      	movs	r3, r0
 8005b12:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8005b14:	19bb      	adds	r3, r7, r6
 8005b16:	781b      	ldrb	r3, [r3, #0]
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b005      	add	sp, #20
 8005b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b20:	08006b0c 	.word	0x08006b0c

08005b24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	000a      	movs	r2, r1
 8005b2e:	1cfb      	adds	r3, r7, #3
 8005b30:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <USBD_LL_StallEP+0x60>)
 8005b34:	0018      	movs	r0, r3
 8005b36:	f7ff fb75 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b3a:	210f      	movs	r1, #15
 8005b3c:	187b      	adds	r3, r7, r1
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b42:	260e      	movs	r6, #14
 8005b44:	19bb      	adds	r3, r7, r6
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	2388      	movs	r3, #136	; 0x88
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	58d2      	ldr	r2, [r2, r3]
 8005b52:	000d      	movs	r5, r1
 8005b54:	187c      	adds	r4, r7, r1
 8005b56:	1cfb      	adds	r3, r7, #3
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	0010      	movs	r0, r2
 8005b5e:	f7fc fa31 	bl	8001fc4 <HAL_PCD_EP_SetStall>
 8005b62:	0003      	movs	r3, r0
 8005b64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b66:	19bc      	adds	r4, r7, r6
 8005b68:	0029      	movs	r1, r5
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f93d 	bl	8005dee <USBD_Get_USB_Status>
 8005b74:	0003      	movs	r3, r0
 8005b76:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005b78:	19bb      	adds	r3, r7, r6
 8005b7a:	781b      	ldrb	r3, [r3, #0]
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b005      	add	sp, #20
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b84:	08006b1c 	.word	0x08006b1c

08005b88 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	000a      	movs	r2, r1
 8005b92:	1cfb      	adds	r3, r7, #3
 8005b94:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <USBD_LL_ClearStallEP+0x60>)
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f7ff fb43 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b9e:	210f      	movs	r1, #15
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ba6:	260e      	movs	r6, #14
 8005ba8:	19bb      	adds	r3, r7, r6
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	2388      	movs	r3, #136	; 0x88
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	58d2      	ldr	r2, [r2, r3]
 8005bb6:	000d      	movs	r5, r1
 8005bb8:	187c      	adds	r4, r7, r1
 8005bba:	1cfb      	adds	r3, r7, #3
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	0010      	movs	r0, r2
 8005bc2:	f7fc fab5 	bl	8002130 <HAL_PCD_EP_ClrStall>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bca:	19bc      	adds	r4, r7, r6
 8005bcc:	0029      	movs	r1, r5
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 f90b 	bl	8005dee <USBD_Get_USB_Status>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8005bdc:	19bb      	adds	r3, r7, r6
 8005bde:	781b      	ldrb	r3, [r3, #0]
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b005      	add	sp, #20
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be8:	08006b2c 	.word	0x08006b2c

08005bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	000a      	movs	r2, r1
 8005bf6:	1cfb      	adds	r3, r7, #3
 8005bf8:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005bfa:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <USBD_LL_IsStallEP+0x6c>)
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7ff fb11 	bl	8005224 <log_comm>
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	2388      	movs	r3, #136	; 0x88
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005c0c:	1cfb      	adds	r3, r7, #3
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b25b      	sxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da0d      	bge.n	8005c32 <USBD_LL_IsStallEP+0x46>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005c16:	1cfb      	adds	r3, r7, #3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	227f      	movs	r2, #127	; 0x7f
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	202a      	movs	r0, #42	; 0x2a
 8005c22:	0013      	movs	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	18cb      	adds	r3, r1, r3
 8005c2c:	181b      	adds	r3, r3, r0
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	e00d      	b.n	8005c4e <USBD_LL_IsStallEP+0x62>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005c32:	1cfb      	adds	r3, r7, #3
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	227f      	movs	r2, #127	; 0x7f
 8005c38:	401a      	ands	r2, r3
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	2385      	movs	r3, #133	; 0x85
 8005c3e:	0059      	lsls	r1, r3, #1
 8005c40:	0013      	movs	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	18c3      	adds	r3, r0, r3
 8005c4a:	185b      	adds	r3, r3, r1
 8005c4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	08006b44 	.word	0x08006b44

08005c5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	000a      	movs	r2, r1
 8005c66:	1cfb      	adds	r3, r7, #3
 8005c68:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <USBD_LL_SetUSBAddress+0x60>)
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f7ff fad9 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c72:	210f      	movs	r1, #15
 8005c74:	187b      	adds	r3, r7, r1
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c7a:	260e      	movs	r6, #14
 8005c7c:	19bb      	adds	r3, r7, r6
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	2388      	movs	r3, #136	; 0x88
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	58d2      	ldr	r2, [r2, r3]
 8005c8a:	000d      	movs	r5, r1
 8005c8c:	187c      	adds	r4, r7, r1
 8005c8e:	1cfb      	adds	r3, r7, #3
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	0019      	movs	r1, r3
 8005c94:	0010      	movs	r0, r2
 8005c96:	f7fb f895 	bl	8000dc4 <HAL_PCD_SetAddress>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c9e:	19bc      	adds	r4, r7, r6
 8005ca0:	0029      	movs	r1, r5
 8005ca2:	187b      	adds	r3, r7, r1
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f000 f8a1 	bl	8005dee <USBD_Get_USB_Status>
 8005cac:	0003      	movs	r3, r0
 8005cae:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005cb0:	19bb      	adds	r3, r7, r6
 8005cb2:	781b      	ldrb	r3, [r3, #0]
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b005      	add	sp, #20
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	08006b58 	.word	0x08006b58

08005cc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	0008      	movs	r0, r1
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	0019      	movs	r1, r3
 8005cce:	230b      	movs	r3, #11
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	1c02      	adds	r2, r0, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	2408      	movs	r4, #8
 8005cd8:	193b      	adds	r3, r7, r4
 8005cda:	1c0a      	adds	r2, r1, #0
 8005cdc:	801a      	strh	r2, [r3, #0]
	log_comm(__func__);
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <USBD_LL_Transmit+0x78>)
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f7ff fa9f 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ce6:	2117      	movs	r1, #23
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cee:	2516      	movs	r5, #22
 8005cf0:	197b      	adds	r3, r7, r5
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	2388      	movs	r3, #136	; 0x88
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	58d0      	ldr	r0, [r2, r3]
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	881d      	ldrh	r5, [r3, #0]
 8005d02:	000e      	movs	r6, r1
 8005d04:	187c      	adds	r4, r7, r1
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	230b      	movs	r3, #11
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	7819      	ldrb	r1, [r3, #0]
 8005d0e:	002b      	movs	r3, r5
 8005d10:	f7fb ff9e 	bl	8001c50 <HAL_PCD_EP_Transmit>
 8005d14:	0003      	movs	r3, r0
 8005d16:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d18:	2516      	movs	r5, #22
 8005d1a:	197c      	adds	r4, r7, r5
 8005d1c:	0031      	movs	r1, r6
 8005d1e:	187b      	adds	r3, r7, r1
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f863 	bl	8005dee <USBD_Get_USB_Status>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8005d2c:	197b      	adds	r3, r7, r5
 8005d2e:	781b      	ldrb	r3, [r3, #0]
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b007      	add	sp, #28
 8005d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d38:	08006b70 	.word	0x08006b70

08005d3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	0008      	movs	r0, r1
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	0019      	movs	r1, r3
 8005d4a:	230b      	movs	r3, #11
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	1c02      	adds	r2, r0, #0
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	2408      	movs	r4, #8
 8005d54:	193b      	adds	r3, r7, r4
 8005d56:	1c0a      	adds	r2, r1, #0
 8005d58:	801a      	strh	r2, [r3, #0]
	log_comm(__func__);
 8005d5a:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <USBD_LL_PrepareReceive+0x78>)
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff fa61 	bl	8005224 <log_comm>
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d62:	2117      	movs	r1, #23
 8005d64:	187b      	adds	r3, r7, r1
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d6a:	2516      	movs	r5, #22
 8005d6c:	197b      	adds	r3, r7, r5
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	2388      	movs	r3, #136	; 0x88
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	58d0      	ldr	r0, [r2, r3]
 8005d7a:	193b      	adds	r3, r7, r4
 8005d7c:	881d      	ldrh	r5, [r3, #0]
 8005d7e:	000e      	movs	r6, r1
 8005d80:	187c      	adds	r4, r7, r1
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	230b      	movs	r3, #11
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	7819      	ldrb	r1, [r3, #0]
 8005d8a:	002b      	movs	r3, r5
 8005d8c:	f7fb fde2 	bl	8001954 <HAL_PCD_EP_Receive>
 8005d90:	0003      	movs	r3, r0
 8005d92:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d94:	2516      	movs	r5, #22
 8005d96:	197c      	adds	r4, r7, r5
 8005d98:	0031      	movs	r1, r6
 8005d9a:	187b      	adds	r3, r7, r1
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 f825 	bl	8005dee <USBD_Get_USB_Status>
 8005da4:	0003      	movs	r3, r0
 8005da6:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8005da8:	197b      	adds	r3, r7, r5
 8005daa:	781b      	ldrb	r3, [r3, #0]
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b007      	add	sp, #28
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db4:	08006b84 	.word	0x08006b84

08005db8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005dc0:	4b02      	ldr	r3, [pc, #8]	; (8005dcc <USBD_static_malloc+0x14>)
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b002      	add	sp, #8
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	2000019c 	.word	0x2000019c

08005dd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

}
 8005dd8:	46c0      	nop			; (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8005de4:	f7ff fa4e 	bl	8005284 <SystemClock_Config>
}
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	0002      	movs	r2, r0
 8005df6:	1dfb      	adds	r3, r7, #7
 8005df8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dfa:	230f      	movs	r3, #15
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8005e02:	1dfb      	adds	r3, r7, #7
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d00d      	beq.n	8005e26 <USBD_Get_USB_Status+0x38>
 8005e0a:	dc02      	bgt.n	8005e12 <USBD_Get_USB_Status+0x24>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <USBD_Get_USB_Status+0x2e>
 8005e10:	e018      	b.n	8005e44 <USBD_Get_USB_Status+0x56>
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d00c      	beq.n	8005e30 <USBD_Get_USB_Status+0x42>
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d00f      	beq.n	8005e3a <USBD_Get_USB_Status+0x4c>
 8005e1a:	e013      	b.n	8005e44 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005e1c:	230f      	movs	r3, #15
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
    break;
 8005e24:	e013      	b.n	8005e4e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e26:	230f      	movs	r3, #15
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
    break;
 8005e2e:	e00e      	b.n	8005e4e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e30:	230f      	movs	r3, #15
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
    break;
 8005e38:	e009      	b.n	8005e4e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
    break;
 8005e42:	e004      	b.n	8005e4e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8005e44:	230f      	movs	r3, #15
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	2202      	movs	r2, #2
 8005e4a:	701a      	strb	r2, [r3, #0]
    break;
 8005e4c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8005e4e:	230f      	movs	r3, #15
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	781b      	ldrb	r3, [r3, #0]
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	0002      	movs	r2, r0
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	1dfb      	adds	r3, r7, #7
 8005e68:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2212      	movs	r2, #18
 8005e6e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e70:	4b02      	ldr	r3, [pc, #8]	; (8005e7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b002      	add	sp, #8
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	200000e0 	.word	0x200000e0

08005e80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	0002      	movs	r2, r0
 8005e88:	6039      	str	r1, [r7, #0]
 8005e8a:	1dfb      	adds	r3, r7, #7
 8005e8c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2204      	movs	r2, #4
 8005e92:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	200000f4 	.word	0x200000f4

08005ea4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	0002      	movs	r2, r0
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	1dfb      	adds	r3, r7, #7
 8005eb0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8005eb2:	1dfb      	adds	r3, r7, #7
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8005ebe:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x40>)
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7ff f8d4 	bl	800506e <USBD_GetString>
 8005ec6:	e005      	b.n	8005ed4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	4905      	ldr	r1, [pc, #20]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x40>)
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7ff f8cd 	bl	800506e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ed4:	4b02      	ldr	r3, [pc, #8]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b002      	add	sp, #8
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	20000718 	.word	0x20000718
 8005ee4:	080069f8 	.word	0x080069f8

08005ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	0002      	movs	r2, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	1dfb      	adds	r3, r7, #7
 8005ef4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	4904      	ldr	r1, [pc, #16]	; (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7ff f8b6 	bl	800506e <USBD_GetString>
  return USBD_StrDesc;
 8005f02:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000718 	.word	0x20000718
 8005f10:	08006a10 	.word	0x08006a10

08005f14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	6039      	str	r1, [r7, #0]
 8005f1e:	1dfb      	adds	r3, r7, #7
 8005f20:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	221a      	movs	r2, #26
 8005f26:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f28:	f000 f858 	bl	8005fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f2c:	4b02      	ldr	r3, [pc, #8]	; (8005f38 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b002      	add	sp, #8
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	200000f8 	.word	0x200000f8

08005f3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	0002      	movs	r2, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	1dfb      	adds	r3, r7, #7
 8005f48:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <USBD_FS_ConfigStrDescriptor+0x44>)
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7ff f969 	bl	8005224 <log_comm>
  if(speed == USBD_SPEED_HIGH)
 8005f52:	1dfb      	adds	r3, r7, #7
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <USBD_FS_ConfigStrDescriptor+0x2c>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4909      	ldr	r1, [pc, #36]	; (8005f84 <USBD_FS_ConfigStrDescriptor+0x48>)
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <USBD_FS_ConfigStrDescriptor+0x4c>)
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff f884 	bl	800506e <USBD_GetString>
 8005f66:	e005      	b.n	8005f74 <USBD_FS_ConfigStrDescriptor+0x38>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	4906      	ldr	r1, [pc, #24]	; (8005f84 <USBD_FS_ConfigStrDescriptor+0x48>)
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <USBD_FS_ConfigStrDescriptor+0x4c>)
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff f87d 	bl	800506e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <USBD_FS_ConfigStrDescriptor+0x48>)
}
 8005f76:	0018      	movs	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	b002      	add	sp, #8
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	08006b9c 	.word	0x08006b9c
 8005f84:	20000718 	.word	0x20000718
 8005f88:	08006a24 	.word	0x08006a24

08005f8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	0002      	movs	r2, r0
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	1dfb      	adds	r3, r7, #7
 8005f98:	701a      	strb	r2, [r3, #0]
	log_comm(__func__);
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <USBD_FS_InterfaceStrDescriptor+0x44>)
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff f941 	bl	8005224 <log_comm>
  if(speed == 0)
 8005fa2:	1dfb      	adds	r3, r7, #7
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <USBD_FS_InterfaceStrDescriptor+0x2c>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x48>)
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x4c>)
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7ff f85c 	bl	800506e <USBD_GetString>
 8005fb6:	e005      	b.n	8005fc4 <USBD_FS_InterfaceStrDescriptor+0x38>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x48>)
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <USBD_FS_InterfaceStrDescriptor+0x4c>)
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f7ff f855 	bl	800506e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <USBD_FS_InterfaceStrDescriptor+0x48>)
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b002      	add	sp, #8
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	08006bb8 	.word	0x08006bb8
 8005fd4:	20000718 	.word	0x20000718
 8005fd8:	08006a30 	.word	0x08006a30

08005fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <Get_SerialNum+0x48>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <Get_SerialNum+0x4c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <Get_SerialNum+0x50>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	18d3      	adds	r3, r2, r3
 8005ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006002:	490b      	ldr	r1, [pc, #44]	; (8006030 <Get_SerialNum+0x54>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2208      	movs	r2, #8
 8006008:	0018      	movs	r0, r3
 800600a:	f000 f815 	bl	8006038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800600e:	4909      	ldr	r1, [pc, #36]	; (8006034 <Get_SerialNum+0x58>)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2204      	movs	r2, #4
 8006014:	0018      	movs	r0, r3
 8006016:	f000 f80f 	bl	8006038 <IntToUnicode>
  }
}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	46bd      	mov	sp, r7
 800601e:	b004      	add	sp, #16
 8006020:	bd80      	pop	{r7, pc}
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	1ffff7ac 	.word	0x1ffff7ac
 8006028:	1ffff7b0 	.word	0x1ffff7b0
 800602c:	1ffff7b4 	.word	0x1ffff7b4
 8006030:	200000fa 	.word	0x200000fa
 8006034:	2000010a 	.word	0x2000010a

08006038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	1dfb      	adds	r3, r7, #7
 8006044:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006046:	2117      	movs	r1, #23
 8006048:	187b      	adds	r3, r7, r1
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800604e:	187b      	adds	r3, r7, r1
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e02f      	b.n	80060b6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	0f1b      	lsrs	r3, r3, #28
 800605a:	2b09      	cmp	r3, #9
 800605c:	d80d      	bhi.n	800607a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0f1b      	lsrs	r3, r3, #28
 8006062:	b2da      	uxtb	r2, r3
 8006064:	2317      	movs	r3, #23
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	0019      	movs	r1, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	185b      	adds	r3, r3, r1
 8006072:	3230      	adds	r2, #48	; 0x30
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	e00c      	b.n	8006094 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0f1b      	lsrs	r3, r3, #28
 800607e:	b2da      	uxtb	r2, r3
 8006080:	2317      	movs	r3, #23
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	0019      	movs	r1, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	185b      	adds	r3, r3, r1
 800608e:	3237      	adds	r2, #55	; 0x37
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800609a:	2117      	movs	r1, #23
 800609c:	187b      	adds	r3, r7, r1
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	3301      	adds	r3, #1
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	18d3      	adds	r3, r2, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	187b      	adds	r3, r7, r1
 80060b2:	3201      	adds	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	2317      	movs	r3, #23
 80060b8:	18fa      	adds	r2, r7, r3
 80060ba:	1dfb      	adds	r3, r7, #7
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3c8      	bcc.n	8006056 <IntToUnicode+0x1e>
  }
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b006      	add	sp, #24
 80060ca:	bd80      	pop	{r7, pc}

080060cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80060cc:	480d      	ldr	r0, [pc, #52]	; (8006104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80060ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80060d0:	480d      	ldr	r0, [pc, #52]	; (8006108 <LoopForever+0x6>)
  ldr r1, =_edata
 80060d2:	490e      	ldr	r1, [pc, #56]	; (800610c <LoopForever+0xa>)
  ldr r2, =_sidata
 80060d4:	4a0e      	ldr	r2, [pc, #56]	; (8006110 <LoopForever+0xe>)
  movs r3, #0
 80060d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060d8:	e002      	b.n	80060e0 <LoopCopyDataInit>

080060da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060de:	3304      	adds	r3, #4

080060e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060e4:	d3f9      	bcc.n	80060da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060e6:	4a0b      	ldr	r2, [pc, #44]	; (8006114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80060e8:	4c0b      	ldr	r4, [pc, #44]	; (8006118 <LoopForever+0x16>)
  movs r3, #0
 80060ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060ec:	e001      	b.n	80060f2 <LoopFillZerobss>

080060ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060f0:	3204      	adds	r2, #4

080060f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060f4:	d3fb      	bcc.n	80060ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80060f6:	f7ff fac3 	bl	8005680 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80060fa:	f000 f817 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80060fe:	f7ff f8b1 	bl	8005264 <main>

08006102 <LoopForever>:

LoopForever:
    b LoopForever
 8006102:	e7fe      	b.n	8006102 <LoopForever>
  ldr   r0, =_estack
 8006104:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800610c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8006110:	08006c14 	.word	0x08006c14
  ldr r2, =_sbss
 8006114:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8006118:	2000091c 	.word	0x2000091c

0800611c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800611c:	e7fe      	b.n	800611c <ADC1_COMP_IRQHandler>
	...

08006120 <__errno>:
 8006120:	4b01      	ldr	r3, [pc, #4]	; (8006128 <__errno+0x8>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	20000114 	.word	0x20000114

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2600      	movs	r6, #0
 8006130:	4d0c      	ldr	r5, [pc, #48]	; (8006164 <__libc_init_array+0x38>)
 8006132:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	2600      	movs	r6, #0
 800613e:	f000 fc3b 	bl	80069b8 <_init>
 8006142:	4d0a      	ldr	r5, [pc, #40]	; (800616c <__libc_init_array+0x40>)
 8006144:	4c0a      	ldr	r4, [pc, #40]	; (8006170 <__libc_init_array+0x44>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	00b3      	lsls	r3, r6, #2
 8006152:	58eb      	ldr	r3, [r5, r3]
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	00b3      	lsls	r3, r6, #2
 800615c:	58eb      	ldr	r3, [r5, r3]
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08006c0c 	.word	0x08006c0c
 8006168:	08006c0c 	.word	0x08006c0c
 800616c:	08006c0c 	.word	0x08006c0c
 8006170:	08006c10 	.word	0x08006c10

08006174 <memset>:
 8006174:	0003      	movs	r3, r0
 8006176:	1812      	adds	r2, r2, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	7019      	strb	r1, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <sniprintf>:
 8006184:	b40c      	push	{r2, r3}
 8006186:	b530      	push	{r4, r5, lr}
 8006188:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <sniprintf+0x60>)
 800618a:	b09d      	sub	sp, #116	; 0x74
 800618c:	1e0c      	subs	r4, r1, #0
 800618e:	681d      	ldr	r5, [r3, #0]
 8006190:	da08      	bge.n	80061a4 <sniprintf+0x20>
 8006192:	238b      	movs	r3, #139	; 0x8b
 8006194:	2001      	movs	r0, #1
 8006196:	602b      	str	r3, [r5, #0]
 8006198:	4240      	negs	r0, r0
 800619a:	b01d      	add	sp, #116	; 0x74
 800619c:	bc30      	pop	{r4, r5}
 800619e:	bc08      	pop	{r3}
 80061a0:	b002      	add	sp, #8
 80061a2:	4718      	bx	r3
 80061a4:	2382      	movs	r3, #130	; 0x82
 80061a6:	a902      	add	r1, sp, #8
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	818b      	strh	r3, [r1, #12]
 80061ac:	2300      	movs	r3, #0
 80061ae:	9002      	str	r0, [sp, #8]
 80061b0:	6108      	str	r0, [r1, #16]
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d000      	beq.n	80061b8 <sniprintf+0x34>
 80061b6:	1e63      	subs	r3, r4, #1
 80061b8:	608b      	str	r3, [r1, #8]
 80061ba:	614b      	str	r3, [r1, #20]
 80061bc:	2301      	movs	r3, #1
 80061be:	425b      	negs	r3, r3
 80061c0:	81cb      	strh	r3, [r1, #14]
 80061c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061c4:	ab21      	add	r3, sp, #132	; 0x84
 80061c6:	0028      	movs	r0, r5
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	f000 f86f 	bl	80062ac <_svfiprintf_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	da01      	bge.n	80061d6 <sniprintf+0x52>
 80061d2:	238b      	movs	r3, #139	; 0x8b
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	2c00      	cmp	r4, #0
 80061d8:	d0df      	beq.n	800619a <sniprintf+0x16>
 80061da:	2300      	movs	r3, #0
 80061dc:	9a02      	ldr	r2, [sp, #8]
 80061de:	7013      	strb	r3, [r2, #0]
 80061e0:	e7db      	b.n	800619a <sniprintf+0x16>
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	20000114 	.word	0x20000114

080061e8 <__ssputs_r>:
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	688e      	ldr	r6, [r1, #8]
 80061ec:	b085      	sub	sp, #20
 80061ee:	0007      	movs	r7, r0
 80061f0:	000c      	movs	r4, r1
 80061f2:	9203      	str	r2, [sp, #12]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	429e      	cmp	r6, r3
 80061f8:	d83c      	bhi.n	8006274 <__ssputs_r+0x8c>
 80061fa:	2390      	movs	r3, #144	; 0x90
 80061fc:	898a      	ldrh	r2, [r1, #12]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	421a      	tst	r2, r3
 8006202:	d034      	beq.n	800626e <__ssputs_r+0x86>
 8006204:	2503      	movs	r5, #3
 8006206:	6909      	ldr	r1, [r1, #16]
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	9302      	str	r3, [sp, #8]
 800620e:	6963      	ldr	r3, [r4, #20]
 8006210:	9802      	ldr	r0, [sp, #8]
 8006212:	435d      	muls	r5, r3
 8006214:	0feb      	lsrs	r3, r5, #31
 8006216:	195d      	adds	r5, r3, r5
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	106d      	asrs	r5, r5, #1
 800621c:	3301      	adds	r3, #1
 800621e:	181b      	adds	r3, r3, r0
 8006220:	42ab      	cmp	r3, r5
 8006222:	d900      	bls.n	8006226 <__ssputs_r+0x3e>
 8006224:	001d      	movs	r5, r3
 8006226:	0553      	lsls	r3, r2, #21
 8006228:	d532      	bpl.n	8006290 <__ssputs_r+0xa8>
 800622a:	0029      	movs	r1, r5
 800622c:	0038      	movs	r0, r7
 800622e:	f000 fb23 	bl	8006878 <_malloc_r>
 8006232:	1e06      	subs	r6, r0, #0
 8006234:	d109      	bne.n	800624a <__ssputs_r+0x62>
 8006236:	230c      	movs	r3, #12
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	2340      	movs	r3, #64	; 0x40
 800623c:	2001      	movs	r0, #1
 800623e:	89a2      	ldrh	r2, [r4, #12]
 8006240:	4240      	negs	r0, r0
 8006242:	4313      	orrs	r3, r2
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	b005      	add	sp, #20
 8006248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624a:	9a02      	ldr	r2, [sp, #8]
 800624c:	6921      	ldr	r1, [r4, #16]
 800624e:	f000 faac 	bl	80067aa <memcpy>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	4a14      	ldr	r2, [pc, #80]	; (80062a8 <__ssputs_r+0xc0>)
 8006256:	401a      	ands	r2, r3
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	4313      	orrs	r3, r2
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	9b02      	ldr	r3, [sp, #8]
 8006260:	6126      	str	r6, [r4, #16]
 8006262:	18f6      	adds	r6, r6, r3
 8006264:	6026      	str	r6, [r4, #0]
 8006266:	6165      	str	r5, [r4, #20]
 8006268:	9e01      	ldr	r6, [sp, #4]
 800626a:	1aed      	subs	r5, r5, r3
 800626c:	60a5      	str	r5, [r4, #8]
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	429e      	cmp	r6, r3
 8006272:	d900      	bls.n	8006276 <__ssputs_r+0x8e>
 8006274:	9e01      	ldr	r6, [sp, #4]
 8006276:	0032      	movs	r2, r6
 8006278:	9903      	ldr	r1, [sp, #12]
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	f000 fa9e 	bl	80067bc <memmove>
 8006280:	68a3      	ldr	r3, [r4, #8]
 8006282:	2000      	movs	r0, #0
 8006284:	1b9b      	subs	r3, r3, r6
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	199e      	adds	r6, r3, r6
 800628c:	6026      	str	r6, [r4, #0]
 800628e:	e7da      	b.n	8006246 <__ssputs_r+0x5e>
 8006290:	002a      	movs	r2, r5
 8006292:	0038      	movs	r0, r7
 8006294:	f000 fb4e 	bl	8006934 <_realloc_r>
 8006298:	1e06      	subs	r6, r0, #0
 800629a:	d1e0      	bne.n	800625e <__ssputs_r+0x76>
 800629c:	6921      	ldr	r1, [r4, #16]
 800629e:	0038      	movs	r0, r7
 80062a0:	f000 faa0 	bl	80067e4 <_free_r>
 80062a4:	e7c7      	b.n	8006236 <__ssputs_r+0x4e>
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	fffffb7f 	.word	0xfffffb7f

080062ac <_svfiprintf_r>:
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b0a1      	sub	sp, #132	; 0x84
 80062b0:	9003      	str	r0, [sp, #12]
 80062b2:	001d      	movs	r5, r3
 80062b4:	898b      	ldrh	r3, [r1, #12]
 80062b6:	000f      	movs	r7, r1
 80062b8:	0016      	movs	r6, r2
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	d511      	bpl.n	80062e2 <_svfiprintf_r+0x36>
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10e      	bne.n	80062e2 <_svfiprintf_r+0x36>
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	f000 fad7 	bl	8006878 <_malloc_r>
 80062ca:	6038      	str	r0, [r7, #0]
 80062cc:	6138      	str	r0, [r7, #16]
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d105      	bne.n	80062de <_svfiprintf_r+0x32>
 80062d2:	230c      	movs	r3, #12
 80062d4:	9a03      	ldr	r2, [sp, #12]
 80062d6:	3801      	subs	r0, #1
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	b021      	add	sp, #132	; 0x84
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062de:	2340      	movs	r3, #64	; 0x40
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	2300      	movs	r3, #0
 80062e4:	ac08      	add	r4, sp, #32
 80062e6:	6163      	str	r3, [r4, #20]
 80062e8:	3320      	adds	r3, #32
 80062ea:	7663      	strb	r3, [r4, #25]
 80062ec:	3310      	adds	r3, #16
 80062ee:	76a3      	strb	r3, [r4, #26]
 80062f0:	9507      	str	r5, [sp, #28]
 80062f2:	0035      	movs	r5, r6
 80062f4:	782b      	ldrb	r3, [r5, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <_svfiprintf_r+0x52>
 80062fa:	2b25      	cmp	r3, #37	; 0x25
 80062fc:	d146      	bne.n	800638c <_svfiprintf_r+0xe0>
 80062fe:	1bab      	subs	r3, r5, r6
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	d00c      	beq.n	800631e <_svfiprintf_r+0x72>
 8006304:	0032      	movs	r2, r6
 8006306:	0039      	movs	r1, r7
 8006308:	9803      	ldr	r0, [sp, #12]
 800630a:	f7ff ff6d 	bl	80061e8 <__ssputs_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d100      	bne.n	8006314 <_svfiprintf_r+0x68>
 8006312:	e0ae      	b.n	8006472 <_svfiprintf_r+0x1c6>
 8006314:	6962      	ldr	r2, [r4, #20]
 8006316:	9b05      	ldr	r3, [sp, #20]
 8006318:	4694      	mov	ip, r2
 800631a:	4463      	add	r3, ip
 800631c:	6163      	str	r3, [r4, #20]
 800631e:	782b      	ldrb	r3, [r5, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d100      	bne.n	8006326 <_svfiprintf_r+0x7a>
 8006324:	e0a5      	b.n	8006472 <_svfiprintf_r+0x1c6>
 8006326:	2201      	movs	r2, #1
 8006328:	2300      	movs	r3, #0
 800632a:	4252      	negs	r2, r2
 800632c:	6062      	str	r2, [r4, #4]
 800632e:	a904      	add	r1, sp, #16
 8006330:	3254      	adds	r2, #84	; 0x54
 8006332:	1852      	adds	r2, r2, r1
 8006334:	1c6e      	adds	r6, r5, #1
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	60e3      	str	r3, [r4, #12]
 800633a:	60a3      	str	r3, [r4, #8]
 800633c:	7013      	strb	r3, [r2, #0]
 800633e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006340:	7831      	ldrb	r1, [r6, #0]
 8006342:	2205      	movs	r2, #5
 8006344:	4853      	ldr	r0, [pc, #332]	; (8006494 <_svfiprintf_r+0x1e8>)
 8006346:	f000 fa25 	bl	8006794 <memchr>
 800634a:	1c75      	adds	r5, r6, #1
 800634c:	2800      	cmp	r0, #0
 800634e:	d11f      	bne.n	8006390 <_svfiprintf_r+0xe4>
 8006350:	6822      	ldr	r2, [r4, #0]
 8006352:	06d3      	lsls	r3, r2, #27
 8006354:	d504      	bpl.n	8006360 <_svfiprintf_r+0xb4>
 8006356:	2353      	movs	r3, #83	; 0x53
 8006358:	a904      	add	r1, sp, #16
 800635a:	185b      	adds	r3, r3, r1
 800635c:	2120      	movs	r1, #32
 800635e:	7019      	strb	r1, [r3, #0]
 8006360:	0713      	lsls	r3, r2, #28
 8006362:	d504      	bpl.n	800636e <_svfiprintf_r+0xc2>
 8006364:	2353      	movs	r3, #83	; 0x53
 8006366:	a904      	add	r1, sp, #16
 8006368:	185b      	adds	r3, r3, r1
 800636a:	212b      	movs	r1, #43	; 0x2b
 800636c:	7019      	strb	r1, [r3, #0]
 800636e:	7833      	ldrb	r3, [r6, #0]
 8006370:	2b2a      	cmp	r3, #42	; 0x2a
 8006372:	d016      	beq.n	80063a2 <_svfiprintf_r+0xf6>
 8006374:	0035      	movs	r5, r6
 8006376:	2100      	movs	r1, #0
 8006378:	200a      	movs	r0, #10
 800637a:	68e3      	ldr	r3, [r4, #12]
 800637c:	782a      	ldrb	r2, [r5, #0]
 800637e:	1c6e      	adds	r6, r5, #1
 8006380:	3a30      	subs	r2, #48	; 0x30
 8006382:	2a09      	cmp	r2, #9
 8006384:	d94e      	bls.n	8006424 <_svfiprintf_r+0x178>
 8006386:	2900      	cmp	r1, #0
 8006388:	d018      	beq.n	80063bc <_svfiprintf_r+0x110>
 800638a:	e010      	b.n	80063ae <_svfiprintf_r+0x102>
 800638c:	3501      	adds	r5, #1
 800638e:	e7b1      	b.n	80062f4 <_svfiprintf_r+0x48>
 8006390:	4b40      	ldr	r3, [pc, #256]	; (8006494 <_svfiprintf_r+0x1e8>)
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	1ac0      	subs	r0, r0, r3
 8006396:	2301      	movs	r3, #1
 8006398:	4083      	lsls	r3, r0
 800639a:	4313      	orrs	r3, r2
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	002e      	movs	r6, r5
 80063a0:	e7ce      	b.n	8006340 <_svfiprintf_r+0x94>
 80063a2:	9b07      	ldr	r3, [sp, #28]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	9107      	str	r1, [sp, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db01      	blt.n	80063b2 <_svfiprintf_r+0x106>
 80063ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b0:	e004      	b.n	80063bc <_svfiprintf_r+0x110>
 80063b2:	425b      	negs	r3, r3
 80063b4:	60e3      	str	r3, [r4, #12]
 80063b6:	2302      	movs	r3, #2
 80063b8:	4313      	orrs	r3, r2
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	782b      	ldrb	r3, [r5, #0]
 80063be:	2b2e      	cmp	r3, #46	; 0x2e
 80063c0:	d10a      	bne.n	80063d8 <_svfiprintf_r+0x12c>
 80063c2:	786b      	ldrb	r3, [r5, #1]
 80063c4:	2b2a      	cmp	r3, #42	; 0x2a
 80063c6:	d135      	bne.n	8006434 <_svfiprintf_r+0x188>
 80063c8:	9b07      	ldr	r3, [sp, #28]
 80063ca:	3502      	adds	r5, #2
 80063cc:	1d1a      	adds	r2, r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	9207      	str	r2, [sp, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	db2b      	blt.n	800642e <_svfiprintf_r+0x182>
 80063d6:	9309      	str	r3, [sp, #36]	; 0x24
 80063d8:	4e2f      	ldr	r6, [pc, #188]	; (8006498 <_svfiprintf_r+0x1ec>)
 80063da:	7829      	ldrb	r1, [r5, #0]
 80063dc:	2203      	movs	r2, #3
 80063de:	0030      	movs	r0, r6
 80063e0:	f000 f9d8 	bl	8006794 <memchr>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d006      	beq.n	80063f6 <_svfiprintf_r+0x14a>
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	1b80      	subs	r0, r0, r6
 80063ec:	4083      	lsls	r3, r0
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	3501      	adds	r5, #1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	7829      	ldrb	r1, [r5, #0]
 80063f8:	2206      	movs	r2, #6
 80063fa:	4828      	ldr	r0, [pc, #160]	; (800649c <_svfiprintf_r+0x1f0>)
 80063fc:	1c6e      	adds	r6, r5, #1
 80063fe:	7621      	strb	r1, [r4, #24]
 8006400:	f000 f9c8 	bl	8006794 <memchr>
 8006404:	2800      	cmp	r0, #0
 8006406:	d03c      	beq.n	8006482 <_svfiprintf_r+0x1d6>
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <_svfiprintf_r+0x1f4>)
 800640a:	2b00      	cmp	r3, #0
 800640c:	d125      	bne.n	800645a <_svfiprintf_r+0x1ae>
 800640e:	2207      	movs	r2, #7
 8006410:	9b07      	ldr	r3, [sp, #28]
 8006412:	3307      	adds	r3, #7
 8006414:	4393      	bics	r3, r2
 8006416:	3308      	adds	r3, #8
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	6963      	ldr	r3, [r4, #20]
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	189b      	adds	r3, r3, r2
 8006420:	6163      	str	r3, [r4, #20]
 8006422:	e766      	b.n	80062f2 <_svfiprintf_r+0x46>
 8006424:	4343      	muls	r3, r0
 8006426:	2101      	movs	r1, #1
 8006428:	189b      	adds	r3, r3, r2
 800642a:	0035      	movs	r5, r6
 800642c:	e7a6      	b.n	800637c <_svfiprintf_r+0xd0>
 800642e:	2301      	movs	r3, #1
 8006430:	425b      	negs	r3, r3
 8006432:	e7d0      	b.n	80063d6 <_svfiprintf_r+0x12a>
 8006434:	2300      	movs	r3, #0
 8006436:	200a      	movs	r0, #10
 8006438:	001a      	movs	r2, r3
 800643a:	3501      	adds	r5, #1
 800643c:	6063      	str	r3, [r4, #4]
 800643e:	7829      	ldrb	r1, [r5, #0]
 8006440:	1c6e      	adds	r6, r5, #1
 8006442:	3930      	subs	r1, #48	; 0x30
 8006444:	2909      	cmp	r1, #9
 8006446:	d903      	bls.n	8006450 <_svfiprintf_r+0x1a4>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0c5      	beq.n	80063d8 <_svfiprintf_r+0x12c>
 800644c:	9209      	str	r2, [sp, #36]	; 0x24
 800644e:	e7c3      	b.n	80063d8 <_svfiprintf_r+0x12c>
 8006450:	4342      	muls	r2, r0
 8006452:	2301      	movs	r3, #1
 8006454:	1852      	adds	r2, r2, r1
 8006456:	0035      	movs	r5, r6
 8006458:	e7f1      	b.n	800643e <_svfiprintf_r+0x192>
 800645a:	ab07      	add	r3, sp, #28
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	003a      	movs	r2, r7
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <_svfiprintf_r+0x1f8>)
 8006462:	0021      	movs	r1, r4
 8006464:	9803      	ldr	r0, [sp, #12]
 8006466:	e000      	b.n	800646a <_svfiprintf_r+0x1be>
 8006468:	bf00      	nop
 800646a:	9004      	str	r0, [sp, #16]
 800646c:	9b04      	ldr	r3, [sp, #16]
 800646e:	3301      	adds	r3, #1
 8006470:	d1d3      	bne.n	800641a <_svfiprintf_r+0x16e>
 8006472:	89bb      	ldrh	r3, [r7, #12]
 8006474:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	d400      	bmi.n	800647c <_svfiprintf_r+0x1d0>
 800647a:	e72e      	b.n	80062da <_svfiprintf_r+0x2e>
 800647c:	2001      	movs	r0, #1
 800647e:	4240      	negs	r0, r0
 8006480:	e72b      	b.n	80062da <_svfiprintf_r+0x2e>
 8006482:	ab07      	add	r3, sp, #28
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	003a      	movs	r2, r7
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <_svfiprintf_r+0x1f8>)
 800648a:	0021      	movs	r1, r4
 800648c:	9803      	ldr	r0, [sp, #12]
 800648e:	f000 f879 	bl	8006584 <_printf_i>
 8006492:	e7ea      	b.n	800646a <_svfiprintf_r+0x1be>
 8006494:	08006bd7 	.word	0x08006bd7
 8006498:	08006bdd 	.word	0x08006bdd
 800649c:	08006be1 	.word	0x08006be1
 80064a0:	00000000 	.word	0x00000000
 80064a4:	080061e9 	.word	0x080061e9

080064a8 <_printf_common>:
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	0015      	movs	r5, r2
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	688a      	ldr	r2, [r1, #8]
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	9000      	str	r0, [sp, #0]
 80064b4:	000c      	movs	r4, r1
 80064b6:	4293      	cmp	r3, r2
 80064b8:	da00      	bge.n	80064bc <_printf_common+0x14>
 80064ba:	0013      	movs	r3, r2
 80064bc:	0022      	movs	r2, r4
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	3243      	adds	r2, #67	; 0x43
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d001      	beq.n	80064cc <_printf_common+0x24>
 80064c8:	3301      	adds	r3, #1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	069b      	lsls	r3, r3, #26
 80064d0:	d502      	bpl.n	80064d8 <_printf_common+0x30>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	3302      	adds	r3, #2
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	2706      	movs	r7, #6
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	401f      	ands	r7, r3
 80064de:	d027      	beq.n	8006530 <_printf_common+0x88>
 80064e0:	0023      	movs	r3, r4
 80064e2:	3343      	adds	r3, #67	; 0x43
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	4193      	sbcs	r3, r2
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	0692      	lsls	r2, r2, #26
 80064ee:	d430      	bmi.n	8006552 <_printf_common+0xaa>
 80064f0:	0022      	movs	r2, r4
 80064f2:	9901      	ldr	r1, [sp, #4]
 80064f4:	3243      	adds	r2, #67	; 0x43
 80064f6:	9800      	ldr	r0, [sp, #0]
 80064f8:	9e08      	ldr	r6, [sp, #32]
 80064fa:	47b0      	blx	r6
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d025      	beq.n	800654c <_printf_common+0xa4>
 8006500:	2306      	movs	r3, #6
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	682a      	ldr	r2, [r5, #0]
 8006506:	68e1      	ldr	r1, [r4, #12]
 8006508:	4003      	ands	r3, r0
 800650a:	2500      	movs	r5, #0
 800650c:	2b04      	cmp	r3, #4
 800650e:	d103      	bne.n	8006518 <_printf_common+0x70>
 8006510:	1a8d      	subs	r5, r1, r2
 8006512:	43eb      	mvns	r3, r5
 8006514:	17db      	asrs	r3, r3, #31
 8006516:	401d      	ands	r5, r3
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	6922      	ldr	r2, [r4, #16]
 800651c:	4293      	cmp	r3, r2
 800651e:	dd01      	ble.n	8006524 <_printf_common+0x7c>
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	18ed      	adds	r5, r5, r3
 8006524:	2700      	movs	r7, #0
 8006526:	42bd      	cmp	r5, r7
 8006528:	d120      	bne.n	800656c <_printf_common+0xc4>
 800652a:	2000      	movs	r0, #0
 800652c:	e010      	b.n	8006550 <_printf_common+0xa8>
 800652e:	3701      	adds	r7, #1
 8006530:	68e3      	ldr	r3, [r4, #12]
 8006532:	682a      	ldr	r2, [r5, #0]
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	42bb      	cmp	r3, r7
 8006538:	ddd2      	ble.n	80064e0 <_printf_common+0x38>
 800653a:	0022      	movs	r2, r4
 800653c:	2301      	movs	r3, #1
 800653e:	3219      	adds	r2, #25
 8006540:	9901      	ldr	r1, [sp, #4]
 8006542:	9800      	ldr	r0, [sp, #0]
 8006544:	9e08      	ldr	r6, [sp, #32]
 8006546:	47b0      	blx	r6
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d1f0      	bne.n	800652e <_printf_common+0x86>
 800654c:	2001      	movs	r0, #1
 800654e:	4240      	negs	r0, r0
 8006550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006552:	2030      	movs	r0, #48	; 0x30
 8006554:	18e1      	adds	r1, r4, r3
 8006556:	3143      	adds	r1, #67	; 0x43
 8006558:	7008      	strb	r0, [r1, #0]
 800655a:	0021      	movs	r1, r4
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	3145      	adds	r1, #69	; 0x45
 8006560:	7809      	ldrb	r1, [r1, #0]
 8006562:	18a2      	adds	r2, r4, r2
 8006564:	3243      	adds	r2, #67	; 0x43
 8006566:	3302      	adds	r3, #2
 8006568:	7011      	strb	r1, [r2, #0]
 800656a:	e7c1      	b.n	80064f0 <_printf_common+0x48>
 800656c:	0022      	movs	r2, r4
 800656e:	2301      	movs	r3, #1
 8006570:	321a      	adds	r2, #26
 8006572:	9901      	ldr	r1, [sp, #4]
 8006574:	9800      	ldr	r0, [sp, #0]
 8006576:	9e08      	ldr	r6, [sp, #32]
 8006578:	47b0      	blx	r6
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	d0e6      	beq.n	800654c <_printf_common+0xa4>
 800657e:	3701      	adds	r7, #1
 8006580:	e7d1      	b.n	8006526 <_printf_common+0x7e>
	...

08006584 <_printf_i>:
 8006584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006586:	b089      	sub	sp, #36	; 0x24
 8006588:	9204      	str	r2, [sp, #16]
 800658a:	000a      	movs	r2, r1
 800658c:	3243      	adds	r2, #67	; 0x43
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	9003      	str	r0, [sp, #12]
 8006592:	9202      	str	r2, [sp, #8]
 8006594:	7e0a      	ldrb	r2, [r1, #24]
 8006596:	000c      	movs	r4, r1
 8006598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800659a:	2a6e      	cmp	r2, #110	; 0x6e
 800659c:	d100      	bne.n	80065a0 <_printf_i+0x1c>
 800659e:	e086      	b.n	80066ae <_printf_i+0x12a>
 80065a0:	d81f      	bhi.n	80065e2 <_printf_i+0x5e>
 80065a2:	2a63      	cmp	r2, #99	; 0x63
 80065a4:	d033      	beq.n	800660e <_printf_i+0x8a>
 80065a6:	d808      	bhi.n	80065ba <_printf_i+0x36>
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d100      	bne.n	80065ae <_printf_i+0x2a>
 80065ac:	e08c      	b.n	80066c8 <_printf_i+0x144>
 80065ae:	2a58      	cmp	r2, #88	; 0x58
 80065b0:	d04d      	beq.n	800664e <_printf_i+0xca>
 80065b2:	0025      	movs	r5, r4
 80065b4:	3542      	adds	r5, #66	; 0x42
 80065b6:	702a      	strb	r2, [r5, #0]
 80065b8:	e030      	b.n	800661c <_printf_i+0x98>
 80065ba:	2a64      	cmp	r2, #100	; 0x64
 80065bc:	d001      	beq.n	80065c2 <_printf_i+0x3e>
 80065be:	2a69      	cmp	r2, #105	; 0x69
 80065c0:	d1f7      	bne.n	80065b2 <_printf_i+0x2e>
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6825      	ldr	r5, [r4, #0]
 80065c6:	1d0a      	adds	r2, r1, #4
 80065c8:	0628      	lsls	r0, r5, #24
 80065ca:	d529      	bpl.n	8006620 <_printf_i+0x9c>
 80065cc:	6808      	ldr	r0, [r1, #0]
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	da03      	bge.n	80065dc <_printf_i+0x58>
 80065d4:	232d      	movs	r3, #45	; 0x2d
 80065d6:	9a02      	ldr	r2, [sp, #8]
 80065d8:	4240      	negs	r0, r0
 80065da:	7013      	strb	r3, [r2, #0]
 80065dc:	4e6b      	ldr	r6, [pc, #428]	; (800678c <_printf_i+0x208>)
 80065de:	270a      	movs	r7, #10
 80065e0:	e04f      	b.n	8006682 <_printf_i+0xfe>
 80065e2:	2a73      	cmp	r2, #115	; 0x73
 80065e4:	d074      	beq.n	80066d0 <_printf_i+0x14c>
 80065e6:	d808      	bhi.n	80065fa <_printf_i+0x76>
 80065e8:	2a6f      	cmp	r2, #111	; 0x6f
 80065ea:	d01f      	beq.n	800662c <_printf_i+0xa8>
 80065ec:	2a70      	cmp	r2, #112	; 0x70
 80065ee:	d1e0      	bne.n	80065b2 <_printf_i+0x2e>
 80065f0:	2220      	movs	r2, #32
 80065f2:	6809      	ldr	r1, [r1, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	e003      	b.n	8006602 <_printf_i+0x7e>
 80065fa:	2a75      	cmp	r2, #117	; 0x75
 80065fc:	d016      	beq.n	800662c <_printf_i+0xa8>
 80065fe:	2a78      	cmp	r2, #120	; 0x78
 8006600:	d1d7      	bne.n	80065b2 <_printf_i+0x2e>
 8006602:	0022      	movs	r2, r4
 8006604:	2178      	movs	r1, #120	; 0x78
 8006606:	3245      	adds	r2, #69	; 0x45
 8006608:	7011      	strb	r1, [r2, #0]
 800660a:	4e61      	ldr	r6, [pc, #388]	; (8006790 <_printf_i+0x20c>)
 800660c:	e022      	b.n	8006654 <_printf_i+0xd0>
 800660e:	0025      	movs	r5, r4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	3542      	adds	r5, #66	; 0x42
 8006614:	1d11      	adds	r1, r2, #4
 8006616:	6019      	str	r1, [r3, #0]
 8006618:	6813      	ldr	r3, [r2, #0]
 800661a:	702b      	strb	r3, [r5, #0]
 800661c:	2301      	movs	r3, #1
 800661e:	e065      	b.n	80066ec <_printf_i+0x168>
 8006620:	6808      	ldr	r0, [r1, #0]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	0669      	lsls	r1, r5, #25
 8006626:	d5d3      	bpl.n	80065d0 <_printf_i+0x4c>
 8006628:	b200      	sxth	r0, r0
 800662a:	e7d1      	b.n	80065d0 <_printf_i+0x4c>
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	6825      	ldr	r5, [r4, #0]
 8006630:	1d08      	adds	r0, r1, #4
 8006632:	6018      	str	r0, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	062e      	lsls	r6, r5, #24
 8006638:	d505      	bpl.n	8006646 <_printf_i+0xc2>
 800663a:	4e54      	ldr	r6, [pc, #336]	; (800678c <_printf_i+0x208>)
 800663c:	2708      	movs	r7, #8
 800663e:	2a6f      	cmp	r2, #111	; 0x6f
 8006640:	d01b      	beq.n	800667a <_printf_i+0xf6>
 8006642:	270a      	movs	r7, #10
 8006644:	e019      	b.n	800667a <_printf_i+0xf6>
 8006646:	066d      	lsls	r5, r5, #25
 8006648:	d5f7      	bpl.n	800663a <_printf_i+0xb6>
 800664a:	b280      	uxth	r0, r0
 800664c:	e7f5      	b.n	800663a <_printf_i+0xb6>
 800664e:	3145      	adds	r1, #69	; 0x45
 8006650:	4e4e      	ldr	r6, [pc, #312]	; (800678c <_printf_i+0x208>)
 8006652:	700a      	strb	r2, [r1, #0]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	1d01      	adds	r1, r0, #4
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	0615      	lsls	r5, r2, #24
 8006660:	d521      	bpl.n	80066a6 <_printf_i+0x122>
 8006662:	07d3      	lsls	r3, r2, #31
 8006664:	d502      	bpl.n	800666c <_printf_i+0xe8>
 8006666:	2320      	movs	r3, #32
 8006668:	431a      	orrs	r2, r3
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	2710      	movs	r7, #16
 800666e:	2800      	cmp	r0, #0
 8006670:	d103      	bne.n	800667a <_printf_i+0xf6>
 8006672:	2320      	movs	r3, #32
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	439a      	bics	r2, r3
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	0023      	movs	r3, r4
 800667c:	2200      	movs	r2, #0
 800667e:	3343      	adds	r3, #67	; 0x43
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	60a3      	str	r3, [r4, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db58      	blt.n	800673c <_printf_i+0x1b8>
 800668a:	2204      	movs	r2, #4
 800668c:	6821      	ldr	r1, [r4, #0]
 800668e:	4391      	bics	r1, r2
 8006690:	6021      	str	r1, [r4, #0]
 8006692:	2800      	cmp	r0, #0
 8006694:	d154      	bne.n	8006740 <_printf_i+0x1bc>
 8006696:	9d02      	ldr	r5, [sp, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d05a      	beq.n	8006752 <_printf_i+0x1ce>
 800669c:	0025      	movs	r5, r4
 800669e:	7833      	ldrb	r3, [r6, #0]
 80066a0:	3542      	adds	r5, #66	; 0x42
 80066a2:	702b      	strb	r3, [r5, #0]
 80066a4:	e055      	b.n	8006752 <_printf_i+0x1ce>
 80066a6:	0655      	lsls	r5, r2, #25
 80066a8:	d5db      	bpl.n	8006662 <_printf_i+0xde>
 80066aa:	b280      	uxth	r0, r0
 80066ac:	e7d9      	b.n	8006662 <_printf_i+0xde>
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	680d      	ldr	r5, [r1, #0]
 80066b2:	1d10      	adds	r0, r2, #4
 80066b4:	6949      	ldr	r1, [r1, #20]
 80066b6:	6018      	str	r0, [r3, #0]
 80066b8:	6813      	ldr	r3, [r2, #0]
 80066ba:	062e      	lsls	r6, r5, #24
 80066bc:	d501      	bpl.n	80066c2 <_printf_i+0x13e>
 80066be:	6019      	str	r1, [r3, #0]
 80066c0:	e002      	b.n	80066c8 <_printf_i+0x144>
 80066c2:	066d      	lsls	r5, r5, #25
 80066c4:	d5fb      	bpl.n	80066be <_printf_i+0x13a>
 80066c6:	8019      	strh	r1, [r3, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	9d02      	ldr	r5, [sp, #8]
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	e04f      	b.n	8006770 <_printf_i+0x1ec>
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	1d11      	adds	r1, r2, #4
 80066d4:	6019      	str	r1, [r3, #0]
 80066d6:	6815      	ldr	r5, [r2, #0]
 80066d8:	2100      	movs	r1, #0
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	0028      	movs	r0, r5
 80066de:	f000 f859 	bl	8006794 <memchr>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d001      	beq.n	80066ea <_printf_i+0x166>
 80066e6:	1b40      	subs	r0, r0, r5
 80066e8:	6060      	str	r0, [r4, #4]
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9a02      	ldr	r2, [sp, #8]
 80066f2:	7013      	strb	r3, [r2, #0]
 80066f4:	e03c      	b.n	8006770 <_printf_i+0x1ec>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	002a      	movs	r2, r5
 80066fa:	9904      	ldr	r1, [sp, #16]
 80066fc:	9803      	ldr	r0, [sp, #12]
 80066fe:	9d05      	ldr	r5, [sp, #20]
 8006700:	47a8      	blx	r5
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d03e      	beq.n	8006784 <_printf_i+0x200>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	079b      	lsls	r3, r3, #30
 800670a:	d415      	bmi.n	8006738 <_printf_i+0x1b4>
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	68e0      	ldr	r0, [r4, #12]
 8006710:	4298      	cmp	r0, r3
 8006712:	da39      	bge.n	8006788 <_printf_i+0x204>
 8006714:	0018      	movs	r0, r3
 8006716:	e037      	b.n	8006788 <_printf_i+0x204>
 8006718:	0022      	movs	r2, r4
 800671a:	2301      	movs	r3, #1
 800671c:	3219      	adds	r2, #25
 800671e:	9904      	ldr	r1, [sp, #16]
 8006720:	9803      	ldr	r0, [sp, #12]
 8006722:	9e05      	ldr	r6, [sp, #20]
 8006724:	47b0      	blx	r6
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d02c      	beq.n	8006784 <_printf_i+0x200>
 800672a:	3501      	adds	r5, #1
 800672c:	68e3      	ldr	r3, [r4, #12]
 800672e:	9a07      	ldr	r2, [sp, #28]
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	42ab      	cmp	r3, r5
 8006734:	dcf0      	bgt.n	8006718 <_printf_i+0x194>
 8006736:	e7e9      	b.n	800670c <_printf_i+0x188>
 8006738:	2500      	movs	r5, #0
 800673a:	e7f7      	b.n	800672c <_printf_i+0x1a8>
 800673c:	2800      	cmp	r0, #0
 800673e:	d0ad      	beq.n	800669c <_printf_i+0x118>
 8006740:	9d02      	ldr	r5, [sp, #8]
 8006742:	0039      	movs	r1, r7
 8006744:	f7f9 fd6e 	bl	8000224 <__aeabi_uidivmod>
 8006748:	5c73      	ldrb	r3, [r6, r1]
 800674a:	3d01      	subs	r5, #1
 800674c:	702b      	strb	r3, [r5, #0]
 800674e:	2800      	cmp	r0, #0
 8006750:	d1f7      	bne.n	8006742 <_printf_i+0x1be>
 8006752:	2f08      	cmp	r7, #8
 8006754:	d109      	bne.n	800676a <_printf_i+0x1e6>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	07db      	lsls	r3, r3, #31
 800675a:	d506      	bpl.n	800676a <_printf_i+0x1e6>
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	6922      	ldr	r2, [r4, #16]
 8006760:	4293      	cmp	r3, r2
 8006762:	dc02      	bgt.n	800676a <_printf_i+0x1e6>
 8006764:	2330      	movs	r3, #48	; 0x30
 8006766:	3d01      	subs	r5, #1
 8006768:	702b      	strb	r3, [r5, #0]
 800676a:	9b02      	ldr	r3, [sp, #8]
 800676c:	1b5b      	subs	r3, r3, r5
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	9b05      	ldr	r3, [sp, #20]
 8006772:	aa07      	add	r2, sp, #28
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	0021      	movs	r1, r4
 8006778:	9b04      	ldr	r3, [sp, #16]
 800677a:	9803      	ldr	r0, [sp, #12]
 800677c:	f7ff fe94 	bl	80064a8 <_printf_common>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d1b8      	bne.n	80066f6 <_printf_i+0x172>
 8006784:	2001      	movs	r0, #1
 8006786:	4240      	negs	r0, r0
 8006788:	b009      	add	sp, #36	; 0x24
 800678a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678c:	08006be8 	.word	0x08006be8
 8006790:	08006bf9 	.word	0x08006bf9

08006794 <memchr>:
 8006794:	b2c9      	uxtb	r1, r1
 8006796:	1882      	adds	r2, r0, r2
 8006798:	4290      	cmp	r0, r2
 800679a:	d101      	bne.n	80067a0 <memchr+0xc>
 800679c:	2000      	movs	r0, #0
 800679e:	4770      	bx	lr
 80067a0:	7803      	ldrb	r3, [r0, #0]
 80067a2:	428b      	cmp	r3, r1
 80067a4:	d0fb      	beq.n	800679e <memchr+0xa>
 80067a6:	3001      	adds	r0, #1
 80067a8:	e7f6      	b.n	8006798 <memchr+0x4>

080067aa <memcpy>:
 80067aa:	2300      	movs	r3, #0
 80067ac:	b510      	push	{r4, lr}
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d100      	bne.n	80067b4 <memcpy+0xa>
 80067b2:	bd10      	pop	{r4, pc}
 80067b4:	5ccc      	ldrb	r4, [r1, r3]
 80067b6:	54c4      	strb	r4, [r0, r3]
 80067b8:	3301      	adds	r3, #1
 80067ba:	e7f8      	b.n	80067ae <memcpy+0x4>

080067bc <memmove>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	4288      	cmp	r0, r1
 80067c0:	d902      	bls.n	80067c8 <memmove+0xc>
 80067c2:	188b      	adds	r3, r1, r2
 80067c4:	4298      	cmp	r0, r3
 80067c6:	d303      	bcc.n	80067d0 <memmove+0x14>
 80067c8:	2300      	movs	r3, #0
 80067ca:	e007      	b.n	80067dc <memmove+0x20>
 80067cc:	5c8b      	ldrb	r3, [r1, r2]
 80067ce:	5483      	strb	r3, [r0, r2]
 80067d0:	3a01      	subs	r2, #1
 80067d2:	d2fb      	bcs.n	80067cc <memmove+0x10>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	5ccc      	ldrb	r4, [r1, r3]
 80067d8:	54c4      	strb	r4, [r0, r3]
 80067da:	3301      	adds	r3, #1
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1fa      	bne.n	80067d6 <memmove+0x1a>
 80067e0:	e7f8      	b.n	80067d4 <memmove+0x18>
	...

080067e4 <_free_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	0005      	movs	r5, r0
 80067e8:	2900      	cmp	r1, #0
 80067ea:	d010      	beq.n	800680e <_free_r+0x2a>
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	da00      	bge.n	80067f6 <_free_r+0x12>
 80067f4:	18e4      	adds	r4, r4, r3
 80067f6:	0028      	movs	r0, r5
 80067f8:	f000 f8d4 	bl	80069a4 <__malloc_lock>
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <_free_r+0x90>)
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <_free_r+0x2c>
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	6014      	str	r4, [r2, #0]
 8006808:	0028      	movs	r0, r5
 800680a:	f000 f8cc 	bl	80069a6 <__malloc_unlock>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	42a3      	cmp	r3, r4
 8006812:	d909      	bls.n	8006828 <_free_r+0x44>
 8006814:	6821      	ldr	r1, [r4, #0]
 8006816:	1860      	adds	r0, r4, r1
 8006818:	4283      	cmp	r3, r0
 800681a:	d1f3      	bne.n	8006804 <_free_r+0x20>
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	1841      	adds	r1, r0, r1
 8006822:	6021      	str	r1, [r4, #0]
 8006824:	e7ee      	b.n	8006804 <_free_r+0x20>
 8006826:	0013      	movs	r3, r2
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	2a00      	cmp	r2, #0
 800682c:	d001      	beq.n	8006832 <_free_r+0x4e>
 800682e:	42a2      	cmp	r2, r4
 8006830:	d9f9      	bls.n	8006826 <_free_r+0x42>
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	1858      	adds	r0, r3, r1
 8006836:	42a0      	cmp	r0, r4
 8006838:	d10b      	bne.n	8006852 <_free_r+0x6e>
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	1809      	adds	r1, r1, r0
 800683e:	1858      	adds	r0, r3, r1
 8006840:	6019      	str	r1, [r3, #0]
 8006842:	4282      	cmp	r2, r0
 8006844:	d1e0      	bne.n	8006808 <_free_r+0x24>
 8006846:	6810      	ldr	r0, [r2, #0]
 8006848:	6852      	ldr	r2, [r2, #4]
 800684a:	1841      	adds	r1, r0, r1
 800684c:	6019      	str	r1, [r3, #0]
 800684e:	605a      	str	r2, [r3, #4]
 8006850:	e7da      	b.n	8006808 <_free_r+0x24>
 8006852:	42a0      	cmp	r0, r4
 8006854:	d902      	bls.n	800685c <_free_r+0x78>
 8006856:	230c      	movs	r3, #12
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	e7d5      	b.n	8006808 <_free_r+0x24>
 800685c:	6821      	ldr	r1, [r4, #0]
 800685e:	1860      	adds	r0, r4, r1
 8006860:	4282      	cmp	r2, r0
 8006862:	d103      	bne.n	800686c <_free_r+0x88>
 8006864:	6810      	ldr	r0, [r2, #0]
 8006866:	6852      	ldr	r2, [r2, #4]
 8006868:	1841      	adds	r1, r0, r1
 800686a:	6021      	str	r1, [r4, #0]
 800686c:	6062      	str	r2, [r4, #4]
 800686e:	605c      	str	r4, [r3, #4]
 8006870:	e7ca      	b.n	8006808 <_free_r+0x24>
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	200001b0 	.word	0x200001b0

08006878 <_malloc_r>:
 8006878:	2303      	movs	r3, #3
 800687a:	b570      	push	{r4, r5, r6, lr}
 800687c:	1ccd      	adds	r5, r1, #3
 800687e:	439d      	bics	r5, r3
 8006880:	3508      	adds	r5, #8
 8006882:	0006      	movs	r6, r0
 8006884:	2d0c      	cmp	r5, #12
 8006886:	d21e      	bcs.n	80068c6 <_malloc_r+0x4e>
 8006888:	250c      	movs	r5, #12
 800688a:	42a9      	cmp	r1, r5
 800688c:	d81d      	bhi.n	80068ca <_malloc_r+0x52>
 800688e:	0030      	movs	r0, r6
 8006890:	f000 f888 	bl	80069a4 <__malloc_lock>
 8006894:	4a25      	ldr	r2, [pc, #148]	; (800692c <_malloc_r+0xb4>)
 8006896:	6814      	ldr	r4, [r2, #0]
 8006898:	0021      	movs	r1, r4
 800689a:	2900      	cmp	r1, #0
 800689c:	d119      	bne.n	80068d2 <_malloc_r+0x5a>
 800689e:	4c24      	ldr	r4, [pc, #144]	; (8006930 <_malloc_r+0xb8>)
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <_malloc_r+0x36>
 80068a6:	0030      	movs	r0, r6
 80068a8:	f000 f86a 	bl	8006980 <_sbrk_r>
 80068ac:	6020      	str	r0, [r4, #0]
 80068ae:	0029      	movs	r1, r5
 80068b0:	0030      	movs	r0, r6
 80068b2:	f000 f865 	bl	8006980 <_sbrk_r>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d12b      	bne.n	8006912 <_malloc_r+0x9a>
 80068ba:	230c      	movs	r3, #12
 80068bc:	0030      	movs	r0, r6
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	f000 f871 	bl	80069a6 <__malloc_unlock>
 80068c4:	e003      	b.n	80068ce <_malloc_r+0x56>
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	dadf      	bge.n	800688a <_malloc_r+0x12>
 80068ca:	230c      	movs	r3, #12
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	2000      	movs	r0, #0
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	680b      	ldr	r3, [r1, #0]
 80068d4:	1b5b      	subs	r3, r3, r5
 80068d6:	d419      	bmi.n	800690c <_malloc_r+0x94>
 80068d8:	2b0b      	cmp	r3, #11
 80068da:	d903      	bls.n	80068e4 <_malloc_r+0x6c>
 80068dc:	600b      	str	r3, [r1, #0]
 80068de:	18cc      	adds	r4, r1, r3
 80068e0:	6025      	str	r5, [r4, #0]
 80068e2:	e003      	b.n	80068ec <_malloc_r+0x74>
 80068e4:	684b      	ldr	r3, [r1, #4]
 80068e6:	428c      	cmp	r4, r1
 80068e8:	d10d      	bne.n	8006906 <_malloc_r+0x8e>
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	0030      	movs	r0, r6
 80068ee:	f000 f85a 	bl	80069a6 <__malloc_unlock>
 80068f2:	0020      	movs	r0, r4
 80068f4:	2207      	movs	r2, #7
 80068f6:	300b      	adds	r0, #11
 80068f8:	1d23      	adds	r3, r4, #4
 80068fa:	4390      	bics	r0, r2
 80068fc:	1ac3      	subs	r3, r0, r3
 80068fe:	d0e7      	beq.n	80068d0 <_malloc_r+0x58>
 8006900:	425a      	negs	r2, r3
 8006902:	50e2      	str	r2, [r4, r3]
 8006904:	e7e4      	b.n	80068d0 <_malloc_r+0x58>
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	000c      	movs	r4, r1
 800690a:	e7ef      	b.n	80068ec <_malloc_r+0x74>
 800690c:	000c      	movs	r4, r1
 800690e:	6849      	ldr	r1, [r1, #4]
 8006910:	e7c3      	b.n	800689a <_malloc_r+0x22>
 8006912:	2303      	movs	r3, #3
 8006914:	1cc4      	adds	r4, r0, #3
 8006916:	439c      	bics	r4, r3
 8006918:	42a0      	cmp	r0, r4
 800691a:	d0e1      	beq.n	80068e0 <_malloc_r+0x68>
 800691c:	1a21      	subs	r1, r4, r0
 800691e:	0030      	movs	r0, r6
 8006920:	f000 f82e 	bl	8006980 <_sbrk_r>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d1db      	bne.n	80068e0 <_malloc_r+0x68>
 8006928:	e7c7      	b.n	80068ba <_malloc_r+0x42>
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	200001b0 	.word	0x200001b0
 8006930:	200001b4 	.word	0x200001b4

08006934 <_realloc_r>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	0007      	movs	r7, r0
 8006938:	000d      	movs	r5, r1
 800693a:	0016      	movs	r6, r2
 800693c:	2900      	cmp	r1, #0
 800693e:	d105      	bne.n	800694c <_realloc_r+0x18>
 8006940:	0011      	movs	r1, r2
 8006942:	f7ff ff99 	bl	8006878 <_malloc_r>
 8006946:	0004      	movs	r4, r0
 8006948:	0020      	movs	r0, r4
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	2a00      	cmp	r2, #0
 800694e:	d103      	bne.n	8006958 <_realloc_r+0x24>
 8006950:	f7ff ff48 	bl	80067e4 <_free_r>
 8006954:	0034      	movs	r4, r6
 8006956:	e7f7      	b.n	8006948 <_realloc_r+0x14>
 8006958:	f000 f826 	bl	80069a8 <_malloc_usable_size_r>
 800695c:	002c      	movs	r4, r5
 800695e:	42b0      	cmp	r0, r6
 8006960:	d2f2      	bcs.n	8006948 <_realloc_r+0x14>
 8006962:	0031      	movs	r1, r6
 8006964:	0038      	movs	r0, r7
 8006966:	f7ff ff87 	bl	8006878 <_malloc_r>
 800696a:	1e04      	subs	r4, r0, #0
 800696c:	d0ec      	beq.n	8006948 <_realloc_r+0x14>
 800696e:	0029      	movs	r1, r5
 8006970:	0032      	movs	r2, r6
 8006972:	f7ff ff1a 	bl	80067aa <memcpy>
 8006976:	0029      	movs	r1, r5
 8006978:	0038      	movs	r0, r7
 800697a:	f7ff ff33 	bl	80067e4 <_free_r>
 800697e:	e7e3      	b.n	8006948 <_realloc_r+0x14>

08006980 <_sbrk_r>:
 8006980:	2300      	movs	r3, #0
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	4c06      	ldr	r4, [pc, #24]	; (80069a0 <_sbrk_r+0x20>)
 8006986:	0005      	movs	r5, r0
 8006988:	0008      	movs	r0, r1
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	f7fe fe4c 	bl	8005628 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d103      	bne.n	800699c <_sbrk_r+0x1c>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <_sbrk_r+0x1c>
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	20000918 	.word	0x20000918

080069a4 <__malloc_lock>:
 80069a4:	4770      	bx	lr

080069a6 <__malloc_unlock>:
 80069a6:	4770      	bx	lr

080069a8 <_malloc_usable_size_r>:
 80069a8:	1f0b      	subs	r3, r1, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	1f18      	subs	r0, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da01      	bge.n	80069b6 <_malloc_usable_size_r+0xe>
 80069b2:	580b      	ldr	r3, [r1, r0]
 80069b4:	18c0      	adds	r0, r0, r3
 80069b6:	4770      	bx	lr

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
