#include <stdio.h>
#include <time.h>
#include <string.h>
#include <inttypes.h>


#define bit_field(a,b) uint32_t a[((b>>5)+1)]
#define bit_field_clear(a) memset( a, 0, sizeof(a));
#define bit_field_set(a,b) if ( b < sizeof(a)*8) a[b>>5] |= (1 << (b&0x0000001F));
#define bit_field_reset(a,b) a[b>>5] &=~ (1 << (b&0x0000001F))
#define bit_field_get(a,b) !((a[b>>5] & (1 << (b&0x0000001F))) == 0)
#define bit_field_is_clear(a) bf_is_clear( a, sizeof(a)/sizeof(a[0]))
#define bit_field_is_single(a,b) bf_single( a, sizeof(a)/sizeof(a[0]), b)


int bf_is_clear( uint32_t* buf, uint32_t len)
{
    uint32_t i;
    for( i = 0; i < len; i++)
    {
	if ( buf[i] != 0) break;
    }
    if ( i < len) return 0;
    return 1;
}

int bf_single( uint32_t* buf, uint32_t len, uint32_t bit)
{
    uint32_t i;
    int res = 0;
    for( i = 0; i < len; i++)
    {
	if ( i == (bit>>5))
	{
            if (( buf[i] & (1 << ( bit & 0x0000001F))) == buf[i]) res = 1;
        }
        else
        {
	    if ( buf[i] != 0)
	    {
		res = 0;
	    }
        }
    }
    return res;
}


bit_field(BF_test, 0x3F);

int main( int argc, char* argv[]) {

    for(uint8_t i = 0; i < sizeof(BF_test)/sizeof(BF_test[0]); i++) { printf("v[%d]:%x\n", i, BF_test[i]);  }
    printf("Is clear: %d\n", bit_field_is_clear( BF_test));
    bit_field_set( BF_test, 0);
    bit_field_set( BF_test, 1);
//    bit_field_set( BF_test, 3);
//    bit_field_set( BF_test, 61);
//    bit_field_set( BF_test, 62);
//    bit_field_set( BF_test, 63);
    for(uint8_t i = 0; i < sizeof(BF_test)/sizeof(BF_test[0]); i++) { printf("v[%d]:%x\n", i, BF_test[i]);  }
    printf("Is clear: %d\n", bit_field_is_clear( BF_test));
    bit_field_reset( BF_test, 1);
    printf("Is clear: %d\n", bit_field_is_single( BF_test, 0));


    return 0;
}