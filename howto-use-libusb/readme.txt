21 октября 2010
   Примеры работы самодельным USB-устройством (макетка AVR-USB-MEGA16) из различных языков программирования - GCC, Microsoft Visual Studio C++ (.NET 2003), Visual Basic (VB6). Для полного счастья не хватает только примеров на Delphi. В этом архиве лежат примеры программ для управления светодиодом на макетке AVR-USB-MEGA16 к статье "Как использовать библиотеку libusb в Visual Studio (управление макеткой AVR-USB-MEGA16)". Исходники firmware лежат в папке examples\hid-custom-rq\firmware\. Исходники ПО хоста командной строки лежат в папке hid-custom-rq\commandline\, исходники ПО хоста с графическим интерфейсом лежат в папках hid-custom-rq\set-led-gui и set-led-gui-VB6. Скомпилированные бинарники для всех поддерживаемых типов микроконтроллеров и кварцев лежат в папке hid-custom-rq\firmware-bin-all.
   
   Устройство USB использует свободную библиотеку V-USB, программы для компьютера (ПО хоста) - свободную библиотеку libusb.
   
   Назначение папок архива (см. Ссылки [1]):

circuits\
   принципиальные схемы устройств USB.
   
doc\
   различная документация.

hid-custom-rq\commandline\
   ПО хоста, написанное на C (компилятор GCC), в виде утилиты командной строки. Позволяет получить состояние светодиода на макетной плате AVR-USB-MEGA16, а также включить и выключить светодиод.
   
hid-custom-rq\firmware-bin-all\
   Скомпилированное, готовое firmware для различных вариантов конфигурации микроконтроллера и кварца.
   
hid-custom-rq\firmware-mega\
   Firmware для USB-устройства, записанное в макетную плату AVR-USB-MEGA16 (микроконтроллер ATmega16 или ATmega32A).
   
hid-custom-rq\firmware-tiny\
   Firmware для USB-устройства, записанное в макетную плату AVR-USB-TINY45 (микроконтроллер ATtiny45 или ATtiny85).
   
hid-custom-rq\firmware-haunted\
   Firmware для шуточного USB-устройства (HID клавиатура-привидение) для макетной платы AVR-USB-TINY45 (микроконтроллер ATtiny45 или ATtiny85).
   
hid-custom-rq\set-led-gui\
   ПО хоста, написанное на Microsoft Visual Studio C++ (.NET 2003), в виде GUI-утилиты. Позволяет управлять состоянием светодиода на макетной плате AVR-USB-MEGA16 (включить и выключить светодиод).

hid-custom-rq\set-led-gui-VB6\
   ПО хоста, написанное на Microsoft Visual Studio C++ (.NET 2003), в виде GUI-утилиты. Позволяет управлять состоянием светодиода на макетной плате AVR-USB-MEGA16 (включить и выключить светодиод). Автор Степаненко Вячеслав (Казахстан, г. Талдыкорган). Работает точно так же, как и GUI-программа, написанная на Microsoft Visual Stidio C++. Используется обертка для функций libusb, выполненная в виде libusbvb0.dll (автор неизвестен).
   
libs-host\
   Исходный код вспомогательного кода ПО хоста для библиотек LibUSB.

libs-device\
   Исходный код вспомогательного кода для устройств USB.

libusb\
   Дистрибутив библиотеки libusb 0.1.12.1 (возможно, уже устарел, ищите более новую версию на sourceforge.net).
   
src-libusbvb0.dll\
   Исходники (GCC) обертки для функций libusb, выполненной в виде libusbvb0.dll. Позволяет программе на Visual Basic VB6 получать доступ к функциям библиотеки libusb. Автор неизвестен.
   
tests
   код для тестирования библиотеки V-USB.

usbdrv\
   Библиотека V-USB компании Obdev.at.
   
usbhidioc\
   ПО хоста, написанное на Microsoft Visual Studio C++ - пример взаимодействия с устройствами USB HID класса.
   
V-USB-examples\
   другие примеры ПО хоста и устройств USB из библиотеки V-USB.

-------------------------------------------------------------------------------------------------
Для примеров компилирования предполагается, что Вы уже установили у себя пакет WinAVR, пакет MinGW и библиотеку libusb (т. е. выполнили все рекомендации статьи "Разработка устройства USB - как начать работу с библиотеками AVR USB (V-USB) и libusb"). Для компилирования GUI понадобится среда Visual Studio .NET 2003 компании Microsoft (или более свежая версия).

[Как компилировать firmware]

1. Распаковываем содержимое архива в любую папку.
2. Переходим в папку hid-custom-rq\firmware\ (здесь XX одначает 16 или 32 для микроконтроллеров ATmega16 и ATmega32 соответственно). Запускаем интерпретатор cmd.
3. Если нам надо компилировать для микроконтроллера ATmega16, то копируем файл Makefile-ATmega16 в файл Makefile:
copy /Y Makefile-ATmega16 /B Makefile /B
Соответственно, если нам надо скомпилировать для ATmega32, то выполняем команду:
copy /Y Makefile-ATmega32 /B Makefile /B
4. make clean
5. make hex
6. В текущей папке получаем файл main.hex - скомпилированная прошивка firmware.

[Как компилировать ПО хоста для командной строки]

1. Распаковываем содержимое архива в любую папку.
2. Переходим в папку hid-custom-rq\commandline\. Запускаем интерпретатор cmd.
3. make clean
4. make
5. В текущей папке получаем файл set-led.exe - скомпилированная программа (ПО хоста) командной строки, позволяющая управлять светодиодом.

[Как компилировать ПО хоста GUI]

1. Распаковываем содержимое архива в любую папку.
2. В среде Visual Studio идем в меню File -> Open Solution..., открываем файл examples\hid-custom-rq\set-led-gui\set-led-gui.sln.
3. Если надо скомпилировать для отладки, то выбираем конфигурацию Debug, а если для релиза (без отладочной информации), то выбираем конфигурацию Release.
4. Build -> Clean set-led-gui
5. Build -> Build set-led-gui
6. В папке hid-custom-rq\set-led-gui\Debug\ (или hid-custom-rq\set-led-gui\Release\) получаем скомпилированный исполняемый файл set-led-gui.exe. 

[Ссылки]

1. 131008howto-use-libusb.zip.
2. Как использовать библиотеку libusb в Visual Studio (управление макеткой AVR-USB-MEGA16).
3. Как работать с платой AVR-USB-MEGA16 из C# (Visual Studio Express Edition 2008).
4. Класс C# (для Visual Studio Express Edition 2008) и соответствующая прошивка, позволяющие быстро сделать USB HID устройство и написать для него приложение для компьютера. Вы управляете микроконтроллером прямо из кода на C# (дергаете его ножками, читаете регистры и т. п.).